diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..9a6bcbc 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -1512,10 +1512,10 @@ class BinOp(_base_nodes.OperatorNode):
         bad = []
         try:
             for result in self._infer_binop(context=context):
-                if result is util.Uninferable:
-                    raise InferenceError
                 if isinstance(result, util.BadBinaryOperationMessage):
                     bad.append(result)
+                if result is util.Uninferable:
+                    raise InferenceError
         except InferenceError:
             return []
         return bad
@@ -1528,19 +1528,14 @@ class BinOp(_base_nodes.OperatorNode):
         return OP_PRECEDENCE[self.op]
 
     def op_left_associative(self) -> bool:
-        # 2**3**4 == 2**(3**4)
         return self.op != "**"
 
     def _infer_binop(
         self, context: InferenceContext | None = None, **kwargs: Any
     ) -> Generator[InferenceResult]:
-        """Binary operation inference logic."""
         left = self.left
         right = self.right
 
-        # we use two separate contexts for evaluating lhs and rhs because
-        # 1. evaluating lhs may leave some undesired entries in context.path
-        #    which may not let us infer right value of rhs
         context = context or InferenceContext()
         lhs_context = copy_context(context)
         rhs_context = copy_context(context)
@@ -1548,7 +1543,6 @@ class BinOp(_base_nodes.OperatorNode):
         rhs_iter = right.infer(context=rhs_context)
         for lhs, rhs in itertools.product(lhs_iter, rhs_iter):
             if any(isinstance(value, util.UninferableBase) for value in (rhs, lhs)):
-                # Don't know how to process this.
                 yield util.Uninferable
                 return
 
@@ -1568,7 +1562,6 @@ class BinOp(_base_nodes.OperatorNode):
             self._infer_binop, context, util.BadBinaryOperationMessage
         )
 
-
 class BoolOp(NodeNG):
     """Class representing an :class:`ast.BoolOp` node.
 
