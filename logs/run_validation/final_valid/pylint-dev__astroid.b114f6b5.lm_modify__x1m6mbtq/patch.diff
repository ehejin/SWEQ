diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..2dea8dd 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -608,29 +608,6 @@ DEPRECATED_ARGUMENT_DEFAULT = "DEPRECATED_ARGUMENT_DEFAULT"
 class Arguments(
     _base_nodes.AssignTypeNode
 ):  # pylint: disable=too-many-instance-attributes
-    """Class representing an :class:`ast.arguments` node.
-
-    An :class:`Arguments` node represents that arguments in a
-    function definition.
-
-    >>> import astroid
-    >>> node = astroid.extract_node('def foo(bar): pass')
-    >>> node
-    <FunctionDef.foo l.1 at 0x7effe1db8198>
-    >>> node.args
-    <Arguments l.1 at 0x7effe1db82e8>
-    """
-
-    # Python 3.4+ uses a different approach regarding annotations,
-    # each argument is a new class, _ast.arg, which exposes an
-    # 'annotation' attribute. In astroid though, arguments are exposed
-    # as is in the Arguments node and the only way to expose annotations
-    # is by using something similar with Python 3.3:
-    #  - we expose 'varargannotation' and 'kwargannotation' of annotations
-    #    of varargs and kwargs.
-    #  - we expose 'annotation', a list with annotations for
-    #    for each normal argument. If an argument doesn't have an
-    #    annotation, its value will be None.
     _astroid_fields = (
         "args",
         "defaults",
@@ -650,67 +627,20 @@ class Arguments(
     _other_fields = ("vararg", "kwarg")
 
     args: list[AssignName] | None
-    """The names of the required arguments.
-
-    Can be None if the associated function does not have a retrievable
-    signature and the arguments are therefore unknown.
-    This can happen with (builtin) functions implemented in C that have
-    incomplete signature information.
-    """
-
     defaults: list[NodeNG] | None
-    """The default values for arguments that can be passed positionally."""
-
     kwonlyargs: list[AssignName]
-    """The keyword arguments that cannot be passed positionally."""
-
     posonlyargs: list[AssignName]
-    """The arguments that can only be passed positionally."""
-
     kw_defaults: list[NodeNG | None] | None
-    """The default values for keyword arguments that cannot be passed positionally."""
-
     annotations: list[NodeNG | None]
-    """The type annotations of arguments that can be passed positionally."""
-
     posonlyargs_annotations: list[NodeNG | None]
-    """The type annotations of arguments that can only be passed positionally."""
-
     kwonlyargs_annotations: list[NodeNG | None]
-    """The type annotations of arguments that cannot be passed positionally."""
-
     type_comment_args: list[NodeNG | None]
-    """The type annotation, passed by a type comment, of each argument.
-
-    If an argument does not have a type comment,
-    the value for that argument will be None.
-    """
-
     type_comment_kwonlyargs: list[NodeNG | None]
-    """The type annotation, passed by a type comment, of each keyword only argument.
-
-    If an argument does not have a type comment,
-    the value for that argument will be None.
-    """
-
     type_comment_posonlyargs: list[NodeNG | None]
-    """The type annotation, passed by a type comment, of each positional argument.
-
-    If an argument does not have a type comment,
-    the value for that argument will be None.
-    """
-
     varargannotation: NodeNG | None
-    """The type annotation for the variable length arguments."""
-
     kwargannotation: NodeNG | None
-    """The type annotation for the variable length keyword arguments."""
-
     vararg_node: AssignName | None
-    """The node for variable length arguments"""
-
     kwarg_node: AssignName | None
-    """The node for variable keyword arguments"""
 
     def __init__(
         self,
@@ -720,7 +650,6 @@ class Arguments(
         vararg_node: AssignName | None = None,
         kwarg_node: AssignName | None = None,
     ) -> None:
-        """Almost all attributes can be None for living objects where introspection failed."""
         super().__init__(
             parent=parent,
             lineno=None,
@@ -730,15 +659,12 @@ class Arguments(
         )
 
         self.vararg = vararg
-        """The name of the variable length arguments."""
 
         self.kwarg = kwarg
-        """The name of the variable length keyword arguments."""
 
         self.vararg_node = vararg_node
         self.kwarg_node = kwarg_node
 
-    # pylint: disable=too-many-arguments, too-many-positional-arguments
     def postinit(
         self,
         args: list[AssignName] | None,
@@ -764,7 +690,6 @@ class Arguments(
         self.kwonlyargs_annotations = kwonlyargs_annotations
         self.posonlyargs_annotations = posonlyargs_annotations
 
-        # Parameters that got added later and need a default
         self.varargannotation = varargannotation
         self.kwargannotation = kwargannotation
         if type_comment_args is None:
@@ -778,9 +703,6 @@ class Arguments(
         self.type_comment_posonlyargs = type_comment_posonlyargs
 
     assigned_stmts = protocols.arguments_assigned_stmts
-    """Returns the assigned statement (non inferred) according to the assignment type.
-    See astroid/protocols.py for actual implementation.
-    """
 
     def _infer_name(self, frame, name):
         if self.parent is frame:
@@ -789,22 +711,11 @@ class Arguments(
 
     @cached_property
     def fromlineno(self) -> int:
-        """The first line that this node appears on in the source code.
-
-        Can also return 0 if the line can not be determined.
-        """
         lineno = super().fromlineno
         return max(lineno, self.parent.fromlineno or 0)
 
     @cached_property
     def arguments(self):
-        """Get all the arguments for this node. This includes:
-        * Positional only arguments
-        * Positional arguments
-        * Keyword arguments
-        * Variable arguments (.e.g *args)
-        * Variable keyword arguments (e.g **kwargs)
-        """
         retval = list(itertools.chain((self.posonlyargs or ()), (self.args or ())))
         if self.vararg_node:
             retval.append(self.vararg_node)
@@ -815,11 +726,6 @@ class Arguments(
         return retval
 
     def format_args(self, *, skippable_names: set[str] | None = None) -> str:
-        """Get the arguments formatted as string.
-
-        :returns: The formatted arguments.
-        :rtype: str
-        """
         result = []
         positional_only_defaults = []
         positional_or_keyword_defaults = self.defaults
@@ -870,22 +776,14 @@ class Arguments(
         dict[str, tuple[str | None, str | None]],
         dict[str, tuple[str | None, str | None]],
     ]:
-        """Get the arguments as dictionary with information about typing and defaults.
-
-        The return tuple contains a dictionary for positional and keyword arguments with their typing
-        and their default value, if any.
-        The method follows a similar order as format_args but instead of formatting into a string it
-        returns the data that is used to do so.
-        """
         pos_only: dict[str, tuple[str | None, str | None]] = {}
         kw_only: dict[str, tuple[str | None, str | None]] = {}
 
-        # Setup and match defaults with arguments
         positional_only_defaults = []
         positional_or_keyword_defaults = self.defaults
         if self.defaults:
             args = self.args or []
-            positional_or_keyword_defaults = self.defaults[-len(args) :]
+            positional_or_keyword_defaults = self.defaults[-len(args) + 1 :]
             positional_only_defaults = self.defaults[: len(self.defaults) - len(args)]
 
         for index, posonly in enumerate(self.posonlyargs):
@@ -934,14 +832,6 @@ class Arguments(
         return pos_only, kw_only
 
     def default_value(self, argname):
-        """Get the default value for an argument.
-
-        :param argname: The name of the argument to get the default value for.
-        :type argname: str
-
-        :raises NoDefault: If there is no default value defined for the
-            given argument.
-        """
         args = [
             arg for arg in self.arguments if arg.name not in [self.vararg, self.kwarg]
         ]
@@ -961,13 +851,6 @@ class Arguments(
         raise NoDefault(func=self.parent, name=argname)
 
     def is_argument(self, name) -> bool:
-        """Check if the given name is defined in the arguments.
-
-        :param name: The name to check for.
-        :type name: str
-
-        :returns: Whether the given name is defined in the arguments,
-        """
         if name == self.vararg:
             return True
         if name == self.kwarg:
@@ -975,14 +858,6 @@ class Arguments(
         return self.find_argname(name)[1] is not None
 
     def find_argname(self, argname, rec=DEPRECATED_ARGUMENT_DEFAULT):
-        """Get the index and :class:`AssignName` node for given name.
-
-        :param argname: The name of the argument to search for.
-        :type argname: str
-
-        :returns: The index and node for the argument.
-        :rtype: tuple(str or None, AssignName or None)
-        """
         if rec != DEPRECATED_ARGUMENT_DEFAULT:  # pragma: no cover
             warnings.warn(
                 "The rec argument will be removed in astroid 3.1.",
@@ -1030,14 +905,12 @@ class Arguments(
     def _infer(
         self: nodes.Arguments, context: InferenceContext | None = None, **kwargs: Any
     ) -> Generator[InferenceResult]:
-        # pylint: disable-next=import-outside-toplevel
         from astroid.protocols import _arguments_infer_argname
 
         if context is None or context.lookupname is None:
             raise InferenceError(node=self, context=context)
         return _arguments_infer_argname(self, context.lookupname, context)
 
-
 def _find_arg(argname, args):
     for i, arg in enumerate(args):
         if arg.name == argname:
