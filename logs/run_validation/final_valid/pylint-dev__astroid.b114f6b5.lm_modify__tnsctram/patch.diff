diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..648c456 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -3906,8 +3906,6 @@ class Try(_base_nodes.MultiLineWithElseBlockNode, _base_nodes.Statement):
 
 
 class TryStar(_base_nodes.MultiLineWithElseBlockNode, _base_nodes.Statement):
-    """Class representing an :class:`ast.TryStar` node."""
-
     _astroid_fields = ("body", "handlers", "orelse", "finalbody")
     _multi_line_block_fields = ("body", "handlers", "orelse", "finalbody")
 
@@ -3920,27 +3918,10 @@ class TryStar(_base_nodes.MultiLineWithElseBlockNode, _base_nodes.Statement):
         end_col_offset: int | None = None,
         parent: NodeNG | None = None,
     ) -> None:
-        """
-        :param lineno: The line that this node appears on in the source code.
-        :param col_offset: The column that this node appears on in the
-            source code.
-        :param parent: The parent node in the syntax tree.
-        :param end_lineno: The last line this node appears on in the source code.
-        :param end_col_offset: The end column this node appears on in the
-            source code. Note: This is after the last symbol.
-        """
         self.body: list[NodeNG] = []
-        """The contents of the block to catch exceptions from."""
-
         self.handlers: list[ExceptHandler] = []
-        """The exception handlers."""
-
         self.orelse: list[NodeNG] = []
-        """The contents of the ``else`` block."""
-
         self.finalbody: list[NodeNG] = []
-        """The contents of the ``finally`` block."""
-
         super().__init__(
             lineno=lineno,
             col_offset=col_offset,
@@ -3957,16 +3938,10 @@ class TryStar(_base_nodes.MultiLineWithElseBlockNode, _base_nodes.Statement):
         orelse: list[NodeNG] | None = None,
         finalbody: list[NodeNG] | None = None,
     ) -> None:
-        """Do some setup after initialisation.
-        :param body: The contents of the block to catch exceptions from.
-        :param handlers: The exception handlers.
-        :param orelse: The contents of the ``else`` block.
-        :param finalbody: The contents of the ``finally`` block.
-        """
-        if body:
-            self.body = body
         if handlers:
             self.handlers = handlers
+        if body:
+            self.body = body
         if orelse:
             self.orelse = orelse
         if finalbody:
@@ -3976,11 +3951,9 @@ class TryStar(_base_nodes.MultiLineWithElseBlockNode, _base_nodes.Statement):
         return name
 
     def block_range(self, lineno: int) -> tuple[int, int]:
-        """Get a range from a given line number to where this node ends."""
         if lineno == self.fromlineno:
             return lineno, lineno
         if self.body and self.body[0].fromlineno <= lineno <= self.body[-1].tolineno:
-            # Inside try body - return from lineno till end of try body
             return lineno, self.body[-1].tolineno
         for exhandler in self.handlers:
             if exhandler.type and lineno == exhandler.type.fromlineno:
@@ -4005,7 +3978,6 @@ class TryStar(_base_nodes.MultiLineWithElseBlockNode, _base_nodes.Statement):
         yield from self.orelse
         yield from self.finalbody
 
-
 class Tuple(BaseContainer):
     """Class representing an :class:`ast.Tuple` node.
 
