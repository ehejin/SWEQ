diff --git a/astroid/brain/brain_builtin_inference.py b/astroid/brain/brain_builtin_inference.py
index a56b152..d59301e 100644
--- a/astroid/brain/brain_builtin_inference.py
+++ b/astroid/brain/brain_builtin_inference.py
@@ -825,29 +825,27 @@ def infer_isinstance(
     return nodes.Const(isinstance_bool)
 
 
-def _class_or_tuple_to_container(
-    node: InferenceResult, context: InferenceContext | None = None
-) -> list[InferenceResult]:
-    # Move inferences results into container
-    # to simplify later logic
-    # raises InferenceError if any of the inferences fall through
+def _class_or_tuple_to_container(node: InferenceResult, context: (
+    InferenceContext | None)=None) -> list[InferenceResult]:
+    """Convert a class or a tuple of classes to a list of InferenceResult."""
     try:
-        node_infer = next(node.infer(context=context))
-    except StopIteration as e:
-        raise InferenceError(node=node, context=context) from e
-    # arg2 MUST be a type or a TUPLE of types
-    # for isinstance
-    if isinstance(node_infer, nodes.Tuple):
-        try:
-            class_container = [
-                next(node.infer(context=context)) for node in node_infer.elts
-            ]
-        except StopIteration as e:
-            raise InferenceError(node=node, context=context) from e
-    else:
-        class_container = [node_infer]
-    return class_container
+        inferred = next(node.infer(context=context))
+    except (InferenceError, StopIteration) as exc:
+        raise InferenceError from exc
 
+    if isinstance(inferred, nodes.Tuple):
+        # If it's a tuple, infer each element
+        results = []
+        for element in inferred.elts:
+            try:
+                inferred_element = next(element.infer(context=context))
+                results.append(inferred_element)
+            except (InferenceError, StopIteration):
+                raise InferenceError
+        return results
+    else:
+        # Otherwise, return the inferred node as a single-element list
+        return [inferred]
 
 def infer_len(node, context: InferenceContext | None = None) -> nodes.Const:
     """Infer length calls.
