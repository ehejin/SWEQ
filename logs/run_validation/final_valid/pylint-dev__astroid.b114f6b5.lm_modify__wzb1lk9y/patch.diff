diff --git a/astroid/protocols.py b/astroid/protocols.py
index 8a837b8..b69f636 100644
--- a/astroid/protocols.py
+++ b/astroid/protocols.py
@@ -545,8 +545,15 @@ def _infer_context_manager(self, mgr, context):
         inferred = next(mgr.infer(context=context))
     except StopIteration as e:
         raise InferenceError(node=mgr) from e
-    if isinstance(inferred, bases.Generator):
-        # Check if it is decorated with contextlib.contextmanager.
+    if isinstance(inferred, bases.Instance):
+        try:
+            enter = next(inferred.igetattr("__enter__", context=context))
+        except (InferenceError, AttributeInferenceError, StopIteration) as exc:
+            raise InferenceError(node=inferred) from exc
+        if not isinstance(enter, bases.BoundMethod):
+            raise InferenceError(node=enter)
+        yield from enter.infer_call_result(self, context)
+    elif isinstance(inferred, bases.Generator):
         func = inferred.parent
         if not func.decorators:
             raise InferenceError(
@@ -559,25 +566,14 @@ def _infer_context_manager(self, mgr, context):
                 if decorator.qname() == _CONTEXTLIB_MGR:
                     break
         else:
-            # It doesn't interest us.
             raise InferenceError(node=func)
         try:
             yield next(inferred.infer_yield_types())
         except StopIteration as e:
             raise InferenceError(node=func) from e
-
-    elif isinstance(inferred, bases.Instance):
-        try:
-            enter = next(inferred.igetattr("__enter__", context=context))
-        except (InferenceError, AttributeInferenceError, StopIteration) as exc:
-            raise InferenceError(node=inferred) from exc
-        if not isinstance(enter, bases.BoundMethod):
-            raise InferenceError(node=enter)
-        yield from enter.infer_call_result(self, context)
     else:
         raise InferenceError(node=mgr)
 
-
 @decorators.raise_if_nothing_inferred
 def with_assigned_stmts(
     self: nodes.With,
