diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..9e69bee 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -2232,7 +2232,7 @@ class ClassDef(
             if name in astroid:
                 yield astroid
 
-    def instance_attr_ancestors(self, name, context: InferenceContext | None = None):
+    def instance_attr_ancestors(self, name, context: (InferenceContext | None)=None):
         """Iterate over the parents that define the given name as an attribute.
 
         :param name: The name to find definitions for.
@@ -2242,10 +2242,15 @@ class ClassDef(
             an instance attribute.
         :rtype: iterable(NodeNG)
         """
-        for astroid in self.ancestors(context=context):
-            if name in astroid.instance_attrs:
-                yield astroid
-
+        try:
+            ancestors = self.mro(context)[1:]  # Skip the class itself
+        except MroError:
+            # Fallback to use ancestors, we can't determine a sane MRO.
+            ancestors = self.ancestors(context=context)
+    
+        for ancestor in ancestors:
+            if name in ancestor.instance_attrs:
+                yield ancestor
     def has_base(self, node) -> bool:
         """Whether this class directly inherits from the given node.
 
