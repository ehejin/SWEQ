diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..5a2f6c9 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1078,17 +1078,6 @@ class FunctionDef(
     _base_nodes.Statement,
     LocalsDictNodeNG,
 ):
-    """Class representing an :class:`ast.FunctionDef`.
-
-    >>> import astroid
-    >>> node = astroid.extract_node('''
-    ... def my_func(arg):
-    ...     return arg + 1
-    ... ''')
-    >>> node
-    <FunctionDef.my_func l.2 at 0x7f23b2e71e10>
-    """
-
     _astroid_fields = (
         "decorators",
         "args",
@@ -1101,34 +1090,19 @@ class FunctionDef(
     returns = None
 
     decorators: node_classes.Decorators | None
-    """The decorators that are applied to this method or function."""
 
     doc_node: Const | None
-    """The doc node associated with this node."""
 
     args: Arguments
-    """The arguments that the function takes."""
 
     is_function = True
-    """Whether this node indicates a function.
-
-    For a :class:`FunctionDef` this is always ``True``.
 
-    :type: bool
-    """
     type_annotation = None
-    """If present, this will contain the type annotation passed by a type comment
 
-    :type: NodeNG or None
-    """
     type_comment_args = None
-    """
-    If present, this will contain the type annotation for arguments
-    passed by a type comment
-    """
+
     type_comment_returns = None
-    """If present, this will contain the return type annotation, passed by a type comment"""
-    # attributes below are set by the builder module or by raw factories
+
     _other_fields = ("name", "position")
     _other_other_fields = (
         "locals",
@@ -1141,7 +1115,6 @@ class FunctionDef(
     name = "<functiondef>"
 
     special_attributes = FunctionModel()
-    """The names of special attributes that this function has."""
 
     def __init__(
         self,
@@ -1154,18 +1127,14 @@ class FunctionDef(
         end_col_offset: int | None,
     ) -> None:
         self.name = name
-        """The name of the function."""
 
         self.locals = {}
-        """A map of the name of a local variable to the node defining it."""
 
         self.body: list[NodeNG] = []
-        """The contents of the function body."""
 
         self.type_params: list[nodes.TypeVar | nodes.ParamSpec | nodes.TypeVarTuple] = (
             []
         )
-        """PEP 695 (Python 3.12+) type params, e.g. first 'T' in def func[T]() -> T: ..."""
 
         self.instance_attrs: dict[str, list[NodeNG]] = {}
 
@@ -1192,25 +1161,6 @@ class FunctionDef(
             list[nodes.TypeVar | nodes.ParamSpec | nodes.TypeVarTuple] | None
         ) = None,
     ):
-        """Do some setup after initialisation.
-
-        :param args: The arguments that the function takes.
-
-        :param body: The contents of the function body.
-
-        :param decorators: The decorators that are applied to this
-            method or function.
-        :params type_comment_returns:
-            The return type annotation passed via a type comment.
-        :params type_comment_args:
-            The args type annotation passed via a type comment.
-        :params position:
-            Position of function keyword(s) and name.
-        :param doc_node:
-            The doc node associated with this node.
-        :param type_params:
-            The type_params associated with this node.
-        """
         self.args = args
         self.body = body
         self.decorators = decorators
@@ -1223,13 +1173,6 @@ class FunctionDef(
 
     @cached_property
     def extra_decorators(self) -> list[node_classes.Call]:
-        """The extra decorators that this function can have.
-
-        Additional decorators are considered when they are used as
-        assignments, as in ``method = staticmethod(method)``.
-        The property will return all the callables that are used for
-        decoration.
-        """
         if not self.parent or not isinstance(frame := self.parent.frame(), ClassDef):
             return []
 
@@ -1240,20 +1183,15 @@ class FunctionDef(
             ):
                 for assign_node in assign.targets:
                     if not isinstance(assign_node, node_classes.AssignName):
-                        # Support only `name = callable(name)`
                         continue
 
                     if assign_node.name != self.name:
-                        # Interested only in the assignment nodes that
-                        # decorates the current method.
                         continue
                     try:
                         meth = frame[self.name]
                     except KeyError:
                         continue
                     else:
-                        # Must be a function and in the same frame as the
-                        # original method.
                         if (
                             isinstance(meth, FunctionDef)
                             and assign_node.frame() == frame
@@ -1262,20 +1200,12 @@ class FunctionDef(
         return decorators
 
     def pytype(self) -> Literal["builtins.instancemethod", "builtins.function"]:
-        """Get the name of the type that this node represents.
-
-        :returns: The name of the type.
-        """
         if "method" in self.type:
             return "builtins.instancemethod"
         return "builtins.function"
 
     def display_type(self) -> str:
-        """A human readable type of this node.
-
-        :returns: The type of this node.
-        :rtype: str
-        """
+        type_name = "method"
         if "method" in self.type:
             return "Method"
         return "Function"
@@ -1284,14 +1214,7 @@ class FunctionDef(
         return True
 
     def argnames(self) -> list[str]:
-        """Get the names of each of the arguments, including that
-        of the collections of variable-length arguments ("args", "kwargs",
-        etc.), as well as positional-only and keyword-only arguments.
-
-        :returns: The names of the arguments.
-        :rtype: list(str)
-        """
-        if self.args.arguments:  # maybe None with builtin functions
+        if self.args.arguments:
             names = [elt.name for elt in self.args.arguments]
         else:
             names = []
@@ -1314,11 +1237,7 @@ class FunctionDef(
         raise AttributeInferenceError(target=self, attribute=name)
 
     @cached_property
-    def type(self) -> str:  # pylint: disable=too-many-return-statements # noqa: C901
-        """The function type for this node.
-
-        Possible values are: method, function, staticmethod, classmethod.
-        """
+    def type(self) -> str:
         for decorator in self.extra_decorators:
             if decorator.func.name in BUILTIN_DESCRIPTORS:
                 return decorator.func.name
@@ -1354,10 +1273,6 @@ class FunctionDef(
                 return node.attrname
 
             if isinstance(node, node_classes.Call):
-                # Handle the following case:
-                # @some_decorator(arg1, arg2)
-                # def func(...)
-                #
                 try:
                     current = next(node.func.infer())
                 except (InferenceError, StopIteration):
@@ -1368,7 +1283,6 @@ class FunctionDef(
 
             try:
                 for inferred in node.infer():
-                    # Check to see if this returns a static or a class method.
                     _type = _infer_decorator_callchain(inferred)
                     if _type is not None:
                         return _type
@@ -1388,12 +1302,6 @@ class FunctionDef(
 
     @cached_property
     def fromlineno(self) -> int:
-        """The first line that this node appears on in the source code.
-
-        Can also return 0 if the line can not be determined.
-        """
-        # lineno is the line number of the first decorator, we want the def
-        # statement lineno. Similar to 'ClassDef.fromlineno'
         lineno = self.lineno or 0
         if self.decorators is not None:
             lineno += sum(
@@ -1404,28 +1312,17 @@ class FunctionDef(
 
     @cached_property
     def blockstart_tolineno(self):
-        """The line on which the beginning of this block ends.
-
-        :type: int
-        """
         return self.args.tolineno
 
     def implicit_parameters(self) -> Literal[0, 1]:
         return 1 if self.is_bound() else 0
 
     def block_range(self, lineno: int) -> tuple[int, int]:
-        """Get a range from the given line number to where this node ends.
-
-        :param lineno: Unused.
-
-        :returns: The range of line numbers that this node belongs to,
-        """
         return self.fromlineno, self.tolineno
 
     def igetattr(
         self, name: str, context: InferenceContext | None = None
     ) -> Iterator[InferenceResult]:
-        """Inferred getattr, which returns an iterator of inferred statements."""
         try:
             return bases._infer_stmts(self.getattr(name, context), context, frame=self)
         except AttributeInferenceError as error:
@@ -1434,12 +1331,6 @@ class FunctionDef(
             ) from error
 
     def is_method(self) -> bool:
-        """Check if this function node represents a method.
-
-        :returns: Whether this is a method.
-        """
-        # check we are defined in a ClassDef, because this is usually expected
-        # (e.g. pylint...) when is_method() return True
         return (
             self.type != "function"
             and self.parent is not None
@@ -1447,12 +1338,6 @@ class FunctionDef(
         )
 
     def decoratornames(self, context: InferenceContext | None = None) -> set[str]:
-        """Get the qualified names of each of the decorators on this function.
-
-        :param context:
-            An inference context that can be passed to inference functions
-        :returns: The names of the decorators.
-        """
         result = set()
         decoratornodes = []
         if self.decorators is not None:
@@ -1467,23 +1352,9 @@ class FunctionDef(
         return result
 
     def is_bound(self) -> bool:
-        """Check if the function is bound to an instance or class.
-
-        :returns: Whether the function is bound to an instance or class.
-        """
         return self.type in {"method", "classmethod"}
 
     def is_abstract(self, pass_is_abstract=True, any_raise_is_abstract=False) -> bool:
-        """Check if the method is abstract.
-
-        A method is considered abstract if any of the following is true:
-        * The only statement is 'raise NotImplementedError'
-        * The only statement is 'raise <SomeException>' and any_raise_is_abstract is True
-        * The only statement is 'pass' and pass_is_abstract is True
-        * The method is annotated with abc.astractproperty/abc.abstractmethod
-
-        :returns: Whether the method is abstract.
-        """
         if self.decorators:
             for node in self.decorators.nodes:
                 try:
@@ -1503,26 +1374,20 @@ class FunctionDef(
                 if child_node.raises_not_implemented():
                     return True
             return pass_is_abstract and isinstance(child_node, node_classes.Pass)
-        # empty function is the same as function with a single "pass" statement
         if pass_is_abstract:
             return True
 
         return False
 
     def is_generator(self) -> bool:
-        """Check if this is a generator function.
-
-        :returns: Whether this is a generator function.
-        """
         yields_without_lambdas = set(self._get_yield_nodes_skip_lambdas())
         yields_without_functions = set(self._get_yield_nodes_skip_functions())
-        # Want an intersecting member that is neither in a lambda nor a function
         return bool(yields_without_lambdas & yields_without_functions)
 
     def _infer(
         self, context: InferenceContext | None = None, **kwargs: Any
     ) -> Generator[objects.Property | FunctionDef, None, InferenceErrorInfo]:
-        from astroid import objects  # pylint: disable=import-outside-toplevel
+        from astroid import objects
 
         if not self.decorators or not bases._is_property(self):
             yield self
@@ -1542,11 +1407,6 @@ class FunctionDef(
         return InferenceErrorInfo(node=self, context=context)
 
     def infer_yield_result(self, context: InferenceContext | None = None):
-        """Infer what the function yields when called
-
-        :returns: What the function yields
-        :rtype: iterable(NodeNG or Uninferable) or None
-        """
         for yield_ in self.nodes_of_class(node_classes.Yield):
             if yield_.value is None:
                 yield node_classes.Const(None, parent=yield_, lineno=yield_.lineno)
@@ -1558,7 +1418,6 @@ class FunctionDef(
         caller: SuccessfulInferenceResult | None,
         context: InferenceContext | None = None,
     ) -> Iterator[InferenceResult]:
-        """Infer what the function returns when called."""
         if context is None:
             context = InferenceContext()
         if self.is_generator():
@@ -1569,12 +1428,6 @@ class FunctionDef(
             result = generator_cls(self, generator_initial_context=context)
             yield result
             return
-        # This is really a gigantic hack to work around metaclass generators
-        # that return transient class-generating functions. Pylint's AST structure
-        # cannot handle a base class object that is only used for calling __new__,
-        # but does not contribute to the inheritance structure itself. We inject
-        # a fake class into the hierarchy here for several well-known metaclass
-        # generators, and filter it out later.
         if (
             self.name == "with_metaclass"
             and caller is not None
@@ -1588,7 +1441,7 @@ class FunctionDef(
             elif isinstance(caller.args, list):
                 metaclass = next(caller.args[0].infer(context), None)
             else:
-                raise TypeError(  # pragma: no cover
+                raise TypeError(
                     f"caller.args was neither Arguments nor list; got {type(caller.args)}"
                 )
             if isinstance(metaclass, ClassDef):
@@ -1637,11 +1490,6 @@ class FunctionDef(
                     yield util.Uninferable
 
     def bool_value(self, context: InferenceContext | None = None) -> bool:
-        """Determine the boolean value of this node.
-
-        :returns: The boolean value of this node.
-            For a :class:`FunctionDef` this is always ``True``.
-        """
         return True
 
     def get_children(self):
@@ -1659,12 +1507,7 @@ class FunctionDef(
     def scope_lookup(
         self, node: LookupMixIn, name: str, offset: int = 0
     ) -> tuple[LocalsDictNodeNG, list[nodes.NodeNG]]:
-        """Lookup where the given name is assigned."""
         if name == "__class__":
-            # __class__ is an implicit closure reference created by the compiler
-            # if any methods in a class body refer to either __class__ or super.
-            # In our case, we want to be able to look it up in the current scope
-            # when `__class__` is being used.
             if self.parent and isinstance(frame := self.parent.frame(), ClassDef):
                 return self, [frame]
 
@@ -1674,25 +1517,14 @@ class FunctionDef(
             if not self.parent:
                 raise ParentMissingError(target=self)
             frame = self.parent.frame()
-            # line offset to avoid that def func(f=func) resolve the default
-            # value to the defined function
             offset = -1
         else:
-            # check this is not used in function decorators
             frame = self
         return frame._scope_lookup(node, name, offset)
 
     def frame(self: _T, *, future: Literal[None, True] = None) -> _T:
-        """The node's frame node.
-
-        A frame node is a :class:`Module`, :class:`FunctionDef`,
-        :class:`ClassDef` or :class:`Lambda`.
-
-        :returns: The node itself.
-        """
         return self
 
-
 class AsyncFunctionDef(FunctionDef):
     """Class representing an :class:`ast.FunctionDef` node.
 
